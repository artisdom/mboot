; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave --gnu -o.\output\medsdcard.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\medsdcard.d --cpu=ARM926EJ-S --apcs=interwork -O1 -I.\atmel -I.\ -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Atmel\SAM9M10 -Dat91sam9m10 -Dddram -DNOFPUT -DTRACE_LEVEL=4 --omf_browse=.\output\medsdcard.crf atmel\MEDSdcard.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  MCI0_IrqHandler PROC
;;;78     //------------------------------------------------------------------------------
;;;79     void MCI0_IrqHandler(void)
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81         MCI_Handler(mciDrv);
000002  48f9              LDR      r0,|L1.1000|
000004  f7fffffe          BL       MCI_Handler
;;;82     }
000008  bd10              POP      {r4,pc}
;;;83     
                          ENDP

                  CardIsConnected PROC
;;;99     //------------------------------------------------------------------------------
;;;100    static unsigned char CardIsConnected(unsigned char slot)
00000a  2800              CMP      r0,#0
;;;101    {
;;;102        if (slot == 0) {
00000c  d003              BEQ      |L1.22|
;;;103    //      #if defined(BOARD_SD_PIN_CD)
;;;104    //        PIO_Configure(&pinCardDetect, 1);
;;;105    //        return PIO_Get(&pinCardDetect) ? 0 : 1;
;;;106    //      #else
;;;107    //        return 1;
;;;108    //      #endif
;;;109        	return 1;
;;;110        }
;;;111        if (slot == 1) {
00000e  2801              CMP      r0,#1
000010  d003              BEQ      |L1.26|
;;;112    //      #if defined(BOARD_SD_MCI1_PIN_CD)
;;;113    //        PIO_Configure(&pinCardDetect1, 1);
;;;114    //        return PIO_Get(&pinCardDetect1) ? 0 : 1;
;;;115    //      #else
;;;116    //        return 1;
;;;117    //      #endif
;;;118        	return 0;
;;;119        }
;;;120    
;;;121        return 0;
000012  2000              MOVS     r0,#0
;;;122    }
000014  4770              BX       lr
                  |L1.22|
000016  2001              MOVS     r0,#1                 ;109
000018  4770              BX       lr
                  |L1.26|
00001a  2000              MOVS     r0,#0                 ;118
00001c  4770              BX       lr
;;;123    
                          ENDP

                  CardIsProtected PROC
;;;139    //------------------------------------------------------------------------------
;;;140    static unsigned char CardIsProtected(unsigned char slot)
00001e  2800              CMP      r0,#0
;;;141    {
;;;142        if (slot == 0) {
000020  d003              BEQ      |L1.42|
;;;143          #ifdef BOARD_SD_PIN_WP
;;;144            PIO_Configure(&pinMciWriteProtect, 1);
;;;145            return (PIO_Get(&pinMciWriteProtect) != 0);
;;;146          #else
;;;147            return 0;
;;;148          #endif
;;;149        }
;;;150    
;;;151        if (slot == 1) {
000022  2801              CMP      r0,#1
000024  d003              BEQ      |L1.46|
;;;152          #ifdef BOARD_SD_MCI1_PIN_WP
;;;153            PIO_Configure(&pinMciWriteProtect1, 1);
;;;154            return (PIO_Get(&pinMciWriteProtect1) != 0);
;;;155          #else
;;;156            return 0;
;;;157          #endif
;;;158        }
;;;159    
;;;160        return 0;
000026  2000              MOVS     r0,#0
;;;161    }
000028  4770              BX       lr
                  |L1.42|
00002a  2000              MOVS     r0,#0                 ;147
00002c  4770              BX       lr
                  |L1.46|
00002e  2000              MOVS     r0,#0                 ;156
000030  4770              BX       lr
;;;162    
                          ENDP

                  ConfigurePIO PROC
;;;166    //------------------------------------------------------------------------------
;;;167    static void ConfigurePIO(unsigned char mciID)
000032  4770              BX       lr
;;;168    {
;;;169    //    #ifdef BOARD_SD_PINS
;;;170    //    const Pin pinSd0[] = {BOARD_SD_PINS};
;;;171    //    #endif
;;;172    //    
;;;173    //    #ifdef BOARD_SD_MCI1_PINS
;;;174    //    const Pin pinSd1[] = {BOARD_SD_MCI1_PINS};
;;;175    //    #endif
;;;176    //  
;;;177    //    if(mciID == 0) {
;;;178    //        #ifdef BOARD_SD_PINS 
;;;179    //        PIO_Configure(pinSd0, PIO_LISTSIZE(pinSd0));
;;;180    //        #endif
;;;181    //    } else {
;;;182    //        #ifdef BOARD_SD_MCI1_PINS
;;;183    //        PIO_Configure(pinSd1, PIO_LISTSIZE(pinSd1));
;;;184    //        #endif
;;;185    //    }
;;;186    }
;;;187    
                          ENDP

                  MEDSdcard_Read PROC
;;;199    //------------------------------------------------------------------------------
;;;200    static unsigned char MEDSdcard_Read(Media         *media,
000034  b5f8              PUSH     {r3-r7,lr}
;;;201                                        unsigned int  address,
;;;202                                        void          *data,
;;;203                                        unsigned int  length,
;;;204                                        MediaCallback callback,
;;;205                                        void          *argument)
;;;206    {
000036  9e06              LDR      r6,[sp,#0x18]
000038  000f              MOVS     r7,r1
00003a  001d              MOVS     r5,r3
;;;207        unsigned char error;
;;;208    
;;;209        // Check that the media is ready
;;;210        if (media->state != MED_STATE_READY) {
00003c  0004              MOVS     r4,r0
00003e  3440              ADDS     r4,r4,#0x40
000040  7861              LDRB     r1,[r4,#1]
000042  2900              CMP      r1,#0
000044  d013              BEQ      |L1.110|
;;;211    
;;;212            TRACE_INFO("Media busy\n\r");
000046  201b              MOVS     r0,#0x1b
000048  f7fffffe          BL       ShellPutByte
00004c  a0e7              ADR      r0,|L1.1004|
00004e  f7fffffe          BL       ShellPrintf
000052  201b              MOVS     r0,#0x1b
000054  f7fffffe          BL       ShellPutByte
000058  a0e7              ADR      r0,|L1.1016|
00005a  f7fffffe          BL       ShellPrintf
00005e  a0e7              ADR      r0,|L1.1020|
000060  f7fffffe          BL       ShellPrintf
000064  a0e9              ADR      r0,|L1.1036|
000066  f7fffffe          BL       ShellPrintf
;;;213            return MED_STATUS_BUSY;
00006a  2002              MOVS     r0,#2
;;;214        }
;;;215    
;;;216        // Check that the data to read is not too big
;;;217        if ((length + address) > media->size) {
;;;218    
;;;219            TRACE_WARNING("MEDSdcard_Read: Data too big: %d, %d\n\r",
;;;220                          (int)length, (int)address);
;;;221            return MED_STATUS_ERROR;
;;;222        }
;;;223    
;;;224        // Enter Busy state
;;;225        media->state = MED_STATE_BUSY;
;;;226    
;;;227        #if 0
;;;228        // Read no more than 15KB from SD
;;;229        {   unsigned int rdLen, totalLen = 0;
;;;230            do {
;;;231                rdLen = length - totalLen;
;;;232                if (rdLen > 30) rdLen = 30;
;;;233                error = SD_ReadBlock(media->interface, address, rdLen, data);
;;;234                totalLen += rdLen;
;;;235                address  += rdLen;
;;;236                data      = (void*)((unsigned long)data + rdLen*SD_BLOCK_SIZE);
;;;237            } while(!error && totalLen < length);
;;;238        }
;;;239        #else
;;;240        error = SD_ReadBlock((SdCard*)media->interface, address, length, data);
;;;241        #endif
;;;242    
;;;243        // Leave the Busy state
;;;244        media->state = MED_STATE_READY;
;;;245    
;;;246        // Invoke callback
;;;247        if (callback != 0) {
;;;248    
;;;249            callback(argument, error ? MED_STATUS_ERROR : MED_STATUS_SUCCESS, 0, 0);
;;;250        }
;;;251    
;;;252        return MED_STATUS_SUCCESS;
;;;253    }
00006c  bdf8              POP      {r3-r7,pc}
                  |L1.110|
00006e  6a43              LDR      r3,[r0,#0x24]         ;217
000070  19e9              ADDS     r1,r5,r7              ;217
000072  4299              CMP      r1,r3                 ;217
000074  d915              BLS      |L1.162|
000076  201b              MOVS     r0,#0x1b              ;219
000078  f7fffffe          BL       ShellPutByte
00007c  a0e4              ADR      r0,|L1.1040|
00007e  f7fffffe          BL       ShellPrintf
000082  201b              MOVS     r0,#0x1b              ;219
000084  f7fffffe          BL       ShellPutByte
000088  a0db              ADR      r0,|L1.1016|
00008a  f7fffffe          BL       ShellPrintf
00008e  003a              MOVS     r2,r7                 ;219
000090  0029              MOVS     r1,r5                 ;219
000092  a0e2              ADR      r0,|L1.1052|
000094  f7fffffe          BL       ShellPrintf
000098  a0dc              ADR      r0,|L1.1036|
00009a  f7fffffe          BL       ShellPrintf
00009e  2001              MOVS     r0,#1                 ;221
0000a0  bdf8              POP      {r3-r7,pc}
                  |L1.162|
0000a2  2101              MOVS     r1,#1                 ;225
0000a4  7061              STRB     r1,[r4,#1]            ;225
0000a6  0429              LSLS     r1,r5,#16             ;240
0000a8  0c09              LSRS     r1,r1,#16             ;240
0000aa  0013              MOVS     r3,r2                 ;240
0000ac  000a              MOVS     r2,r1                 ;240
0000ae  6bc0              LDR      r0,[r0,#0x3c]         ;240
0000b0  0039              MOVS     r1,r7                 ;240
0000b2  f7fffffe          BL       SD_ReadBlock
0000b6  2100              MOVS     r1,#0                 ;244
0000b8  7061              STRB     r1,[r4,#1]            ;244
0000ba  2e00              CMP      r6,#0                 ;247
0000bc  d008              BEQ      |L1.208|
0000be  2800              CMP      r0,#0                 ;249
0000c0  d001              BEQ      |L1.198|
0000c2  2101              MOVS     r1,#1                 ;249
0000c4  e000              B        |L1.200|
                  |L1.198|
0000c6  2100              MOVS     r1,#0                 ;249
                  |L1.200|
0000c8  2300              MOVS     r3,#0                 ;249
0000ca  9807              LDR      r0,[sp,#0x1c]         ;249
0000cc  001a              MOVS     r2,r3                 ;249
0000ce  47b0              BLX      r6                    ;249
                  |L1.208|
0000d0  2000              MOVS     r0,#0                 ;252
0000d2  bdf8              POP      {r3-r7,pc}
;;;254    
                          ENDP

                  MEDSdcard_Write PROC
;;;267    //------------------------------------------------------------------------------
;;;268    static unsigned char MEDSdcard_Write(Media         *media,
0000d4  b5f8              PUSH     {r3-r7,lr}
;;;269                                        unsigned int  address,
;;;270                                        void          *data,
;;;271                                        unsigned int  length,
;;;272                                        MediaCallback callback,
;;;273                                        void          *argument)
;;;274    {
0000d6  9d06              LDR      r5,[sp,#0x18]
;;;275        unsigned char error;
;;;276    
;;;277        // Check that the media if ready
;;;278        if (media->state != MED_STATE_READY) {
0000d8  0004              MOVS     r4,r0
0000da  3440              ADDS     r4,r4,#0x40
0000dc  7866              LDRB     r6,[r4,#1]
0000de  2e00              CMP      r6,#0
0000e0  d013              BEQ      |L1.266|
;;;279    
;;;280            TRACE_WARNING("MEDSdcard_Write: Media is busy\n\r");
0000e2  201b              MOVS     r0,#0x1b
0000e4  f7fffffe          BL       ShellPutByte
0000e8  a0c9              ADR      r0,|L1.1040|
0000ea  f7fffffe          BL       ShellPrintf
0000ee  201b              MOVS     r0,#0x1b
0000f0  f7fffffe          BL       ShellPutByte
0000f4  a0c0              ADR      r0,|L1.1016|
0000f6  f7fffffe          BL       ShellPrintf
0000fa  a0d2              ADR      r0,|L1.1092|
0000fc  f7fffffe          BL       ShellPrintf
000100  a0c2              ADR      r0,|L1.1036|
000102  f7fffffe          BL       ShellPrintf
;;;281            return MED_STATUS_BUSY;
000106  2002              MOVS     r0,#2
;;;282        }
;;;283    
;;;284        // Check that the data to write is not too big
;;;285        if ((length + address) > media->size) {
;;;286    
;;;287            TRACE_WARNING("MEDSdcard_Write: Data too big\n\r");
;;;288            return MED_STATUS_ERROR;
;;;289        }
;;;290    
;;;291        // Put the media in Busy state
;;;292        media->state = MED_STATE_BUSY;
;;;293    
;;;294        #if 0
;;;295        // Write no more than 15KB
;;;296        {   unsigned int wrLen, totalLen = 0;
;;;297            do {
;;;298                wrLen = length - totalLen;
;;;299                if (wrLen > 30) wrLen = 30;
;;;300                error = SD_WriteBlock(media->interface,
;;;301                                      address, wrLen,
;;;302                                      data);
;;;303                totalLen += wrLen;
;;;304                address  += wrLen;
;;;305                data      = (void*)((unsigned long)data + wrLen*SD_BLOCK_SIZE);
;;;306            } while(!error && totalLen < length);
;;;307        }
;;;308        #else
;;;309        error = SD_WriteBlock((SdCard*)media->interface, address, length, data);
;;;310        #endif
;;;311    
;;;312        // Leave the Busy state
;;;313        media->state = MED_STATE_READY;
;;;314    
;;;315        // Invoke the callback if it exists
;;;316        if (callback != 0) {
;;;317    
;;;318            callback(argument, error ? MED_STATUS_ERROR : MED_STATUS_SUCCESS, 0, 0);
;;;319        }
;;;320    
;;;321        return MED_STATUS_SUCCESS;
;;;322    }
000108  bdf8              POP      {r3-r7,pc}
                  |L1.266|
00010a  6a47              LDR      r7,[r0,#0x24]         ;285
00010c  185e              ADDS     r6,r3,r1              ;285
00010e  42be              CMP      r6,r7                 ;285
000110  d913              BLS      |L1.314|
000112  201b              MOVS     r0,#0x1b              ;287
000114  f7fffffe          BL       ShellPutByte
000118  a0bd              ADR      r0,|L1.1040|
00011a  f7fffffe          BL       ShellPrintf
00011e  201b              MOVS     r0,#0x1b              ;287
000120  f7fffffe          BL       ShellPutByte
000124  a0b4              ADR      r0,|L1.1016|
000126  f7fffffe          BL       ShellPrintf
00012a  a0cf              ADR      r0,|L1.1128|
00012c  f7fffffe          BL       ShellPrintf
000130  a0b6              ADR      r0,|L1.1036|
000132  f7fffffe          BL       ShellPrintf
000136  2001              MOVS     r0,#1                 ;288
000138  bdf8              POP      {r3-r7,pc}
                  |L1.314|
00013a  2601              MOVS     r6,#1                 ;292
00013c  7066              STRB     r6,[r4,#1]            ;292
00013e  041e              LSLS     r6,r3,#16             ;309
000140  0c36              LSRS     r6,r6,#16             ;309
000142  0013              MOVS     r3,r2                 ;309
000144  6bc0              LDR      r0,[r0,#0x3c]         ;309
000146  0032              MOVS     r2,r6                 ;309
000148  f7fffffe          BL       SD_WriteBlock
00014c  2100              MOVS     r1,#0                 ;313
00014e  7061              STRB     r1,[r4,#1]            ;313
000150  2d00              CMP      r5,#0                 ;316
000152  d008              BEQ      |L1.358|
000154  2800              CMP      r0,#0                 ;318
000156  d001              BEQ      |L1.348|
000158  2101              MOVS     r1,#1                 ;318
00015a  e000              B        |L1.350|
                  |L1.348|
00015c  2100              MOVS     r1,#0                 ;318
                  |L1.350|
00015e  2300              MOVS     r3,#0                 ;318
000160  9807              LDR      r0,[sp,#0x1c]         ;318
000162  001a              MOVS     r2,r3                 ;318
000164  47a8              BLX      r5                    ;318
                  |L1.358|
000166  2000              MOVS     r0,#0                 ;321
000168  bdf8              POP      {r3-r7,pc}
;;;323    
                          ENDP

                  SdMmcCallback PROC
;;;326    //------------------------------------------------------------------------------
;;;327    static void SdMmcCallback(unsigned char status, void *pCommand)
00016a  b5f8              PUSH     {r3-r7,lr}
;;;328    {
00016c  0006              MOVS     r6,r0
;;;329        SdCmd       * pCmd = (SdCmd*)pCommand;
;;;330        Media       * pMed = pCmd->pArg;
00016e  698c              LDR      r4,[r1,#0x18]
;;;331        MEDTransfer * pXfr = &pMed->transfer;
000170  0025              MOVS     r5,r4
000172  3528              ADDS     r5,r5,#0x28
;;;332    
;;;333        TRACE_INFO_WP("SDCb ");
000174  201b              MOVS     r0,#0x1b
000176  f7fffffe          BL       ShellPutByte
00017a  a09c              ADR      r0,|L1.1004|
00017c  f7fffffe          BL       ShellPrintf
000180  201b              MOVS     r0,#0x1b
000182  f7fffffe          BL       ShellPutByte
000186  a09c              ADR      r0,|L1.1016|
000188  f7fffffe          BL       ShellPrintf
00018c  a0be              ADR      r0,|L1.1160|
00018e  f7fffffe          BL       ShellPrintf
;;;334    
;;;335        // Error
;;;336        if (status == SD_ERROR_BUSY) {
000192  2e04              CMP      r6,#4
000194  d010              BEQ      |L1.440|
;;;337            status = MED_STATUS_BUSY;
;;;338        }
;;;339        else if (status) {
000196  2e00              CMP      r6,#0
000198  d000              BEQ      |L1.412|
;;;340            status = MED_STATUS_ERROR;
00019a  2601              MOVS     r6,#1
                  |L1.412|
;;;341        }
;;;342    
;;;343        pMed->state = MED_STATE_READY;
00019c  2100              MOVS     r1,#0
00019e  2041              MOVS     r0,#0x41
0001a0  5501              STRB     r1,[r0,r4]
;;;344        if (pXfr->callback) {
0001a2  68ef              LDR      r7,[r5,#0xc]
0001a4  2f00              CMP      r7,#0
0001a6  d006              BEQ      |L1.438|
;;;345            pXfr->callback(pXfr->argument,
0001a8  68aa              LDR      r2,[r5,#8]
0001aa  69e0              LDR      r0,[r4,#0x1c]
0001ac  2300              MOVS     r3,#0
0001ae  4342              MULS     r2,r0,r2
0001b0  6928              LDR      r0,[r5,#0x10]
0001b2  0031              MOVS     r1,r6
0001b4  47b8              BLX      r7
                  |L1.438|
;;;346                           status,
;;;347                           pXfr->length * pMed->blockSize,
;;;348                           0);
;;;349        }
;;;350    }
0001b6  bdf8              POP      {r3-r7,pc}
                  |L1.440|
0001b8  2602              MOVS     r6,#2                 ;337
0001ba  e7ef              B        |L1.412|
;;;351    
                          ENDP

                  MEDSdusb_Read PROC
;;;363    //------------------------------------------------------------------------------
;;;364    static unsigned char MEDSdusb_Read(Media         *media,
0001bc  b5fe              PUSH     {r1-r7,lr}
;;;365                                       unsigned int  address,
;;;366                                       void          *data,
;;;367                                       unsigned int  length,
;;;368                                       MediaCallback callback,
;;;369                                       void          *argument)
;;;370    {
0001be  0004              MOVS     r4,r0
0001c0  000e              MOVS     r6,r1
0001c2  0017              MOVS     r7,r2
0001c4  001d              MOVS     r5,r3
;;;371        MEDTransfer * pXfr;
;;;372        unsigned char error;
;;;373    
;;;374        TRACE_INFO_WP("SDuRd(%d,%d) ", (int)address, (int)length);
0001c6  201b              MOVS     r0,#0x1b
0001c8  f7fffffe          BL       ShellPutByte
0001cc  a087              ADR      r0,|L1.1004|
0001ce  f7fffffe          BL       ShellPrintf
0001d2  201b              MOVS     r0,#0x1b
0001d4  f7fffffe          BL       ShellPutByte
0001d8  a087              ADR      r0,|L1.1016|
0001da  f7fffffe          BL       ShellPrintf
0001de  002a              MOVS     r2,r5
0001e0  0031              MOVS     r1,r6
0001e2  a0ab              ADR      r0,|L1.1168|
0001e4  f7fffffe          BL       ShellPrintf
;;;375    
;;;376        // Check that the media is ready
;;;377        if (media->state != MED_STATE_READY) {
0001e8  0020              MOVS     r0,r4
0001ea  3040              ADDS     r0,r0,#0x40
0001ec  7841              LDRB     r1,[r0,#1]
0001ee  2900              CMP      r1,#0
0001f0  d013              BEQ      |L1.538|
;;;378            TRACE_INFO("MEDSdusb_Read: Busy\n\r");
0001f2  201b              MOVS     r0,#0x1b
0001f4  f7fffffe          BL       ShellPutByte
0001f8  a07c              ADR      r0,|L1.1004|
0001fa  f7fffffe          BL       ShellPrintf
0001fe  201b              MOVS     r0,#0x1b
000200  f7fffffe          BL       ShellPutByte
000204  a07c              ADR      r0,|L1.1016|
000206  f7fffffe          BL       ShellPrintf
00020a  a0a5              ADR      r0,|L1.1184|
00020c  f7fffffe          BL       ShellPrintf
000210  a07e              ADR      r0,|L1.1036|
000212  f7fffffe          BL       ShellPrintf
;;;379            return MED_STATUS_BUSY;
000216  2002              MOVS     r0,#2
;;;380        }
;;;381        // Check that the data to read is not too big
;;;382        if ((length + address) > media->size) {
;;;383            TRACE_WARNING("MEDSdusb_Read: Data too big: %d, %d\n\r",
;;;384                          (int)length, (int)address);
;;;385            return MED_STATUS_ERROR;
;;;386        }
;;;387        // Enter Busy state
;;;388        media->state = MED_STATE_BUSY;
;;;389        
;;;390        // Start media transfer
;;;391        pXfr = &media->transfer;
;;;392        pXfr->data     = data;
;;;393        pXfr->address  = address;
;;;394        pXfr->length   = length;
;;;395        pXfr->callback = callback;
;;;396        pXfr->argument = argument;
;;;397        
;;;398        error = SD_Read((SdCard*)media->interface,
;;;399                         address,
;;;400                         data,
;;;401                         length,
;;;402                         SdMmcCallback,
;;;403                         media);
;;;404    
;;;405        return (error ? MED_STATUS_ERROR : MED_STATUS_SUCCESS);
;;;406    }
000218  bdfe              POP      {r1-r7,pc}
                  |L1.538|
00021a  6a62              LDR      r2,[r4,#0x24]         ;382
00021c  19a9              ADDS     r1,r5,r6              ;382
00021e  4291              CMP      r1,r2                 ;382
000220  d915              BLS      |L1.590|
000222  201b              MOVS     r0,#0x1b              ;383
000224  f7fffffe          BL       ShellPutByte
000228  a079              ADR      r0,|L1.1040|
00022a  f7fffffe          BL       ShellPrintf
00022e  201b              MOVS     r0,#0x1b              ;383
000230  f7fffffe          BL       ShellPutByte
000234  a070              ADR      r0,|L1.1016|
000236  f7fffffe          BL       ShellPrintf
00023a  0032              MOVS     r2,r6                 ;383
00023c  0029              MOVS     r1,r5                 ;383
00023e  a09e              ADR      r0,|L1.1208|
000240  f7fffffe          BL       ShellPrintf
000244  a071              ADR      r0,|L1.1036|
000246  f7fffffe          BL       ShellPrintf
00024a  2001              MOVS     r0,#1                 ;385
00024c  bdfe              POP      {r1-r7,pc}
                  |L1.590|
00024e  2101              MOVS     r1,#1                 ;388
000250  7041              STRB     r1,[r0,#1]            ;388
000252  0020              MOVS     r0,r4                 ;391
000254  6287              STR      r7,[r0,#0x28]         ;392
000256  62c6              STR      r6,[r0,#0x2c]         ;393
000258  6305              STR      r5,[r0,#0x30]         ;394
00025a  9908              LDR      r1,[sp,#0x20]         ;395
00025c  6341              STR      r1,[r0,#0x34]         ;395
00025e  9909              LDR      r1,[sp,#0x24]         ;396
000260  6381              STR      r1,[r0,#0x38]         ;396
000262  489f              LDR      r0,|L1.1248|
000264  042b              LSLS     r3,r5,#16             ;398
000266  9401              STR      r4,[sp,#4]            ;398
000268  9000              STR      r0,[sp,#0]            ;398
00026a  6be0              LDR      r0,[r4,#0x3c]         ;398
00026c  0c1b              LSRS     r3,r3,#16             ;398
00026e  003a              MOVS     r2,r7                 ;398
000270  0031              MOVS     r1,r6                 ;398
000272  f7fffffe          BL       SD_Read
000276  2800              CMP      r0,#0                 ;405
000278  d001              BEQ      |L1.638|
00027a  2001              MOVS     r0,#1                 ;405
00027c  bdfe              POP      {r1-r7,pc}
                  |L1.638|
00027e  2000              MOVS     r0,#0                 ;405
000280  bdfe              POP      {r1-r7,pc}
;;;407    
                          ENDP

                  MEDSdusb_Write PROC
;;;420    //------------------------------------------------------------------------------
;;;421    static unsigned char MEDSdusb_Write(Media         *media,
000282  b5fe              PUSH     {r1-r7,lr}
;;;422                                        unsigned int  address,
;;;423                                        void          *data,
;;;424                                        unsigned int  length,
;;;425                                        MediaCallback callback,
;;;426                                        void          *argument)
;;;427    {
000284  0004              MOVS     r4,r0
000286  000e              MOVS     r6,r1
000288  0017              MOVS     r7,r2
00028a  001d              MOVS     r5,r3
;;;428        MEDTransfer * pXfr;
;;;429        unsigned char error;
;;;430        TRACE_INFO_WP("SDuWr(%d,%d) ", (int)address, (int)length);
00028c  201b              MOVS     r0,#0x1b
00028e  f7fffffe          BL       ShellPutByte
000292  a056              ADR      r0,|L1.1004|
000294  f7fffffe          BL       ShellPrintf
000298  201b              MOVS     r0,#0x1b
00029a  f7fffffe          BL       ShellPutByte
00029e  a056              ADR      r0,|L1.1016|
0002a0  f7fffffe          BL       ShellPrintf
0002a4  002a              MOVS     r2,r5
0002a6  0031              MOVS     r1,r6
0002a8  a08e              ADR      r0,|L1.1252|
0002aa  f7fffffe          BL       ShellPrintf
;;;431    
;;;432        // Check that the media if ready
;;;433        if (media->state != MED_STATE_READY) {
0002ae  0020              MOVS     r0,r4
0002b0  3040              ADDS     r0,r0,#0x40
0002b2  7841              LDRB     r1,[r0,#1]
0002b4  2900              CMP      r1,#0
0002b6  d013              BEQ      |L1.736|
;;;434            TRACE_INFO("MEDSdusb_Write: Busy\n\r");
0002b8  201b              MOVS     r0,#0x1b
0002ba  f7fffffe          BL       ShellPutByte
0002be  a04b              ADR      r0,|L1.1004|
0002c0  f7fffffe          BL       ShellPrintf
0002c4  201b              MOVS     r0,#0x1b
0002c6  f7fffffe          BL       ShellPutByte
0002ca  a04b              ADR      r0,|L1.1016|
0002cc  f7fffffe          BL       ShellPrintf
0002d0  a088              ADR      r0,|L1.1268|
0002d2  f7fffffe          BL       ShellPrintf
0002d6  a04d              ADR      r0,|L1.1036|
0002d8  f7fffffe          BL       ShellPrintf
;;;435            return MED_STATUS_BUSY;
0002dc  2002              MOVS     r0,#2
;;;436        }
;;;437        // Check that the data to write is not too big
;;;438        if ((length + address) > media->size) {
;;;439            TRACE_WARNING("MEDSdcard_Write: Data too big\n\r");
;;;440            return MED_STATUS_ERROR;
;;;441        }
;;;442        // Put the media in Busy state
;;;443        media->state = MED_STATE_BUSY;
;;;444    
;;;445        // Start media transfer
;;;446        pXfr = &media->transfer;
;;;447        pXfr->data = data;
;;;448        pXfr->address = address;
;;;449        pXfr->length = length;
;;;450        pXfr->callback = callback;
;;;451        pXfr->argument = argument;
;;;452        
;;;453        error = SD_Write((SdCard*)media->interface,
;;;454                          address,
;;;455                          data,
;;;456                          length,
;;;457                          SdMmcCallback,
;;;458                          media);
;;;459    
;;;460        return (error ? MED_STATUS_ERROR : MED_STATUS_SUCCESS);
;;;461    }
0002de  bdfe              POP      {r1-r7,pc}
                  |L1.736|
0002e0  6a62              LDR      r2,[r4,#0x24]         ;438
0002e2  19a9              ADDS     r1,r5,r6              ;438
0002e4  4291              CMP      r1,r2                 ;438
0002e6  d913              BLS      |L1.784|
0002e8  201b              MOVS     r0,#0x1b              ;439
0002ea  f7fffffe          BL       ShellPutByte
0002ee  a048              ADR      r0,|L1.1040|
0002f0  f7fffffe          BL       ShellPrintf
0002f4  201b              MOVS     r0,#0x1b              ;439
0002f6  f7fffffe          BL       ShellPutByte
0002fa  a03f              ADR      r0,|L1.1016|
0002fc  f7fffffe          BL       ShellPrintf
000300  a059              ADR      r0,|L1.1128|
000302  f7fffffe          BL       ShellPrintf
000306  a041              ADR      r0,|L1.1036|
000308  f7fffffe          BL       ShellPrintf
00030c  2001              MOVS     r0,#1                 ;440
00030e  bdfe              POP      {r1-r7,pc}
                  |L1.784|
000310  2101              MOVS     r1,#1                 ;443
000312  7041              STRB     r1,[r0,#1]            ;443
000314  0020              MOVS     r0,r4                 ;446
000316  6287              STR      r7,[r0,#0x28]         ;447
000318  62c6              STR      r6,[r0,#0x2c]         ;448
00031a  6305              STR      r5,[r0,#0x30]         ;449
00031c  9908              LDR      r1,[sp,#0x20]         ;450
00031e  6341              STR      r1,[r0,#0x34]         ;450
000320  9909              LDR      r1,[sp,#0x24]         ;451
000322  6381              STR      r1,[r0,#0x38]         ;451
000324  486e              LDR      r0,|L1.1248|
000326  042b              LSLS     r3,r5,#16             ;453
000328  9401              STR      r4,[sp,#4]            ;453
00032a  9000              STR      r0,[sp,#0]            ;453
00032c  6be0              LDR      r0,[r4,#0x3c]         ;453
00032e  0c1b              LSRS     r3,r3,#16             ;453
000330  003a              MOVS     r2,r7                 ;453
000332  0031              MOVS     r1,r6                 ;453
000334  f7fffffe          BL       SD_Write
000338  2800              CMP      r0,#0                 ;460
00033a  d001              BEQ      |L1.832|
00033c  2001              MOVS     r0,#1                 ;460
00033e  bdfe              POP      {r1-r7,pc}
                  |L1.832|
000340  2000              MOVS     r0,#0                 ;460
000342  bdfe              POP      {r1-r7,pc}
;;;462    
                          ENDP

                  MEDSdcard_Detect PROC
;;;469    //------------------------------------------------------------------------------
;;;470    unsigned char MEDSdcard_Detect(Media * media, unsigned char mciID)
000344  0008              MOVS     r0,r1
;;;471    {
;;;472        return CardIsConnected(mciID);
000346  e7fe              B        CardIsConnected
;;;473    }
;;;474    
                          ENDP

                  MEDSdcard_Initialize PROC
;;;479    //------------------------------------------------------------------------------
;;;480    unsigned char MEDSdcard_Initialize(Media *media, unsigned char mciID)
000348  b5f8              PUSH     {r3-r7,lr}
;;;481    {    
00034a  0004              MOVS     r4,r0
00034c  000f              MOVS     r7,r1
;;;482        DEBUG_MSG("MEDSdcard init...");
;;;483    
;;;484        // Initialize SDcard
;;;485        //--------------------------------------------------------------------------
;;;486    
;;;487        if (!CardIsConnected(mciID)) return 0;
00034e  0038              MOVS     r0,r7
000350  f7fffffe          BL       CardIsConnected
000354  2800              CMP      r0,#0
000356  d033              BEQ      |L1.960|
;;;488    
;;;489        // Configure SDcard pins
;;;490        ConfigurePIO(mciID);
000358  0038              MOVS     r0,r7
00035a  f7fffffe          BL       ConfigurePIO
;;;491        
;;;492        #if defined(MCI2_INTERFACE)
;;;493        DMAD_Initialize(BOARD_MCI_DMA_CHANNEL, DMAD_NO_DEFAULT_IT);
00035e  2100              MOVS     r1,#0
000360  0008              MOVS     r0,r1
000362  f7fffffe          BL       DMAD_Initialize
000366  2600              MOVS     r6,#0                 ;487
;;;494        #endif
;;;495        // Initialize the MCI driver
;;;496        if(mciID == 0) {
000368  2f00              CMP      r7,#0
00036a  d02b              BEQ      |L1.964|
;;;497            IRQ_ConfigureIT(BOARD_SD_MCI_ID,  1, MCI0_IrqHandler);
;;;498            MCI_Init(mciDrv, BOARD_SD_MCI_BASE, BOARD_SD_MCI_ID, BOARD_SD_SLOT, MCI_INTERRUPT_MODE);
;;;499            IRQ_EnableIT(BOARD_SD_MCI_ID);
;;;500        } else {
;;;501            #ifdef BOARD_SD_MCI1_ID
;;;502            IRQ_ConfigureIT(BOARD_SD_MCI1_ID,  1, MCI0_IrqHandler);
00036c  4a67              LDR      r2,|L1.1292|
00036e  2101              MOVS     r1,#1
000370  201d              MOVS     r0,#0x1d
000372  f7fffffe          BL       IRQ_ConfigureIT
;;;503            MCI_Init(mciDrv, BOARD_SD_MCI1_BASE, BOARD_SD_MCI1_ID, BOARD_SD_MCI1_SLOT, MCI_INTERRUPT_MODE);
000376  4966              LDR      r1,|L1.1296|
000378  481b              LDR      r0,|L1.1000|
00037a  2380              MOVS     r3,#0x80
00037c  221d              MOVS     r2,#0x1d
00037e  9600              STR      r6,[sp,#0]
000380  f7fffffe          BL       MCI_Init
;;;504            IRQ_EnableIT(BOARD_SD_MCI1_ID);
000384  201d              MOVS     r0,#0x1d
000386  f7fffffe          BL       IRQ_EnableIT
                  |L1.906|
;;;505            #else
;;;506            TRACE_ERR("SD/MMC card initialization failed (MCI1 not supported)\n\r");
;;;507            #endif
;;;508        }
;;;509    #if MCI_BUSY_CHECK_FIX && defined(BOARD_SD_DAT0)
;;;510        MCI_SetBusyFix(mciDrv, &pinSdDAT0);
;;;511    #endif
;;;512    
;;;513        // Initialize the SD card driver
;;;514        if (SD_Init(sdDrv, (SdDriver *)mciDrv)) {
00038a  4917              LDR      r1,|L1.1000|
00038c  0008              MOVS     r0,r1
00038e  3010              ADDS     r0,r0,#0x10
000390  f7fffffe          BL       SD_Init
000394  2800              CMP      r0,#0
000396  d025              BEQ      |L1.996|
;;;515        
;;;516            TRACE_ERR("SD/MMC card initialization failed\n\r");
000398  201b              MOVS     r0,#0x1b
00039a  f7fffffe          BL       ShellPutByte
00039e  a05d              ADR      r0,|L1.1300|
0003a0  f7fffffe          BL       ShellPrintf
0003a4  201b              MOVS     r0,#0x1b
0003a6  f7fffffe          BL       ShellPutByte
0003aa  a013              ADR      r0,|L1.1016|
0003ac  f7fffffe          BL       ShellPrintf
0003b0  a05b              ADR      r0,|L1.1312|
0003b2  f7fffffe          BL       ShellPrintf
0003b6  a015              ADR      r0,|L1.1036|
0003b8  f7fffffe          BL       ShellPrintf
;;;517            return 0;
0003bc  2000              MOVS     r0,#0
;;;518        }
;;;519        else {
;;;520    
;;;521            //SD_DisplayRegisterCSD(&sdDrv);
;;;522            DEBUG_MSG("SD/MMC card initialization successful");
;;;523            DEBUG_MSG("Card size: %d MB", (int)(MMC_GetTotalSizeKB(sdDrv)/1024));
;;;524        }
;;;525        MCI_SetSpeed(mciDrv, sdDrv->transSpeed, sdDrv->transSpeed, BOARD_MCK);
;;;526       
;;;527        // Initialize media fields
;;;528        //--------------------------------------------------------------------------
;;;529        media->interface = sdDrv;
;;;530        #if !defined(OP_BOOTSTRAP_MCI_on)
;;;531        media->write = MEDSdcard_Write;
;;;532        #else
;;;533        media->write = 0;
;;;534        #endif
;;;535        media->read = MEDSdcard_Read;
;;;536        media->lock = 0;
;;;537        media->unlock = 0;
;;;538        media->handler = 0;
;;;539        media->flush = 0;
;;;540    
;;;541        media->blockSize = SD_BLOCK_SIZE;
;;;542        media->baseAddress = 0;
;;;543        if (SD_TOTAL_SIZE(sdDrv) == 0xFFFFFFFF)
;;;544            media->size = SD_TOTAL_BLOCK(sdDrv);
;;;545        else
;;;546            media->size = SD_TOTAL_SIZE(sdDrv)/SD_BLOCK_SIZE;
;;;547    
;;;548        media->mappedRD  = 0;
;;;549        media->mappedWR  = 0;
;;;550        media->protected = CardIsProtected(mciID);
;;;551        media->removable = 1;
;;;552    
;;;553        media->state = MED_STATE_READY;
;;;554    
;;;555        media->transfer.data = 0;
;;;556        media->transfer.address = 0;
;;;557        media->transfer.length = 0;
;;;558        media->transfer.callback = 0;
;;;559        media->transfer.argument = 0;
;;;560    
;;;561        return 1;
;;;562    }
0003be  bdf8              POP      {r3-r7,pc}
                  |L1.960|
0003c0  2000              MOVS     r0,#0                 ;487
0003c2  bdf8              POP      {r3-r7,pc}
                  |L1.964|
0003c4  4a51              LDR      r2,|L1.1292|
0003c6  2101              MOVS     r1,#1                 ;497
0003c8  200b              MOVS     r0,#0xb               ;497
0003ca  f7fffffe          BL       IRQ_ConfigureIT
0003ce  495d              LDR      r1,|L1.1348|
0003d0  4805              LDR      r0,|L1.1000|
0003d2  2380              MOVS     r3,#0x80              ;498
0003d4  220b              MOVS     r2,#0xb               ;498
0003d6  9600              STR      r6,[sp,#0]            ;498
0003d8  f7fffffe          BL       MCI_Init
0003dc  200b              MOVS     r0,#0xb               ;499
0003de  f7fffffe          BL       IRQ_EnableIT
0003e2  e7d2              B        |L1.906|
                  |L1.996|
0003e4  e0b0              B        |L1.1352|
0003e6  0000              DCW      0x0000
                  |L1.1000|
                          DCD      ||.bss||
                  |L1.1004|
0003ec  5b313b31          DCB      "[1;1;34mI: ",0
0003f0  3b33346d
0003f4  493a2000
                  |L1.1016|
0003f8  5b6d00            DCB      "[m",0
0003fb  00                DCB      0
                  |L1.1020|
0003fc  4d656469          DCB      "Media busy\n\r",0
000400  61206275
000404  73790a0d
000408  00      
000409  00                DCB      0
00040a  00                DCB      0
00040b  00                DCB      0
                  |L1.1036|
00040c  0a0d00            DCB      "\n\r",0
00040f  00                DCB      0
                  |L1.1040|
000410  5b313b31          DCB      "[1;1;33m!: ",0
000414  3b33336d
000418  213a2000
                  |L1.1052|
00041c  4d454453          DCB      "MEDSdcard_Read: Data too big: %d, %d\n\r",0
000420  64636172
000424  645f5265
000428  61643a20
00042c  44617461
000430  20746f6f
000434  20626967
000438  3a202564
00043c  2c202564
000440  0a0d00  
000443  00                DCB      0
                  |L1.1092|
000444  4d454453          DCB      "MEDSdcard_Write: Media is busy\n\r",0
000448  64636172
00044c  645f5772
000450  6974653a
000454  204d6564
000458  69612069
00045c  73206275
000460  73790a0d
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L1.1128|
000468  4d454453          DCB      "MEDSdcard_Write: Data too big\n\r",0
00046c  64636172
000470  645f5772
000474  6974653a
000478  20446174
00047c  6120746f
000480  6f206269
000484  670a0d00
                  |L1.1160|
000488  53444362          DCB      "SDCb ",0
00048c  2000    
00048e  00                DCB      0
00048f  00                DCB      0
                  |L1.1168|
000490  53447552          DCB      "SDuRd(%d,%d) ",0
000494  64282564
000498  2c256429
00049c  2000    
00049e  00                DCB      0
00049f  00                DCB      0
                  |L1.1184|
0004a0  4d454453          DCB      "MEDSdusb_Read: Busy\n\r",0
0004a4  64757362
0004a8  5f526561
0004ac  643a2042
0004b0  7573790a
0004b4  0d00    
0004b6  00                DCB      0
0004b7  00                DCB      0
                  |L1.1208|
0004b8  4d454453          DCB      "MEDSdusb_Read: Data too big: %d, %d\n\r",0
0004bc  64757362
0004c0  5f526561
0004c4  643a2044
0004c8  61746120
0004cc  746f6f20
0004d0  6269673a
0004d4  2025642c
0004d8  2025640a
0004dc  0d00    
0004de  00                DCB      0
0004df  00                DCB      0
                  |L1.1248|
                          DCD      SdMmcCallback
                  |L1.1252|
0004e4  53447557          DCB      "SDuWr(%d,%d) ",0
0004e8  72282564
0004ec  2c256429
0004f0  2000    
0004f2  00                DCB      0
0004f3  00                DCB      0
                  |L1.1268|
0004f4  4d454453          DCB      "MEDSdusb_Write: Busy\n\r",0
0004f8  64757362
0004fc  5f577269
000500  74653a20
000504  42757379
000508  0a0d00  
00050b  00                DCB      0
                  |L1.1292|
                          DCD      MCI0_IrqHandler
                  |L1.1296|
                          DCD      0xfffd0000
                  |L1.1300|
000514  5b313b31          DCB      "[1;1;31mE: ",0
000518  3b33316d
00051c  453a2000
                  |L1.1312|
000520  53442f4d          DCB      "SD/MMC card initialization failed\n\r",0
000524  4d432063
000528  61726420
00052c  696e6974
000530  69616c69
000534  7a617469
000538  6f6e2066
00053c  61696c65
000540  640a0d00
                  |L1.1348|
                          DCD      0xfff80000
                  |L1.1352|
000548  4da2              LDR      r5,|L1.2004|
00054a  4ba3              LDR      r3,|L1.2008|
00054c  69a9              LDR      r1,[r5,#0x18]         ;525
00054e  48a3              LDR      r0,|L1.2012|
000550  000a              MOVS     r2,r1                 ;525
000552  f7fffffe          BL       MCI_SetSpeed
000556  48a1              LDR      r0,|L1.2012|
000558  3010              ADDS     r0,r0,#0x10           ;529
00055a  63e0              STR      r0,[r4,#0x3c]         ;529
00055c  48a0              LDR      r0,|L1.2016|
00055e  6020              STR      r0,[r4,#0]            ;531
000560  48a0              LDR      r0,|L1.2020|
000562  6060              STR      r0,[r4,#4]            ;535
000564  60e6              STR      r6,[r4,#0xc]          ;536
000566  6126              STR      r6,[r4,#0x10]         ;537
000568  61a6              STR      r6,[r4,#0x18]         ;538
00056a  6166              STR      r6,[r4,#0x14]         ;539
00056c  489e              LDR      r0,|L1.2024|
00056e  61e0              STR      r0,[r4,#0x1c]         ;541
000570  6226              STR      r6,[r4,#0x20]         ;542
000572  68e8              LDR      r0,[r5,#0xc]          ;543
000574  1c41              ADDS     r1,r0,#1              ;543
000576  d01d              BEQ      |L1.1460|
000578  0a40              LSRS     r0,r0,#9              ;546
00057a  6260              STR      r0,[r4,#0x24]         ;546
                  |L1.1404|
00057c  0025              MOVS     r5,r4                 ;548
00057e  3540              ADDS     r5,r5,#0x40           ;548
000580  7828              LDRB     r0,[r5,#0]            ;548
000582  21ef              MOVS     r1,#0xef              ;548
000584  4008              ANDS     r0,r0,r1              ;548
000586  21df              MOVS     r1,#0xdf              ;549
000588  4008              ANDS     r0,r0,r1              ;549
00058a  7028              STRB     r0,[r5,#0]            ;549
00058c  0038              MOVS     r0,r7                 ;550
00058e  f7fffffe          BL       CardIsProtected
000592  07c0              LSLS     r0,r0,#31             ;550
000594  0e41              LSRS     r1,r0,#25             ;550
000596  7828              LDRB     r0,[r5,#0]            ;550
000598  22bf              MOVS     r2,#0xbf              ;550
00059a  4010              ANDS     r0,r0,r2              ;550
00059c  4308              ORRS     r0,r0,r1              ;550
00059e  2180              MOVS     r1,#0x80              ;551
0005a0  4308              ORRS     r0,r0,r1              ;551
0005a2  7028              STRB     r0,[r5,#0]            ;551
0005a4  706e              STRB     r6,[r5,#1]            ;553
0005a6  62a6              STR      r6,[r4,#0x28]         ;555
0005a8  62e6              STR      r6,[r4,#0x2c]         ;556
0005aa  6326              STR      r6,[r4,#0x30]         ;557
0005ac  6366              STR      r6,[r4,#0x34]         ;558
0005ae  63a6              STR      r6,[r4,#0x38]         ;559
0005b0  2001              MOVS     r0,#1                 ;561
0005b2  bdf8              POP      {r3-r7,pc}
                  |L1.1460|
0005b4  6928              LDR      r0,[r5,#0x10]         ;544
0005b6  6260              STR      r0,[r4,#0x24]         ;544
0005b8  e7e0              B        |L1.1404|
;;;563    
                          ENDP

                  MEDSdusb_Initialize PROC
;;;568    //------------------------------------------------------------------------------
;;;569    unsigned char MEDSdusb_Initialize(Media *media, unsigned char mciID)
0005ba  b5f8              PUSH     {r3-r7,lr}
;;;570    {    
0005bc  0004              MOVS     r4,r0
0005be  000f              MOVS     r7,r1
;;;571        TRACE_INFO("MEDSdusb init\n\r");
0005c0  201b              MOVS     r0,#0x1b
0005c2  f7fffffe          BL       ShellPutByte
0005c6  4889              LDR      r0,|L1.2028|
0005c8  f7fffffe          BL       ShellPrintf
0005cc  201b              MOVS     r0,#0x1b
0005ce  f7fffffe          BL       ShellPutByte
0005d2  a087              ADR      r0,|L1.2032|
0005d4  f7fffffe          BL       ShellPrintf
0005d8  a086              ADR      r0,|L1.2036|
0005da  f7fffffe          BL       ShellPrintf
0005de  a089              ADR      r0,|L1.2052|
0005e0  f7fffffe          BL       ShellPrintf
;;;572    
;;;573        // Initialize SDcard
;;;574        //--------------------------------------------------------------------------
;;;575    
;;;576        if (!CardIsConnected(mciID)) return 0;
0005e4  0038              MOVS     r0,r7
0005e6  f7fffffe          BL       CardIsConnected
0005ea  2800              CMP      r0,#0
0005ec  d034              BEQ      |L1.1624|
;;;577    
;;;578        // Configure SDcard pins
;;;579        ConfigurePIO(mciID);
0005ee  0038              MOVS     r0,r7
0005f0  f7fffffe          BL       ConfigurePIO
;;;580        
;;;581        #if defined(MCI2_INTERFACE)
;;;582        DMAD_Initialize(BOARD_MCI_DMA_CHANNEL, DMAD_NO_DEFAULT_IT);
0005f4  2100              MOVS     r1,#0
0005f6  0008              MOVS     r0,r1
0005f8  f7fffffe          BL       DMAD_Initialize
0005fc  2600              MOVS     r6,#0                 ;576
;;;583        #endif
;;;584        // Initialize the MCI driver
;;;585        if(mciID == 0) {
0005fe  2f00              CMP      r7,#0
000600  d02c              BEQ      |L1.1628|
;;;586            IRQ_ConfigureIT(BOARD_SD_MCI_ID,  1, MCI0_IrqHandler);
;;;587            MCI_Init(mciDrv, BOARD_SD_MCI_BASE, BOARD_SD_MCI_ID, BOARD_SD_SLOT, MCI_INTERRUPT_MODE);
;;;588            IRQ_EnableIT(BOARD_SD_MCI_ID);
;;;589        } else {
;;;590            #ifdef BOARD_SD_MCI1_ID
;;;591            IRQ_ConfigureIT(BOARD_SD_MCI1_ID,  1, MCI0_IrqHandler);
000602  4a81              LDR      r2,|L1.2056|
000604  2101              MOVS     r1,#1
000606  201d              MOVS     r0,#0x1d
000608  f7fffffe          BL       IRQ_ConfigureIT
;;;592            MCI_Init(mciDrv, BOARD_SD_MCI1_BASE, BOARD_SD_MCI1_ID, BOARD_SD_SLOT, MCI_INTERRUPT_MODE);
00060c  497f              LDR      r1,|L1.2060|
00060e  4873              LDR      r0,|L1.2012|
000610  2380              MOVS     r3,#0x80
000612  221d              MOVS     r2,#0x1d
000614  9600              STR      r6,[sp,#0]
000616  f7fffffe          BL       MCI_Init
;;;593            IRQ_EnableIT(BOARD_SD_MCI1_ID);
00061a  201d              MOVS     r0,#0x1d
00061c  f7fffffe          BL       IRQ_EnableIT
                  |L1.1568|
;;;594            #else
;;;595            TRACE_ERROR("SD/MMC card initialization failed (MCI1 not supported)\n\r");
;;;596            #endif
;;;597        }
;;;598    #if MCI_BUSY_CHECK_FIX && defined(BOARD_SD_DAT0)
;;;599        MCI_SetBusyFix(mciDrv, &pinSdDAT0);
;;;600    #endif
;;;601    
;;;602        // Initialize the SD card driver
;;;603        if (SD_Init(sdDrv, (SdDriver *)mciDrv)) {
000620  496e              LDR      r1,|L1.2012|
000622  0008              MOVS     r0,r1
000624  3010              ADDS     r0,r0,#0x10
000626  f7fffffe          BL       SD_Init
00062a  2800              CMP      r0,#0
00062c  d026              BEQ      |L1.1660|
;;;604        
;;;605            TRACE_ERROR("SD/MMC card initialization failed\n\r");
00062e  201b              MOVS     r0,#0x1b
000630  f7fffffe          BL       ShellPutByte
000634  4876              LDR      r0,|L1.2064|
000636  f7fffffe          BL       ShellPrintf
00063a  201b              MOVS     r0,#0x1b
00063c  f7fffffe          BL       ShellPutByte
000640  a06b              ADR      r0,|L1.2032|
000642  f7fffffe          BL       ShellPrintf
000646  4872              LDR      r0,|L1.2064|
000648  300c              ADDS     r0,r0,#0xc
00064a  f7fffffe          BL       ShellPrintf
00064e  a06d              ADR      r0,|L1.2052|
000650  f7fffffe          BL       ShellPrintf
;;;606            return 0;
000654  2000              MOVS     r0,#0
;;;607        }
;;;608        else {
;;;609        
;;;610            TRACE_INFO("SD/MMC card initialization successful\n\r");
;;;611            TRACE_INFO("Card size: %d MB\n\r", (int)(MMC_GetTotalSizeKB(sdDrv)/1024));
;;;612        }
;;;613        MCI_SetSpeed(mciDrv, sdDrv->transSpeed, sdDrv->transSpeed, BOARD_MCK);
;;;614      
;;;615        // Initialize media fields
;;;616        //--------------------------------------------------------------------------
;;;617        media->interface = sdDrv;
;;;618        media->write = MEDSdusb_Write;
;;;619        media->read = MEDSdusb_Read;
;;;620        media->lock = 0;
;;;621        media->unlock = 0;
;;;622        media->handler = 0;
;;;623        media->flush = 0;
;;;624    
;;;625        media->blockSize = SD_BLOCK_SIZE;
;;;626        media->baseAddress = 0;
;;;627        if (SD_TOTAL_SIZE(sdDrv) == 0xFFFFFFFF)
;;;628            media->size = SD_TOTAL_BLOCK(sdDrv);
;;;629        else
;;;630            media->size = SD_TOTAL_SIZE(sdDrv)/SD_BLOCK_SIZE;
;;;631    
;;;632        media->mappedRD  = 0;
;;;633        media->mappedWR  = 0;
;;;634        media->protected = CardIsProtected(mciID);
;;;635        media->removable = 1;
;;;636    
;;;637        media->state = MED_STATE_READY;
;;;638    
;;;639        media->transfer.data = 0;
;;;640        media->transfer.address = 0;
;;;641        media->transfer.length = 0;
;;;642        media->transfer.callback = 0;
;;;643        media->transfer.argument = 0;
;;;644    
;;;645        return 1;
;;;646    }
000656  bdf8              POP      {r3-r7,pc}
                  |L1.1624|
000658  2000              MOVS     r0,#0                 ;576
00065a  bdf8              POP      {r3-r7,pc}
                  |L1.1628|
00065c  4a6a              LDR      r2,|L1.2056|
00065e  2101              MOVS     r1,#1                 ;586
000660  200b              MOVS     r0,#0xb               ;586
000662  f7fffffe          BL       IRQ_ConfigureIT
000666  496b              LDR      r1,|L1.2068|
000668  485c              LDR      r0,|L1.2012|
00066a  2380              MOVS     r3,#0x80              ;587
00066c  220b              MOVS     r2,#0xb               ;587
00066e  9600              STR      r6,[sp,#0]            ;587
000670  f7fffffe          BL       MCI_Init
000674  200b              MOVS     r0,#0xb               ;588
000676  f7fffffe          BL       IRQ_EnableIT
00067a  e7d1              B        |L1.1568|
                  |L1.1660|
00067c  201b              MOVS     r0,#0x1b              ;610
00067e  f7fffffe          BL       ShellPutByte
000682  485a              LDR      r0,|L1.2028|
000684  f7fffffe          BL       ShellPrintf
000688  201b              MOVS     r0,#0x1b              ;610
00068a  f7fffffe          BL       ShellPutByte
00068e  a058              ADR      r0,|L1.2032|
000690  f7fffffe          BL       ShellPrintf
000694  a060              ADR      r0,|L1.2072|
000696  f7fffffe          BL       ShellPrintf
00069a  a05a              ADR      r0,|L1.2052|
00069c  f7fffffe          BL       ShellPrintf
0006a0  201b              MOVS     r0,#0x1b              ;611
0006a2  f7fffffe          BL       ShellPutByte
0006a6  4851              LDR      r0,|L1.2028|
0006a8  f7fffffe          BL       ShellPrintf
0006ac  201b              MOVS     r0,#0x1b              ;611
0006ae  f7fffffe          BL       ShellPutByte
0006b2  a04f              ADR      r0,|L1.2032|
0006b4  f7fffffe          BL       ShellPrintf
0006b8  4848              LDR      r0,|L1.2012|
0006ba  3010              ADDS     r0,r0,#0x10           ;611
0006bc  f7fffffe          BL       MMC_GetTotalSizeKB
0006c0  0a81              LSRS     r1,r0,#10             ;611
0006c2  a05f              ADR      r0,|L1.2112|
0006c4  f7fffffe          BL       ShellPrintf
0006c8  a04e              ADR      r0,|L1.2052|
0006ca  f7fffffe          BL       ShellPrintf
0006ce  4d41              LDR      r5,|L1.2004|
0006d0  4b41              LDR      r3,|L1.2008|
0006d2  69a9              LDR      r1,[r5,#0x18]         ;613
0006d4  4841              LDR      r0,|L1.2012|
0006d6  000a              MOVS     r2,r1                 ;613
0006d8  f7fffffe          BL       MCI_SetSpeed
0006dc  483f              LDR      r0,|L1.2012|
0006de  3010              ADDS     r0,r0,#0x10           ;617
0006e0  63e0              STR      r0,[r4,#0x3c]         ;617
0006e2  485c              LDR      r0,|L1.2132|
0006e4  6020              STR      r0,[r4,#0]            ;618
0006e6  485c              LDR      r0,|L1.2136|
0006e8  6060              STR      r0,[r4,#4]            ;619
0006ea  60e6              STR      r6,[r4,#0xc]          ;620
0006ec  6126              STR      r6,[r4,#0x10]         ;621
0006ee  61a6              STR      r6,[r4,#0x18]         ;622
0006f0  6166              STR      r6,[r4,#0x14]         ;623
0006f2  483d              LDR      r0,|L1.2024|
0006f4  61e0              STR      r0,[r4,#0x1c]         ;625
0006f6  6226              STR      r6,[r4,#0x20]         ;626
0006f8  68e8              LDR      r0,[r5,#0xc]          ;627
0006fa  1c41              ADDS     r1,r0,#1              ;627
0006fc  d01d              BEQ      |L1.1850|
0006fe  0a40              LSRS     r0,r0,#9              ;630
000700  6260              STR      r0,[r4,#0x24]         ;630
                  |L1.1794|
000702  0025              MOVS     r5,r4                 ;632
000704  3540              ADDS     r5,r5,#0x40           ;632
000706  7828              LDRB     r0,[r5,#0]            ;632
000708  21ef              MOVS     r1,#0xef              ;632
00070a  4008              ANDS     r0,r0,r1              ;632
00070c  21df              MOVS     r1,#0xdf              ;633
00070e  4008              ANDS     r0,r0,r1              ;633
000710  7028              STRB     r0,[r5,#0]            ;633
000712  0038              MOVS     r0,r7                 ;634
000714  f7fffffe          BL       CardIsProtected
000718  07c0              LSLS     r0,r0,#31             ;634
00071a  0e41              LSRS     r1,r0,#25             ;634
00071c  7828              LDRB     r0,[r5,#0]            ;634
00071e  22bf              MOVS     r2,#0xbf              ;634
000720  4010              ANDS     r0,r0,r2              ;634
000722  4308              ORRS     r0,r0,r1              ;634
000724  2180              MOVS     r1,#0x80              ;635
000726  4308              ORRS     r0,r0,r1              ;635
000728  7028              STRB     r0,[r5,#0]            ;635
00072a  706e              STRB     r6,[r5,#1]            ;637
00072c  62a6              STR      r6,[r4,#0x28]         ;639
00072e  62e6              STR      r6,[r4,#0x2c]         ;640
000730  6326              STR      r6,[r4,#0x30]         ;641
000732  6366              STR      r6,[r4,#0x34]         ;642
000734  63a6              STR      r6,[r4,#0x38]         ;643
000736  2001              MOVS     r0,#1                 ;645
000738  bdf8              POP      {r3-r7,pc}
                  |L1.1850|
00073a  6928              LDR      r0,[r5,#0x10]         ;628
00073c  6260              STR      r0,[r4,#0x24]         ;628
00073e  e7e0              B        |L1.1794|
;;;647    
                          ENDP

                  MEDSdcard_EraseAll PROC
;;;651    //------------------------------------------------------------------------------
;;;652    void MEDSdcard_EraseAll(Media *media)
000740  b5f0              PUSH     {r4-r7,lr}
;;;653    {    
000742  b0ff              SUB      sp,sp,#0x1fc
000744  b082              SUB      sp,sp,#8
000746  0006              MOVS     r6,r0
;;;654        unsigned char buffer[SD_BLOCK_SIZE];
;;;655        unsigned int block;  
;;;656        unsigned int multiBlock = 1; // change buffer size for multiblocks
000748  2501              MOVS     r5,#1
;;;657        unsigned char error;
;;;658        
;;;659        TRACE_INFO("MEDSdcard Erase All ...\n\r");
00074a  201b              MOVS     r0,#0x1b
00074c  f7fffffe          BL       ShellPutByte
000750  4826              LDR      r0,|L1.2028|
000752  f7fffffe          BL       ShellPrintf
000756  201b              MOVS     r0,#0x1b
000758  f7fffffe          BL       ShellPutByte
00075c  a024              ADR      r0,|L1.2032|
00075e  f7fffffe          BL       ShellPrintf
000762  a03e              ADR      r0,|L1.2140|
000764  f7fffffe          BL       ShellPrintf
000768  a026              ADR      r0,|L1.2052|
00076a  f7fffffe          BL       ShellPrintf
;;;660    
;;;661        // Clear the block buffer
;;;662        memset(buffer, 0, media->blockSize * multiBlock);
00076e  69f1              LDR      r1,[r6,#0x1c]
000770  4668              MOV      r0,sp
000772  f7fffffe          BL       __aeabi_memclr4
;;;663        
;;;664        for (block=0;
000776  2400              MOVS     r4,#0
;;;665             block < (SD_TOTAL_BLOCK((SdCard*)media->interface)-multiBlock);
000778  2709              MOVS     r7,#9
00077a  01bf              LSLS     r7,r7,#6
;;;666             block += multiBlock) {
;;;667    
;;;668            error = SD_WriteBlock((SdCard*)media->interface, block, multiBlock, buffer);
00077c  0428              LSLS     r0,r5,#16
00077e  0c00              LSRS     r0,r0,#16
000780  9080              STR      r0,[sp,#0x200]        ;666
000782  e005              B        |L1.1936|
                  |L1.1924|
000784  9a80              LDR      r2,[sp,#0x200]
000786  0021              MOVS     r1,r4
000788  466b              MOV      r3,sp
00078a  f7fffffe          BL       SD_WriteBlock
00078e  1964              ADDS     r4,r4,r5              ;666
                  |L1.1936|
000790  6bf0              LDR      r0,[r6,#0x3c]         ;665
000792  19c1              ADDS     r1,r0,r7              ;665
000794  6909              LDR      r1,[r1,#0x10]         ;665
000796  1b49              SUBS     r1,r1,r5              ;665
000798  42a1              CMP      r1,r4                 ;665
00079a  d8f3              BHI      |L1.1924|
;;;669            ASSERT(!error, "\n\r-F- Failed to write block (%d) #%u\n\r", error, block);  
;;;670        }
;;;671    }
00079c  b07f              ADD      sp,sp,#0x1fc
00079e  b002              ADD      sp,sp,#8
0007a0  bdf0              POP      {r4-r7,pc}
;;;672    
                          ENDP

                  MEDSdcard_EraseBlock PROC
;;;677    //------------------------------------------------------------------------------
;;;678    void MEDSdcard_EraseBlock(Media *media, unsigned int block)
0007a2  b530              PUSH     {r4,r5,lr}
;;;679    {    
0007a4  b0ff              SUB      sp,sp,#0x1fc
0007a6  b082              SUB      sp,sp,#8
0007a8  0004              MOVS     r4,r0
0007aa  000d              MOVS     r5,r1
;;;680        unsigned char buffer[SD_BLOCK_SIZE];
;;;681        unsigned char error;
;;;682        
;;;683        // Clear the block buffer
;;;684        memset(buffer, 0, media->blockSize);
0007ac  69e1              LDR      r1,[r4,#0x1c]
0007ae  a801              ADD      r0,sp,#4
0007b0  f7fffffe          BL       __aeabi_memclr4
;;;685        
;;;686        error = SD_WriteBlock((SdCard*)media->interface, block, 1, buffer);
0007b4  6be0              LDR      r0,[r4,#0x3c]
0007b6  2201              MOVS     r2,#1
0007b8  0029              MOVS     r1,r5
0007ba  ab01              ADD      r3,sp,#4
0007bc  f7fffffe          BL       SD_WriteBlock
;;;687        ASSERT(!error, "\n\r-F- Failed to write block (%d) #%u\n\r", error, block);  
;;;688    }
0007c0  b07f              ADD      sp,sp,#0x1fc
0007c2  b002              ADD      sp,sp,#8
0007c4  bd30              POP      {r4,r5,pc}
;;;689    
                          ENDP

                  MEDSdcard_GetDriver PROC
;;;692    //------------------------------------------------------------------------------
;;;693    SdCard* MEDSdcard_GetDriver(unsigned int slot)
0007c6  2800              CMP      r0,#0
;;;694    {
;;;695        if (slot >= NUM_SD_SLOTS) return 0;
0007c8  d001              BEQ      |L1.1998|
0007ca  2000              MOVS     r0,#0
;;;696        return &sdDrv[slot];
;;;697    }
0007cc  4770              BX       lr
                  |L1.1998|
0007ce  4803              LDR      r0,|L1.2012|
0007d0  3010              ADDS     r0,r0,#0x10           ;696
0007d2  4770              BX       lr
                          ENDP

                  |L1.2004|
                          DCD      ||.bss||+0x250
                  |L1.2008|
                          DCD      0x07f280d0
                  |L1.2012|
                          DCD      ||.bss||
                  |L1.2016|
                          DCD      MEDSdcard_Write
                  |L1.2020|
                          DCD      MEDSdcard_Read
                  |L1.2024|
                          DCD      0x00000200
                  |L1.2028|
                          DCD      ||.text||+0x3ec
                  |L1.2032|
0007f0  5b6d00            DCB      "[m",0
0007f3  00                DCB      0
                  |L1.2036|
0007f4  4d454453          DCB      "MEDSdusb init\n\r",0
0007f8  64757362
0007fc  20696e69
000800  740a0d00
                  |L1.2052|
000804  0a0d00            DCB      "\n\r",0
000807  00                DCB      0
                  |L1.2056|
                          DCD      MCI0_IrqHandler
                  |L1.2060|
                          DCD      0xfffd0000
                  |L1.2064|
                          DCD      ||.text||+0x514
                  |L1.2068|
                          DCD      0xfff80000
                  |L1.2072|
000818  53442f4d          DCB      "SD/MMC card initialization successful\n\r",0
00081c  4d432063
000820  61726420
000824  696e6974
000828  69616c69
00082c  7a617469
000830  6f6e2073
000834  75636365
000838  73736675
00083c  6c0a0d00
                  |L1.2112|
000840  43617264          DCB      "Card size: %d MB\n\r",0
000844  2073697a
000848  653a2025
00084c  64204d42
000850  0a0d00  
000853  00                DCB      0
                  |L1.2132|
                          DCD      MEDSdusb_Write
                  |L1.2136|
                          DCD      MEDSdusb_Read
                  |L1.2140|
00085c  4d454453          DCB      "MEDSdcard Erase All ...\n\r",0
000860  64636172
000864  64204572
000868  61736520
00086c  416c6c20
000870  2e2e2e0a
000874  0d00    
000876  00                DCB      0
000877  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mciDrv
                          %        16
                  sdDrv
                          %        612
