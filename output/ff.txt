; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave --gnu -o.\output\ff.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\ff.d --cpu=ARM926EJ-S --apcs=interwork -O1 -I.\atmel -I.\ -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Atmel\SAM9M10 -Dat91sam9m10 -Dddram -DNOFPUT -DTRACE_LEVEL=4 --omf_browse=.\output\ff.crf atmel\ff.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mem_cpy PROC
;;;175    static
;;;176    void mem_cpy (void* dst, const void* src, int cnt) {
000000  e003              B        |L1.10|
                  |L1.2|
;;;177    	char *d = (char*)dst;
;;;178    	const char *s = (const char *)src;
;;;179    	while (cnt--) *d++ = *s++;
000002  780b              LDRB     r3,[r1,#0]
000004  1c49              ADDS     r1,r1,#1
000006  7003              STRB     r3,[r0,#0]
000008  1c40              ADDS     r0,r0,#1
                  |L1.10|
00000a  1e52              SUBS     r2,r2,#1
00000c  d2f9              BCS      |L1.2|
;;;180    }
00000e  4770              BX       lr
;;;181    
                          ENDP

                  mem_set PROC
;;;183    static
;;;184    void mem_set (void* dst, int val, int cnt) {
000010  0609              LSLS     r1,r1,#24
;;;185    	char *d = (char*)dst;
;;;186    	while (cnt--) *d++ = (char)val;
000012  0e09              LSRS     r1,r1,#24
000014  e001              B        |L1.26|
                  |L1.22|
000016  7001              STRB     r1,[r0,#0]
000018  1c40              ADDS     r0,r0,#1
                  |L1.26|
00001a  1e52              SUBS     r2,r2,#1
00001c  d2fb              BCS      |L1.22|
;;;187    }
00001e  4770              BX       lr
;;;188    
                          ENDP

                  mem_cmp PROC
;;;190    static
;;;191    int mem_cmp (const void* dst, const void* src, int cnt) {
000020  b510              PUSH     {r4,lr}
;;;192    	const char *d = (const char *)dst, *s = (const char *)src;
;;;193    	int r = 0;
000022  2300              MOVS     r3,#0
                  |L1.36|
;;;194    	while (cnt-- && (r = *d++ - *s++) == 0) ;
000024  1e52              SUBS     r2,r2,#1
000026  d305              BCC      |L1.52|
000028  7803              LDRB     r3,[r0,#0]
00002a  780c              LDRB     r4,[r1,#0]
00002c  1c40              ADDS     r0,r0,#1
00002e  1c49              ADDS     r1,r1,#1
000030  1b1b              SUBS     r3,r3,r4
000032  d0f7              BEQ      |L1.36|
                  |L1.52|
;;;195    	return r;
000034  0018              MOVS     r0,r3
;;;196    }
000036  bd10              POP      {r4,pc}
;;;197    
                          ENDP

                  chk_chr PROC
;;;199    static
;;;200    int chk_chr (const char* str, int chr) {
000038  e000              B        |L1.60|
                  |L1.58|
;;;201    	while (*str && *str != chr) str++;
00003a  1c40              ADDS     r0,r0,#1
                  |L1.60|
00003c  7802              LDRB     r2,[r0,#0]
00003e  2a00              CMP      r2,#0
000040  d001              BEQ      |L1.70|
000042  428a              CMP      r2,r1
000044  d1f9              BNE      |L1.58|
                  |L1.70|
;;;202    	return *str;
000046  7800              LDRB     r0,[r0,#0]
;;;203    }
000048  4770              BX       lr
;;;204    
                          ENDP

                  move_window PROC
;;;242    static
;;;243    FRESULT move_window (
00004a  b5f8              PUSH     {r3-r7,lr}
;;;244    	FATFS *fs,		/* File system object */
;;;245    	DWORD sector	/* Sector number to make apperance in the fs->win[] */
;;;246    )					/* Move to zero only writes back dirty window */
;;;247    {
00004c  0004              MOVS     r4,r0
00004e  000f              MOVS     r7,r1
;;;248    	DWORD wsect;
;;;249    
;;;250    
;;;251    	wsect = fs->winsect;
000050  6ae5              LDR      r5,[r4,#0x2c]
;;;252    	if (wsect != sector) {	/* Changed current window */
000052  42bd              CMP      r5,r7
000054  d032              BEQ      |L1.188|
;;;253    #if !_FS_READONLY
;;;254    		if (fs->wflag) {	/* Write back dirty window if needed */
000056  7921              LDRB     r1,[r4,#4]
;;;255    			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
000058  0020              MOVS     r0,r4
00005a  3030              ADDS     r0,r0,#0x30
00005c  2900              CMP      r1,#0                 ;254
00005e  9000              STR      r0,[sp,#0]            ;254
000060  d01f              BEQ      |L1.162|
000062  7860              LDRB     r0,[r4,#1]
000064  9900              LDR      r1,[sp,#0]
000066  2301              MOVS     r3,#1
000068  002a              MOVS     r2,r5
00006a  f7fffffe          BL       disk_write
00006e  2800              CMP      r0,#0
000070  d001              BEQ      |L1.118|
;;;256    				return FR_DISK_ERR;
000072  2001              MOVS     r0,#1
;;;257    			fs->wflag = 0;
;;;258    			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
;;;259    				BYTE nf;
;;;260    				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
;;;261    					wsect += fs->sects_fat;
;;;262    					disk_write(fs->drive, fs->win, wsect, 1);
;;;263    				}
;;;264    			}
;;;265    		}
;;;266    #endif
;;;267    		if (sector) {
;;;268    			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
;;;269    				return FR_DISK_ERR;
;;;270    			fs->winsect = sector;
;;;271    		}
;;;272    	}
;;;273    
;;;274    	return FR_OK;
;;;275    }
000074  bdf8              POP      {r3-r7,pc}
                  |L1.118|
000076  2000              MOVS     r0,#0                 ;257
000078  7120              STRB     r0,[r4,#4]            ;257
00007a  69a1              LDR      r1,[r4,#0x18]         ;258
00007c  6a20              LDR      r0,[r4,#0x20]         ;258
00007e  1840              ADDS     r0,r0,r1              ;258
000080  42a8              CMP      r0,r5                 ;258
000082  d90e              BLS      |L1.162|
000084  78e6              LDRB     r6,[r4,#3]            ;260
000086  e00a              B        |L1.158|
                  |L1.136|
000088  69a0              LDR      r0,[r4,#0x18]         ;261
00008a  1945              ADDS     r5,r0,r5              ;261
00008c  7860              LDRB     r0,[r4,#1]            ;262
00008e  9900              LDR      r1,[sp,#0]            ;262
000090  2301              MOVS     r3,#1                 ;262
000092  002a              MOVS     r2,r5                 ;262
000094  f7fffffe          BL       disk_write
000098  1e76              SUBS     r6,r6,#1              ;260
00009a  0636              LSLS     r6,r6,#24             ;260
00009c  0e36              LSRS     r6,r6,#24             ;260
                  |L1.158|
00009e  2e01              CMP      r6,#1                 ;260
0000a0  d8f2              BHI      |L1.136|
                  |L1.162|
0000a2  2f00              CMP      r7,#0                 ;267
0000a4  d00a              BEQ      |L1.188|
0000a6  7860              LDRB     r0,[r4,#1]            ;268
0000a8  9900              LDR      r1,[sp,#0]            ;268
0000aa  2301              MOVS     r3,#1                 ;268
0000ac  003a              MOVS     r2,r7                 ;268
0000ae  f7fffffe          BL       disk_read
0000b2  2800              CMP      r0,#0                 ;268
0000b4  d001              BEQ      |L1.186|
0000b6  2001              MOVS     r0,#1                 ;269
0000b8  bdf8              POP      {r3-r7,pc}
                  |L1.186|
0000ba  62e7              STR      r7,[r4,#0x2c]         ;270
                  |L1.188|
0000bc  2000              MOVS     r0,#0                 ;274
0000be  bdf8              POP      {r3-r7,pc}
;;;276    
                          ENDP

                  sync PROC
;;;284    static
;;;285    FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
0000c0  b5f8              PUSH     {r3-r7,lr}
;;;286    	FATFS *fs	/* File system object */
;;;287    )
;;;288    {
0000c2  0004              MOVS     r4,r0
;;;289    	FRESULT res;
;;;290    
;;;291    
;;;292    	res = move_window(fs, 0);
0000c4  2100              MOVS     r1,#0
0000c6  0020              MOVS     r0,r4
0000c8  f7fffffe          BL       move_window
0000cc  0005              MOVS     r5,r0
;;;293    	if (res == FR_OK) {
0000ce  2d00              CMP      r5,#0
0000d0  d145              BNE      |L1.350|
;;;294    		/* Update FSInfo sector if needed */
;;;295    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
0000d2  7820              LDRB     r0,[r4,#0]
0000d4  2803              CMP      r0,#3
0000d6  d13a              BNE      |L1.334|
0000d8  7960              LDRB     r0,[r4,#5]
0000da  2800              CMP      r0,#0
0000dc  d037              BEQ      |L1.334|
;;;296    			fs->winsect = 0;
0000de  2600              MOVS     r6,#0
0000e0  62e6              STR      r6,[r4,#0x2c]
;;;297    			mem_set(fs->win, 0, 512);
0000e2  0020              MOVS     r0,r4
0000e4  2201              MOVS     r2,#1
0000e6  3030              ADDS     r0,r0,#0x30
0000e8  0252              LSLS     r2,r2,#9
0000ea  2100              MOVS     r1,#0
0000ec  0007              MOVS     r7,r0
0000ee  f7fffffe          BL       mem_set
;;;298    			ST_WORD(fs->win+BS_55AA, 0xAA55);
0000f2  2011              MOVS     r0,#0x11
0000f4  2155              MOVS     r1,#0x55
0000f6  0140              LSLS     r0,r0,#5
0000f8  1820              ADDS     r0,r4,r0
0000fa  7381              STRB     r1,[r0,#0xe]
0000fc  21aa              MOVS     r1,#0xaa
0000fe  73c1              STRB     r1,[r0,#0xf]
;;;299    			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
000100  2152              MOVS     r1,#0x52
000102  0020              MOVS     r0,r4
000104  3020              ADDS     r0,r0,#0x20
000106  7401              STRB     r1,[r0,#0x10]
000108  7441              STRB     r1,[r0,#0x11]
00010a  2161              MOVS     r1,#0x61
00010c  7481              STRB     r1,[r0,#0x12]
00010e  2241              MOVS     r2,#0x41
000110  74c2              STRB     r2,[r0,#0x13]
;;;300    			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
000112  2372              MOVS     r3,#0x72
000114  30ff              ADDS     r0,r0,#0xff
000116  30e1              ADDS     r0,r0,#0xe1
000118  7503              STRB     r3,[r0,#0x14]
00011a  7543              STRB     r3,[r0,#0x15]
00011c  7582              STRB     r2,[r0,#0x16]
00011e  75c1              STRB     r1,[r0,#0x17]
;;;301    			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
000120  6921              LDR      r1,[r4,#0x10]
000122  7601              STRB     r1,[r0,#0x18]
000124  0a0a              LSRS     r2,r1,#8
000126  7642              STRB     r2,[r0,#0x19]
000128  0c0a              LSRS     r2,r1,#16
00012a  7682              STRB     r2,[r0,#0x1a]
00012c  0e09              LSRS     r1,r1,#24
00012e  76c1              STRB     r1,[r0,#0x1b]
;;;302    			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
000130  68e1              LDR      r1,[r4,#0xc]
000132  7701              STRB     r1,[r0,#0x1c]
000134  0a0a              LSRS     r2,r1,#8
000136  7742              STRB     r2,[r0,#0x1d]
000138  0c0a              LSRS     r2,r1,#16
00013a  7782              STRB     r2,[r0,#0x1e]
00013c  0e09              LSRS     r1,r1,#24
00013e  77c1              STRB     r1,[r0,#0x1f]
;;;303    			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
000140  7860              LDRB     r0,[r4,#1]
000142  6962              LDR      r2,[r4,#0x14]
000144  2301              MOVS     r3,#1
000146  0039              MOVS     r1,r7
000148  f7fffffe          BL       disk_write
;;;304    			fs->fsi_flag = 0;
00014c  7166              STRB     r6,[r4,#5]
                  |L1.334|
;;;305    		}
;;;306    		/* Make sure that no pending write process in the physical drive */
;;;307    		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
00014e  2200              MOVS     r2,#0
000150  7860              LDRB     r0,[r4,#1]
000152  0011              MOVS     r1,r2
000154  f7fffffe          BL       disk_ioctl
000158  2800              CMP      r0,#0
00015a  d000              BEQ      |L1.350|
;;;308    			res = FR_DISK_ERR;
00015c  2501              MOVS     r5,#1
                  |L1.350|
;;;309    	}
;;;310    
;;;311    	return res;
00015e  0028              MOVS     r0,r5
;;;312    }
000160  bdf8              POP      {r3-r7,pc}
;;;313    #endif
                          ENDP

                  get_fat PROC
;;;322    
;;;323    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
000162  b5f8              PUSH     {r3-r7,lr}
;;;324    	FATFS *fs,	/* File system object */
;;;325    	DWORD clst	/* Cluster# to get the link information */
;;;326    )
;;;327    {
000164  0005              MOVS     r5,r0
000166  000c              MOVS     r4,r1
;;;328    	UINT wc, bc;
;;;329    	DWORD fsect;
;;;330    
;;;331    
;;;332    	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
000168  2c02              CMP      r4,#2
00016a  d302              BCC      |L1.370|
00016c  69e8              LDR      r0,[r5,#0x1c]
00016e  42a0              CMP      r0,r4
000170  d801              BHI      |L1.374|
                  |L1.370|
;;;333    		return 1;
000172  2001              MOVS     r0,#1
;;;334    
;;;335    	fsect = fs->fatbase;
;;;336    	switch (fs->fs_type) {
;;;337    	case FS_FAT12 :
;;;338    		bc = clst; bc += bc / 2;
;;;339    		if (move_window(fs, fsect + (bc / SS(fs)))) break;
;;;340    		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
;;;341    		if (move_window(fs, fsect + (bc / SS(fs)))) break;
;;;342    		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
;;;343    		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
;;;344    
;;;345    	case FS_FAT16 :
;;;346    		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
;;;347    		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
;;;348    
;;;349    	case FS_FAT32 :
;;;350    		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
;;;351    		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
;;;352    	}
;;;353    
;;;354    	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
;;;355    }
000174  bdf8              POP      {r3-r7,pc}
                  |L1.374|
000176  6a2e              LDR      r6,[r5,#0x20]         ;335
000178  7828              LDRB     r0,[r5,#0]            ;336
00017a  2801              CMP      r0,#1                 ;336
00017c  d004              BEQ      |L1.392|
00017e  2802              CMP      r0,#2                 ;336
000180  d028              BEQ      |L1.468|
000182  2803              CMP      r0,#3                 ;336
000184  d13d              BNE      |L1.514|
000186  e035              B        |L1.500|
                  |L1.392|
000188  0860              LSRS     r0,r4,#1              ;338
00018a  1907              ADDS     r7,r0,r4              ;338
00018c  0a78              LSRS     r0,r7,#9              ;339
00018e  1981              ADDS     r1,r0,r6              ;339
000190  0028              MOVS     r0,r5                 ;339
000192  f7fffffe          BL       move_window
000196  2800              CMP      r0,#0                 ;339
000198  d133              BNE      |L1.514|
00019a  05f8              LSLS     r0,r7,#23             ;340
00019c  0dc0              LSRS     r0,r0,#23             ;340
00019e  1940              ADDS     r0,r0,r5              ;340
0001a0  3020              ADDS     r0,r0,#0x20           ;340
0001a2  7c00              LDRB     r0,[r0,#0x10]         ;340
0001a4  9000              STR      r0,[sp,#0]            ;340
0001a6  1c7f              ADDS     r7,r7,#1              ;340
0001a8  0a78              LSRS     r0,r7,#9              ;341
0001aa  1981              ADDS     r1,r0,r6              ;341
0001ac  0028              MOVS     r0,r5                 ;341
0001ae  f7fffffe          BL       move_window
0001b2  2800              CMP      r0,#0                 ;341
0001b4  d125              BNE      |L1.514|
0001b6  05f8              LSLS     r0,r7,#23             ;342
0001b8  0dc0              LSRS     r0,r0,#23             ;342
0001ba  1940              ADDS     r0,r0,r5              ;342
0001bc  3020              ADDS     r0,r0,#0x20           ;342
0001be  7c00              LDRB     r0,[r0,#0x10]         ;342
0001c0  9900              LDR      r1,[sp,#0]            ;342
0001c2  0200              LSLS     r0,r0,#8              ;342
0001c4  4308              ORRS     r0,r0,r1              ;342
0001c6  07e1              LSLS     r1,r4,#31             ;343
0001c8  d001              BEQ      |L1.462|
0001ca  0900              LSRS     r0,r0,#4              ;343
0001cc  bdf8              POP      {r3-r7,pc}
                  |L1.462|
0001ce  0500              LSLS     r0,r0,#20             ;343
0001d0  0d00              LSRS     r0,r0,#20             ;343
0001d2  bdf8              POP      {r3-r7,pc}
                  |L1.468|
0001d4  0a20              LSRS     r0,r4,#8              ;346
0001d6  1981              ADDS     r1,r0,r6              ;346
0001d8  0028              MOVS     r0,r5                 ;346
0001da  f7fffffe          BL       move_window
0001de  2800              CMP      r0,#0                 ;346
0001e0  d10f              BNE      |L1.514|
0001e2  0620              LSLS     r0,r4,#24             ;347
0001e4  0dc0              LSRS     r0,r0,#23             ;347
0001e6  1941              ADDS     r1,r0,r5              ;347
0001e8  3120              ADDS     r1,r1,#0x20           ;347
0001ea  7c48              LDRB     r0,[r1,#0x11]         ;347
0001ec  7c09              LDRB     r1,[r1,#0x10]         ;347
0001ee  0200              LSLS     r0,r0,#8              ;347
0001f0  4308              ORRS     r0,r0,r1              ;347
0001f2  bdf8              POP      {r3-r7,pc}
                  |L1.500|
0001f4  09e0              LSRS     r0,r4,#7              ;350
0001f6  1981              ADDS     r1,r0,r6              ;350
0001f8  0028              MOVS     r0,r5                 ;350
0001fa  f7fffffe          BL       move_window
0001fe  2800              CMP      r0,#0                 ;350
000200  d002              BEQ      |L1.520|
                  |L1.514|
000202  2000              MOVS     r0,#0                 ;354
000204  43c0              MVNS     r0,r0                 ;354
000206  bdf8              POP      {r3-r7,pc}
                  |L1.520|
000208  0660              LSLS     r0,r4,#25             ;351
00020a  0dc0              LSRS     r0,r0,#23             ;351
00020c  1940              ADDS     r0,r0,r5              ;351
00020e  3020              ADDS     r0,r0,#0x20           ;351
000210  7cc2              LDRB     r2,[r0,#0x13]         ;351
000212  7c01              LDRB     r1,[r0,#0x10]         ;351
000214  0612              LSLS     r2,r2,#24             ;351
000216  4311              ORRS     r1,r1,r2              ;351
000218  7c82              LDRB     r2,[r0,#0x12]         ;351
00021a  7c40              LDRB     r0,[r0,#0x11]         ;351
00021c  0412              LSLS     r2,r2,#16             ;351
00021e  0200              LSLS     r0,r0,#8              ;351
000220  4302              ORRS     r2,r2,r0              ;351
000222  4311              ORRS     r1,r1,r2              ;351
000224  0108              LSLS     r0,r1,#4              ;351
000226  0900              LSRS     r0,r0,#4              ;351
000228  bdf8              POP      {r3-r7,pc}
;;;356    
                          ENDP

                  put_fat PROC
;;;364    
;;;365    FRESULT put_fat (
00022a  b5fe              PUSH     {r1-r7,lr}
;;;366    	FATFS *fs,	/* File system object */
;;;367    	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
;;;368    	DWORD val	/* New value to mark the cluster */
;;;369    )
;;;370    {
00022c  0005              MOVS     r5,r0
00022e  000c              MOVS     r4,r1
000230  0016              MOVS     r6,r2
;;;371    	UINT bc;
;;;372    	BYTE *p;
;;;373    	DWORD fsect;
;;;374    	FRESULT res;
;;;375    
;;;376    
;;;377    	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
000232  2c02              CMP      r4,#2
000234  d302              BCC      |L1.572|
000236  69e8              LDR      r0,[r5,#0x1c]
000238  42a0              CMP      r0,r4
00023a  d801              BHI      |L1.576|
                  |L1.572|
;;;378    		res = FR_INT_ERR;
00023c  2002              MOVS     r0,#2
;;;379    
;;;380    	} else {
;;;381    		fsect = fs->fatbase;
;;;382    		switch (fs->fs_type) {
;;;383    		case FS_FAT12 :
;;;384    			bc = clst; bc += bc / 2;
;;;385    			res = move_window(fs, fsect + (bc / SS(fs)));
;;;386    			if (res != FR_OK) break;
;;;387    			p = &fs->win[bc & (SS(fs) - 1)];
;;;388    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
;;;389    			bc++;
;;;390    			fs->wflag = 1;
;;;391    			res = move_window(fs, fsect + (bc / SS(fs)));
;;;392    			if (res != FR_OK) break;
;;;393    			p = &fs->win[bc & (SS(fs) - 1)];
;;;394    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
;;;395    			break;
;;;396    
;;;397    		case FS_FAT16 :
;;;398    			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
;;;399    			if (res != FR_OK) break;
;;;400    			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
;;;401    			break;
;;;402    
;;;403    		case FS_FAT32 :
;;;404    			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
;;;405    			if (res != FR_OK) break;
;;;406    			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
;;;407    			break;
;;;408    
;;;409    		default :
;;;410    			res = FR_INT_ERR;
;;;411    		}
;;;412    		fs->wflag = 1;
;;;413    	}
;;;414    
;;;415    	return res;
;;;416    }
00023e  bdfe              POP      {r1-r7,pc}
                  |L1.576|
000240  6a2f              LDR      r7,[r5,#0x20]         ;381
000242  7828              LDRB     r0,[r5,#0]            ;382
000244  2801              CMP      r0,#1                 ;382
000246  d00d              BEQ      |L1.612|
000248  0631              LSLS     r1,r6,#24             ;400
00024a  0e09              LSRS     r1,r1,#24             ;400
00024c  9102              STR      r1,[sp,#8]            ;400
00024e  0431              LSLS     r1,r6,#16             ;400
000250  0e09              LSRS     r1,r1,#24             ;400
000252  2802              CMP      r0,#2                 ;382
000254  9101              STR      r1,[sp,#4]            ;382
000256  d03e              BEQ      |L1.726|
000258  2803              CMP      r0,#3                 ;382
00025a  d04c              BEQ      |L1.758|
00025c  2002              MOVS     r0,#2                 ;410
                  |L1.606|
00025e  2101              MOVS     r1,#1                 ;412
000260  7129              STRB     r1,[r5,#4]            ;412
000262  bdfe              POP      {r1-r7,pc}
                  |L1.612|
000264  0860              LSRS     r0,r4,#1              ;384
000266  1900              ADDS     r0,r0,r4              ;384
000268  9000              STR      r0,[sp,#0]            ;384
00026a  9800              LDR      r0,[sp,#0]            ;385
00026c  0a40              LSRS     r0,r0,#9              ;385
00026e  19c1              ADDS     r1,r0,r7              ;385
000270  0028              MOVS     r0,r5                 ;385
000272  f7fffffe          BL       move_window
000276  2800              CMP      r0,#0                 ;386
000278  d1f1              BNE      |L1.606|
00027a  9800              LDR      r0,[sp,#0]            ;387
00027c  05c0              LSLS     r0,r0,#23             ;387
00027e  0dc0              LSRS     r0,r0,#23             ;387
000280  1940              ADDS     r0,r0,r5              ;387
000282  3030              ADDS     r0,r0,#0x30           ;387
000284  07e1              LSLS     r1,r4,#31             ;388
000286  d005              BEQ      |L1.660|
000288  7801              LDRB     r1,[r0,#0]            ;388
00028a  0709              LSLS     r1,r1,#28             ;388
00028c  0f09              LSRS     r1,r1,#28             ;388
00028e  0132              LSLS     r2,r6,#4              ;388
000290  4311              ORRS     r1,r1,r2              ;388
000292  e000              B        |L1.662|
                  |L1.660|
000294  0031              MOVS     r1,r6                 ;388
                  |L1.662|
000296  7001              STRB     r1,[r0,#0]            ;388
000298  9800              LDR      r0,[sp,#0]            ;389
00029a  1c40              ADDS     r0,r0,#1              ;389
00029c  9000              STR      r0,[sp,#0]            ;389
00029e  2001              MOVS     r0,#1                 ;390
0002a0  7128              STRB     r0,[r5,#4]            ;390
0002a2  9800              LDR      r0,[sp,#0]            ;391
0002a4  0a40              LSRS     r0,r0,#9              ;391
0002a6  19c1              ADDS     r1,r0,r7              ;391
0002a8  0028              MOVS     r0,r5                 ;391
0002aa  f7fffffe          BL       move_window
0002ae  2800              CMP      r0,#0                 ;392
0002b0  d1d5              BNE      |L1.606|
0002b2  9900              LDR      r1,[sp,#0]            ;393
0002b4  05c9              LSLS     r1,r1,#23             ;393
0002b6  0dc9              LSRS     r1,r1,#23             ;393
0002b8  1949              ADDS     r1,r1,r5              ;393
0002ba  3130              ADDS     r1,r1,#0x30           ;393
0002bc  07e2              LSLS     r2,r4,#31             ;394
0002be  d002              BEQ      |L1.710|
0002c0  0532              LSLS     r2,r6,#20             ;394
0002c2  0e12              LSRS     r2,r2,#24             ;394
0002c4  e005              B        |L1.722|
                  |L1.710|
0002c6  780a              LDRB     r2,[r1,#0]            ;394
0002c8  0533              LSLS     r3,r6,#20             ;394
0002ca  0912              LSRS     r2,r2,#4              ;394
0002cc  0112              LSLS     r2,r2,#4              ;394
0002ce  0f1b              LSRS     r3,r3,#28             ;394
0002d0  431a              ORRS     r2,r2,r3              ;394
                  |L1.722|
0002d2  700a              STRB     r2,[r1,#0]            ;394
0002d4  e7c3              B        |L1.606|
                  |L1.726|
0002d6  0a20              LSRS     r0,r4,#8              ;398
0002d8  19c1              ADDS     r1,r0,r7              ;398
0002da  0028              MOVS     r0,r5                 ;398
0002dc  f7fffffe          BL       move_window
0002e0  2800              CMP      r0,#0                 ;399
0002e2  d1bc              BNE      |L1.606|
0002e4  0621              LSLS     r1,r4,#24             ;400
0002e6  0dc9              LSRS     r1,r1,#23             ;400
0002e8  9a02              LDR      r2,[sp,#8]            ;400
0002ea  1949              ADDS     r1,r1,r5              ;400
0002ec  3120              ADDS     r1,r1,#0x20           ;400
0002ee  740a              STRB     r2,[r1,#0x10]         ;400
0002f0  9a01              LDR      r2,[sp,#4]            ;400
0002f2  744a              STRB     r2,[r1,#0x11]         ;400
0002f4  e7b3              B        |L1.606|
                  |L1.758|
0002f6  09e0              LSRS     r0,r4,#7              ;404
0002f8  19c1              ADDS     r1,r0,r7              ;404
0002fa  0028              MOVS     r0,r5                 ;404
0002fc  f7fffffe          BL       move_window
000300  2800              CMP      r0,#0                 ;405
000302  d1ac              BNE      |L1.606|
000304  0661              LSLS     r1,r4,#25             ;406
000306  0dc9              LSRS     r1,r1,#23             ;406
000308  9a02              LDR      r2,[sp,#8]            ;406
00030a  1949              ADDS     r1,r1,r5              ;406
00030c  3120              ADDS     r1,r1,#0x20           ;406
00030e  740a              STRB     r2,[r1,#0x10]         ;406
000310  9a01              LDR      r2,[sp,#4]            ;406
000312  744a              STRB     r2,[r1,#0x11]         ;406
000314  0c32              LSRS     r2,r6,#16             ;406
000316  748a              STRB     r2,[r1,#0x12]         ;406
000318  0e32              LSRS     r2,r6,#24             ;406
00031a  74ca              STRB     r2,[r1,#0x13]         ;406
00031c  e79f              B        |L1.606|
;;;417    #endif /* !_FS_READONLY */
                          ENDP

                  remove_chain PROC
;;;426    static
;;;427    FRESULT remove_chain (
00031e  b5f8              PUSH     {r3-r7,lr}
;;;428    	FATFS *fs,			/* File system object */
;;;429    	DWORD clst			/* Cluster# to remove a chain from */
;;;430    )
;;;431    {
000320  0005              MOVS     r5,r0
000322  000f              MOVS     r7,r1
;;;432    	FRESULT res;
;;;433    	DWORD nxt;
;;;434    
;;;435    
;;;436    	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
000324  2f02              CMP      r7,#2
000326  d302              BCC      |L1.814|
000328  69e8              LDR      r0,[r5,#0x1c]
00032a  42b8              CMP      r0,r7
00032c  d801              BHI      |L1.818|
                  |L1.814|
;;;437    		res = FR_INT_ERR;
00032e  2602              MOVS     r6,#2
000330  e024              B        |L1.892|
                  |L1.818|
;;;438    
;;;439    	} else {
;;;440    		res = FR_OK;
000332  2600              MOVS     r6,#0
;;;441    		while (clst < fs->max_clust) {			/* Not a last link? */
000334  e01f              B        |L1.886|
                  |L1.822|
;;;442    			nxt = get_fat(fs, clst);			/* Get cluster status */
000336  0039              MOVS     r1,r7
000338  0028              MOVS     r0,r5
00033a  f7fffffe          BL       get_fat
00033e  0004              MOVS     r4,r0
;;;443    			if (nxt == 0) break;				/* Empty cluster? */
000340  2c00              CMP      r4,#0
000342  d01b              BEQ      |L1.892|
;;;444    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000344  2c01              CMP      r4,#1
000346  d00a              BEQ      |L1.862|
;;;445    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000348  1c60              ADDS     r0,r4,#1
00034a  d00a              BEQ      |L1.866|
;;;446    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
00034c  2200              MOVS     r2,#0
00034e  0039              MOVS     r1,r7
000350  0028              MOVS     r0,r5
000352  f7fffffe          BL       put_fat
000356  0006              MOVS     r6,r0
;;;447    			if (res != FR_OK) break;
000358  2e00              CMP      r6,#0
00035a  d10f              BNE      |L1.892|
00035c  e003              B        |L1.870|
                  |L1.862|
00035e  2602              MOVS     r6,#2                 ;444
000360  e00c              B        |L1.892|
                  |L1.866|
000362  2601              MOVS     r6,#1                 ;445
000364  e00a              B        |L1.892|
                  |L1.870|
;;;448    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
000366  6928              LDR      r0,[r5,#0x10]
000368  1c41              ADDS     r1,r0,#1
00036a  d003              BEQ      |L1.884|
;;;449    				fs->free_clust++;
00036c  1c40              ADDS     r0,r0,#1
00036e  6128              STR      r0,[r5,#0x10]
;;;450    				fs->fsi_flag = 1;
000370  2001              MOVS     r0,#1
000372  7168              STRB     r0,[r5,#5]
                  |L1.884|
;;;451    			}
;;;452    			clst = nxt;	/* Next cluster */
000374  0027              MOVS     r7,r4
                  |L1.886|
000376  69e8              LDR      r0,[r5,#0x1c]         ;441
000378  42b8              CMP      r0,r7                 ;441
00037a  d8dc              BHI      |L1.822|
                  |L1.892|
;;;453    		}
;;;454    	}
;;;455    
;;;456    	return res;
00037c  0030              MOVS     r0,r6
;;;457    }
00037e  bdf8              POP      {r3-r7,pc}
;;;458    #endif
                          ENDP

                  create_chain PROC
;;;467    static
;;;468    DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000380  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;469    	FATFS *fs,			/* File system object */
;;;470    	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;471    )
;;;472    {
000382  0006              MOVS     r6,r0
000384  b081              SUB      sp,sp,#4
;;;473    	DWORD cs, ncl, scl, mcl;
;;;474    
;;;475    
;;;476    	mcl = fs->max_clust;
000386  69f7              LDR      r7,[r6,#0x1c]
;;;477    	if (clst == 0) {		/* Create new chain */
000388  9802              LDR      r0,[sp,#8]
00038a  2800              CMP      r0,#0
00038c  d007              BEQ      |L1.926|
;;;478    		scl = fs->last_clust;			/* Get suggested start point */
;;;479    		if (scl == 0 || scl >= mcl) scl = 1;
;;;480    	}
;;;481    	else {					/* Stretch existing chain */
;;;482    		cs = get_fat(fs, clst);			/* Check the cluster status */
00038e  9902              LDR      r1,[sp,#8]
000390  0030              MOVS     r0,r6
000392  f7fffffe          BL       get_fat
;;;483    		if (cs < 2) return 1;			/* It is an invalid cluster */
000396  2802              CMP      r0,#2
000398  d208              BCS      |L1.940|
00039a  2001              MOVS     r0,#1
                  |L1.924|
;;;484    		if (cs < mcl) return cs;		/* It is already followed by next cluster */
;;;485    		scl = clst;
;;;486    	}
;;;487    
;;;488    	ncl = scl;				/* Start cluster */
;;;489    	for (;;) {
;;;490    		ncl++;							/* Next cluster */
;;;491    		if (ncl >= mcl) {				/* Wrap around */
;;;492    			ncl = 2;
;;;493    			if (ncl > scl) return 0;	/* No free custer */
;;;494    		}
;;;495    		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;496    		if (cs == 0) break;				/* Found a free cluster */
;;;497    		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
;;;498    			return cs;
;;;499    		if (ncl == scl) return 0;		/* No free custer */
;;;500    	}
;;;501    
;;;502    	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
;;;503    		return 0xFFFFFFFF;
;;;504    	if (clst != 0) {					/* Link it to the previous one if needed */
;;;505    		if (put_fat(fs, clst, ncl))
;;;506    			return 0xFFFFFFFF;
;;;507    	}
;;;508    
;;;509    	fs->last_clust = ncl;				/* Update FSINFO */
;;;510    	if (fs->free_clust != 0xFFFFFFFF) {
;;;511    		fs->free_clust--;
;;;512    		fs->fsi_flag = 1;
;;;513    	}
;;;514    
;;;515    	return ncl;		/* Return new cluster number */
;;;516    }
00039c  bdfe              POP      {r1-r7,pc}
                  |L1.926|
00039e  68f5              LDR      r5,[r6,#0xc]          ;478
0003a0  2d00              CMP      r5,#0                 ;479
0003a2  d001              BEQ      |L1.936|
0003a4  42bd              CMP      r5,r7                 ;479
0003a6  d304              BCC      |L1.946|
                  |L1.936|
0003a8  2501              MOVS     r5,#1                 ;479
0003aa  e002              B        |L1.946|
                  |L1.940|
0003ac  42b8              CMP      r0,r7                 ;484
0003ae  d3f5              BCC      |L1.924|
0003b0  9d02              LDR      r5,[sp,#8]            ;485
                  |L1.946|
0003b2  002c              MOVS     r4,r5                 ;488
                  |L1.948|
0003b4  1c64              ADDS     r4,r4,#1              ;490
0003b6  42bc              CMP      r4,r7                 ;491
0003b8  d304              BCC      |L1.964|
0003ba  2402              MOVS     r4,#2                 ;492
0003bc  2d02              CMP      r5,#2                 ;493
0003be  d201              BCS      |L1.964|
0003c0  2000              MOVS     r0,#0                 ;493
                  |L1.962|
0003c2  bdfe              POP      {r1-r7,pc}
                  |L1.964|
0003c4  0021              MOVS     r1,r4                 ;495
0003c6  0030              MOVS     r0,r6                 ;495
0003c8  f7fffffe          BL       get_fat
0003cc  2800              CMP      r0,#0                 ;496
0003ce  d007              BEQ      |L1.992|
0003d0  1c41              ADDS     r1,r0,#1              ;497
0003d2  d0f6              BEQ      |L1.962|
0003d4  2801              CMP      r0,#1                 ;497
0003d6  d0f4              BEQ      |L1.962|
0003d8  42ac              CMP      r4,r5                 ;499
0003da  d1eb              BNE      |L1.948|
0003dc  2000              MOVS     r0,#0                 ;499
0003de  bdfe              POP      {r1-r7,pc}
                  |L1.992|
0003e0  4afa              LDR      r2,|L1.1996|
0003e2  0021              MOVS     r1,r4                 ;502
0003e4  0030              MOVS     r0,r6                 ;502
0003e6  f7fffffe          BL       put_fat
0003ea  2500              MOVS     r5,#0                 ;497
0003ec  43ed              MVNS     r5,r5                 ;497
0003ee  2800              CMP      r0,#0                 ;502
0003f0  d001              BEQ      |L1.1014|
0003f2  0028              MOVS     r0,r5                 ;503
0003f4  bdfe              POP      {r1-r7,pc}
                  |L1.1014|
0003f6  9802              LDR      r0,[sp,#8]            ;504
0003f8  2800              CMP      r0,#0                 ;504
0003fa  d008              BEQ      |L1.1038|
0003fc  9902              LDR      r1,[sp,#8]            ;505
0003fe  0022              MOVS     r2,r4                 ;505
000400  0030              MOVS     r0,r6                 ;505
000402  f7fffffe          BL       put_fat
000406  2800              CMP      r0,#0                 ;505
000408  d001              BEQ      |L1.1038|
00040a  0028              MOVS     r0,r5                 ;506
00040c  bdfe              POP      {r1-r7,pc}
                  |L1.1038|
00040e  60f4              STR      r4,[r6,#0xc]          ;509
000410  6930              LDR      r0,[r6,#0x10]         ;510
000412  1c41              ADDS     r1,r0,#1              ;510
000414  d003              BEQ      |L1.1054|
000416  1e40              SUBS     r0,r0,#1              ;511
000418  6130              STR      r0,[r6,#0x10]         ;511
00041a  2001              MOVS     r0,#1                 ;512
00041c  7170              STRB     r0,[r6,#5]            ;512
                  |L1.1054|
00041e  0020              MOVS     r0,r4                 ;515
000420  bdfe              POP      {r1-r7,pc}
;;;517    #endif /* !_FS_READONLY */
                          ENDP

                  clust2sect PROC
;;;526    
;;;527    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
000422  1e89              SUBS     r1,r1,#2
;;;528    	FATFS *fs,		/* File system object */
;;;529    	DWORD clst		/* Cluster# to be converted */
;;;530    )
;;;531    {
;;;532    	clst -= 2;
;;;533    	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
000424  69c2              LDR      r2,[r0,#0x1c]
000426  1e92              SUBS     r2,r2,#2
000428  428a              CMP      r2,r1
00042a  d801              BHI      |L1.1072|
00042c  2000              MOVS     r0,#0
;;;534    	return clst * fs->csize + fs->database;
;;;535    }
00042e  4770              BX       lr
                  |L1.1072|
000430  7882              LDRB     r2,[r0,#2]            ;534
000432  6a80              LDR      r0,[r0,#0x28]         ;534
000434  434a              MULS     r2,r1,r2              ;534
000436  1810              ADDS     r0,r2,r0              ;534
000438  4770              BX       lr
;;;536    
                          ENDP

                  dir_seek PROC
;;;544    static
;;;545    FRESULT dir_seek (
00043a  b570              PUSH     {r4-r6,lr}
;;;546    	DIR *dj,		/* Pointer to directory object */
;;;547    	WORD idx		/* Directory index number */
;;;548    )
;;;549    {
00043c  0004              MOVS     r4,r0
00043e  000d              MOVS     r5,r1
;;;550    	DWORD clst;
;;;551    	WORD ic;
;;;552    
;;;553    
;;;554    	dj->index = idx;
000440  80e5              STRH     r5,[r4,#6]
;;;555    	clst = dj->sclust;
000442  68a1              LDR      r1,[r4,#8]
;;;556    	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
000444  2901              CMP      r1,#1
000446  d003              BEQ      |L1.1104|
000448  6820              LDR      r0,[r4,#0]
00044a  69c2              LDR      r2,[r0,#0x1c]
00044c  428a              CMP      r2,r1
00044e  d801              BHI      |L1.1108|
                  |L1.1104|
;;;557    		return FR_INT_ERR;
000450  2002              MOVS     r0,#2
;;;558    	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;559    		clst = dj->fs->dirbase;
;;;560    
;;;561    	if (clst == 0) {	/* Static table */
;;;562    		dj->clust = clst;
;;;563    		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
;;;564    			return FR_INT_ERR;
;;;565    		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
;;;566    	}
;;;567    	else {				/* Dynamic table */
;;;568    		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
;;;569    		while (idx >= ic) {	/* Follow cluster chain */
;;;570    			clst = get_fat(dj->fs, clst);				/* Get next cluster */
;;;571    			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;572    			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
;;;573    				return FR_INT_ERR;
;;;574    			idx -= ic;
;;;575    		}
;;;576    		dj->clust = clst;
;;;577    		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
;;;578    	}
;;;579    
;;;580    	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
;;;581    
;;;582    	return FR_OK;	/* Seek succeeded */
;;;583    }
000452  bd70              POP      {r4-r6,pc}
                  |L1.1108|
000454  2900              CMP      r1,#0                 ;558
000456  d103              BNE      |L1.1120|
000458  7802              LDRB     r2,[r0,#0]            ;558
00045a  2a03              CMP      r2,#3                 ;558
00045c  d100              BNE      |L1.1120|
00045e  6a41              LDR      r1,[r0,#0x24]         ;559
                  |L1.1120|
000460  2900              CMP      r1,#0                 ;561
000462  d002              BEQ      |L1.1130|
000464  7880              LDRB     r0,[r0,#2]            ;568
000466  0106              LSLS     r6,r0,#4              ;568
000468  e01d              B        |L1.1190|
                  |L1.1130|
00046a  60e1              STR      r1,[r4,#0xc]          ;562
00046c  8901              LDRH     r1,[r0,#8]            ;563
00046e  42a9              CMP      r1,r5                 ;563
000470  d801              BHI      |L1.1142|
000472  2002              MOVS     r0,#2                 ;564
000474  bd70              POP      {r4-r6,pc}
                  |L1.1142|
000476  6a40              LDR      r0,[r0,#0x24]         ;565
000478  0929              LSRS     r1,r5,#4              ;565
00047a  1840              ADDS     r0,r0,r1              ;565
00047c  6120              STR      r0,[r4,#0x10]         ;565
00047e  e01b              B        |L1.1208|
                  |L1.1152|
000480  6820              LDR      r0,[r4,#0]            ;570
000482  f7fffffe          BL       get_fat
000486  0001              MOVS     r1,r0                 ;570
000488  1c48              ADDS     r0,r1,#1              ;571
00048a  d007              BEQ      |L1.1180|
00048c  2902              CMP      r1,#2                 ;572
00048e  d303              BCC      |L1.1176|
000490  6820              LDR      r0,[r4,#0]            ;572
000492  69c0              LDR      r0,[r0,#0x1c]         ;572
000494  4288              CMP      r0,r1                 ;572
000496  d803              BHI      |L1.1184|
                  |L1.1176|
000498  2002              MOVS     r0,#2                 ;573
00049a  bd70              POP      {r4-r6,pc}
                  |L1.1180|
00049c  2001              MOVS     r0,#1                 ;571
00049e  bd70              POP      {r4-r6,pc}
                  |L1.1184|
0004a0  1ba8              SUBS     r0,r5,r6              ;574
0004a2  0405              LSLS     r5,r0,#16             ;574
0004a4  0c2d              LSRS     r5,r5,#16             ;574
                  |L1.1190|
0004a6  42b5              CMP      r5,r6                 ;569
0004a8  d2ea              BCS      |L1.1152|
0004aa  60e1              STR      r1,[r4,#0xc]          ;576
0004ac  6820              LDR      r0,[r4,#0]            ;577
0004ae  f7fffffe          BL       clust2sect
0004b2  0929              LSRS     r1,r5,#4              ;577
0004b4  1840              ADDS     r0,r0,r1              ;577
0004b6  6120              STR      r0,[r4,#0x10]         ;577
                  |L1.1208|
0004b8  0728              LSLS     r0,r5,#28             ;580
0004ba  6821              LDR      r1,[r4,#0]            ;580
0004bc  0dc0              LSRS     r0,r0,#23             ;580
0004be  3030              ADDS     r0,r0,#0x30           ;580
0004c0  1808              ADDS     r0,r1,r0              ;580
0004c2  6160              STR      r0,[r4,#0x14]         ;580
0004c4  2000              MOVS     r0,#0                 ;582
0004c6  bd70              POP      {r4-r6,pc}
;;;584    
                          ENDP

                  dir_next PROC
;;;592    static
;;;593    FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
0004c8  b5f8              PUSH     {r3-r7,lr}
;;;594    	DIR *dj,		/* Pointer to directory object */
;;;595    	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
;;;596    )
;;;597    {
0004ca  0004              MOVS     r4,r0
0004cc  000e              MOVS     r6,r1
;;;598    	DWORD clst;
;;;599    	WORD i;
;;;600    
;;;601    
;;;602    	i = dj->index + 1;
0004ce  88e0              LDRH     r0,[r4,#6]
0004d0  1c40              ADDS     r0,r0,#1
0004d2  0407              LSLS     r7,r0,#16
0004d4  0c3f              LSRS     r7,r7,#16
;;;603    	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
0004d6  2f00              CMP      r7,#0
0004d8  d005              BEQ      |L1.1254|
0004da  6920              LDR      r0,[r4,#0x10]
0004dc  2800              CMP      r0,#0
0004de  d002              BEQ      |L1.1254|
;;;604    		return FR_NO_FILE;
;;;605    
;;;606    	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
0004e0  0739              LSLS     r1,r7,#28
0004e2  d002              BEQ      |L1.1258|
0004e4  e06c              B        |L1.1472|
                  |L1.1254|
0004e6  2004              MOVS     r0,#4                 ;604
;;;607    		dj->sect++;					/* Next sector */
;;;608    
;;;609    		if (dj->clust == 0) {	/* Static table */
;;;610    			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
;;;611    				return FR_NO_FILE;
;;;612    		}
;;;613    		else {					/* Dynamic table */
;;;614    			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;615    				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
;;;616    				if (clst <= 1) return FR_INT_ERR;
;;;617    				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;618    				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
;;;619    #if !_FS_READONLY
;;;620    					BYTE c;
;;;621    					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
;;;622    					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
;;;623    					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;624    					if (clst == 1) return FR_INT_ERR;
;;;625    					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;626    					/* Clean-up streached table */
;;;627    					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
;;;628    					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
;;;629    					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
;;;630    					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;631    						dj->fs->wflag = 1;
;;;632    						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
;;;633    						dj->fs->winsect++;
;;;634    					}
;;;635    					dj->fs->winsect -= c;						/* Rewind window address */
;;;636    #else
;;;637    					return FR_NO_FILE;			/* Report EOT */
;;;638    #endif
;;;639    				}
;;;640    				dj->clust = clst;				/* Initialize data for new cluster */
;;;641    				dj->sect = clust2sect(dj->fs, clst);
;;;642    			}
;;;643    		}
;;;644    	}
;;;645    
;;;646    	dj->index = i;
;;;647    	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
;;;648    
;;;649    	return FR_OK;
;;;650    }
0004e8  bdf8              POP      {r3-r7,pc}
                  |L1.1258|
0004ea  1c40              ADDS     r0,r0,#1              ;607
0004ec  6120              STR      r0,[r4,#0x10]         ;607
0004ee  68e1              LDR      r1,[r4,#0xc]          ;609
0004f0  2900              CMP      r1,#0                 ;609
0004f2  d006              BEQ      |L1.1282|
0004f4  6820              LDR      r0,[r4,#0]            ;614
0004f6  093a              LSRS     r2,r7,#4              ;614
0004f8  7883              LDRB     r3,[r0,#2]            ;614
0004fa  1e5b              SUBS     r3,r3,#1              ;614
0004fc  421a              TST      r2,r3                 ;614
0004fe  d006              BEQ      |L1.1294|
000500  e05e              B        |L1.1472|
                  |L1.1282|
000502  6820              LDR      r0,[r4,#0]            ;610
000504  8900              LDRH     r0,[r0,#8]            ;610
000506  42b8              CMP      r0,r7                 ;610
000508  d85a              BHI      |L1.1472|
00050a  2004              MOVS     r0,#4                 ;611
00050c  bdf8              POP      {r3-r7,pc}
                  |L1.1294|
00050e  f7fffffe          BL       get_fat
000512  0005              MOVS     r5,r0                 ;615
000514  2d01              CMP      r5,#1                 ;616
000516  d801              BHI      |L1.1308|
000518  2002              MOVS     r0,#2                 ;616
00051a  bdf8              POP      {r3-r7,pc}
                  |L1.1308|
00051c  1c68              ADDS     r0,r5,#1              ;617
00051e  d017              BEQ      |L1.1360|
000520  6820              LDR      r0,[r4,#0]            ;618
000522  69c1              LDR      r1,[r0,#0x1c]         ;618
000524  42a9              CMP      r1,r5                 ;618
000526  d845              BHI      |L1.1460|
000528  2e00              CMP      r6,#0                 ;621
00052a  d013              BEQ      |L1.1364|
00052c  68e1              LDR      r1,[r4,#0xc]          ;622
00052e  f7fffffe          BL       create_chain
000532  0005              MOVS     r5,r0                 ;622
000534  2d00              CMP      r5,#0                 ;623
000536  d00f              BEQ      |L1.1368|
000538  2d01              CMP      r5,#1                 ;624
00053a  d00f              BEQ      |L1.1372|
00053c  1c68              ADDS     r0,r5,#1              ;625
00053e  d00f              BEQ      |L1.1376|
000540  6820              LDR      r0,[r4,#0]            ;627
000542  2100              MOVS     r1,#0                 ;627
000544  f7fffffe          BL       move_window
000548  2800              CMP      r0,#0                 ;627
00054a  d00b              BEQ      |L1.1380|
00054c  2001              MOVS     r0,#1                 ;627
00054e  bdf8              POP      {r3-r7,pc}
                  |L1.1360|
000550  2001              MOVS     r0,#1                 ;617
000552  bdf8              POP      {r3-r7,pc}
                  |L1.1364|
000554  2004              MOVS     r0,#4                 ;621
000556  bdf8              POP      {r3-r7,pc}
                  |L1.1368|
000558  2007              MOVS     r0,#7                 ;623
00055a  bdf8              POP      {r3-r7,pc}
                  |L1.1372|
00055c  2002              MOVS     r0,#2                 ;624
00055e  bdf8              POP      {r3-r7,pc}
                  |L1.1376|
000560  2001              MOVS     r0,#1                 ;625
000562  bdf8              POP      {r3-r7,pc}
                  |L1.1380|
000564  6820              LDR      r0,[r4,#0]            ;628
000566  2201              MOVS     r2,#1                 ;628
000568  3030              ADDS     r0,r0,#0x30           ;628
00056a  0252              LSLS     r2,r2,#9              ;628
00056c  2100              MOVS     r1,#0                 ;628
00056e  f7fffffe          BL       mem_set
000572  6820              LDR      r0,[r4,#0]            ;629
000574  0029              MOVS     r1,r5                 ;629
000576  f7fffffe          BL       clust2sect
00057a  6821              LDR      r1,[r4,#0]            ;629
00057c  62c8              STR      r0,[r1,#0x2c]         ;629
00057e  2600              MOVS     r6,#0                 ;630
000580  e010              B        |L1.1444|
                  |L1.1410|
000582  2101              MOVS     r1,#1                 ;631
000584  7101              STRB     r1,[r0,#4]            ;631
000586  6820              LDR      r0,[r4,#0]            ;632
000588  2100              MOVS     r1,#0                 ;632
00058a  f7fffffe          BL       move_window
00058e  2800              CMP      r0,#0                 ;632
000590  d001              BEQ      |L1.1430|
000592  2001              MOVS     r0,#1                 ;632
000594  bdf8              POP      {r3-r7,pc}
                  |L1.1430|
000596  6820              LDR      r0,[r4,#0]            ;633
000598  6ac1              LDR      r1,[r0,#0x2c]         ;633
00059a  1c49              ADDS     r1,r1,#1              ;633
00059c  62c1              STR      r1,[r0,#0x2c]         ;633
00059e  1c76              ADDS     r6,r6,#1              ;630
0005a0  0636              LSLS     r6,r6,#24             ;630
0005a2  0e36              LSRS     r6,r6,#24             ;630
                  |L1.1444|
0005a4  6820              LDR      r0,[r4,#0]            ;630
0005a6  7881              LDRB     r1,[r0,#2]            ;630
0005a8  42b1              CMP      r1,r6                 ;630
0005aa  d8ea              BHI      |L1.1410|
0005ac  6821              LDR      r1,[r4,#0]            ;635
0005ae  6ac9              LDR      r1,[r1,#0x2c]         ;635
0005b0  1b89              SUBS     r1,r1,r6              ;635
0005b2  62c1              STR      r1,[r0,#0x2c]         ;635
                  |L1.1460|
0005b4  60e5              STR      r5,[r4,#0xc]          ;640
0005b6  6820              LDR      r0,[r4,#0]            ;641
0005b8  0029              MOVS     r1,r5                 ;641
0005ba  f7fffffe          BL       clust2sect
0005be  6120              STR      r0,[r4,#0x10]         ;641
                  |L1.1472|
0005c0  80e7              STRH     r7,[r4,#6]            ;646
0005c2  0738              LSLS     r0,r7,#28             ;647
0005c4  6821              LDR      r1,[r4,#0]            ;647
0005c6  0dc0              LSRS     r0,r0,#23             ;647
0005c8  3030              ADDS     r0,r0,#0x30           ;647
0005ca  1808              ADDS     r0,r1,r0              ;647
0005cc  6160              STR      r0,[r4,#0x14]         ;647
0005ce  2000              MOVS     r0,#0                 ;649
0005d0  bdf8              POP      {r3-r7,pc}
;;;651    
                          ENDP

                  dir_find PROC
;;;829    static
;;;830    FRESULT dir_find (
0005d2  b570              PUSH     {r4-r6,lr}
;;;831    	DIR *dj			/* Pointer to the directory object linked to the file name */
;;;832    )
;;;833    {
0005d4  0004              MOVS     r4,r0
;;;834    	FRESULT res;
;;;835    	BYTE c, *dir;
;;;836    #if _USE_LFN
;;;837    	BYTE a, ord, sum;
;;;838    #endif
;;;839    
;;;840    	res = dir_seek(dj, 0);			/* Rewind directory object */
0005d6  2100              MOVS     r1,#0
0005d8  0020              MOVS     r0,r4
0005da  f7fffffe          BL       dir_seek
;;;841    	if (res != FR_OK) return res;
0005de  2800              CMP      r0,#0
0005e0  d11b              BNE      |L1.1562|
                  |L1.1506|
;;;842    
;;;843    #if _USE_LFN
;;;844    	ord = sum = 0xFF;
;;;845    #endif
;;;846    	do {
;;;847    		res = move_window(dj->fs, dj->sect);
0005e2  6921              LDR      r1,[r4,#0x10]
0005e4  6820              LDR      r0,[r4,#0]
0005e6  f7fffffe          BL       move_window
0005ea  0005              MOVS     r5,r0
;;;848    		if (res != FR_OK) break;
0005ec  2d00              CMP      r5,#0
0005ee  d113              BNE      |L1.1560|
;;;849    		dir = dj->dir;					/* Ptr to the directory entry of current index */
0005f0  6960              LDR      r0,[r4,#0x14]
;;;850    		c = dir[DIR_Name];
0005f2  7801              LDRB     r1,[r0,#0]
;;;851    		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
0005f4  2900              CMP      r1,#0
0005f6  d011              BEQ      |L1.1564|
;;;852    #if _USE_LFN	/* LFN configuration */
;;;853    		a = dir[DIR_Attr] & AM_MASK;
;;;854    		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;855    			ord = 0xFF;
;;;856    		} else {
;;;857    			if (a == AM_LFN) {			/* An LFN entry is found */
;;;858    				if (dj->lfn) {
;;;859    					if (c & 0x40) {		/* Is it start of LFN sequence? */
;;;860    						sum = dir[LDIR_Chksum];
;;;861    						c &= 0xBF; ord = c;	/* LFN start order */
;;;862    						dj->lfn_idx = dj->index;
;;;863    					}
;;;864    					/* Check validity of the LFN entry and compare it with given name */
;;;865    					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;866    				}
;;;867    			} else {					/* An SFN entry is found */
;;;868    				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;869    				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;870    				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
;;;871    			}
;;;872    		}
;;;873    #else		/* Non LFN configuration */
;;;874    		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
0005f8  7ac1              LDRB     r1,[r0,#0xb]
0005fa  0709              LSLS     r1,r1,#28
0005fc  d405              BMI      |L1.1546|
0005fe  69a1              LDR      r1,[r4,#0x18]
000600  220b              MOVS     r2,#0xb
000602  f7fffffe          BL       mem_cmp
000606  2800              CMP      r0,#0
000608  d006              BEQ      |L1.1560|
                  |L1.1546|
;;;875    			break;
;;;876    #endif
;;;877    		res = dir_next(dj, FALSE);		/* Next entry */
00060a  2100              MOVS     r1,#0
00060c  0020              MOVS     r0,r4
00060e  f7fffffe          BL       dir_next
000612  0005              MOVS     r5,r0
;;;878    	} while (res == FR_OK);
000614  2d00              CMP      r5,#0
000616  d0e4              BEQ      |L1.1506|
                  |L1.1560|
;;;879    
;;;880    	return res;
000618  0028              MOVS     r0,r5
                  |L1.1562|
;;;881    }
00061a  bd70              POP      {r4-r6,pc}
                  |L1.1564|
00061c  2504              MOVS     r5,#4                 ;851
00061e  e7fb              B        |L1.1560|
;;;882    
                          ENDP

                  dir_read PROC
;;;890    static
;;;891    FRESULT dir_read (
000620  b510              PUSH     {r4,lr}
;;;892    	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
;;;893    )
;;;894    {
000622  0004              MOVS     r4,r0
;;;895    	FRESULT res;
;;;896    	BYTE c, *dir;
;;;897    #if _USE_LFN
;;;898    	BYTE a, ord = 0xFF, sum = 0xFF;
;;;899    #endif
;;;900    
;;;901    	res = FR_NO_FILE;
000624  2004              MOVS     r0,#4
;;;902    	while (dj->sect) {
000626  e018              B        |L1.1626|
                  |L1.1576|
;;;903    		res = move_window(dj->fs, dj->sect);
000628  6820              LDR      r0,[r4,#0]
00062a  f7fffffe          BL       move_window
;;;904    		if (res != FR_OK) break;
00062e  2800              CMP      r0,#0
000630  d116              BNE      |L1.1632|
;;;905    		dir = dj->dir;					/* Ptr to the directory entry of current index */
000632  6962              LDR      r2,[r4,#0x14]
;;;906    		c = dir[DIR_Name];
000634  7811              LDRB     r1,[r2,#0]
;;;907    		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
000636  2900              CMP      r1,#0
000638  d00d              BEQ      |L1.1622|
;;;908    #if _USE_LFN	/* LFN configuration */
;;;909    		a = dir[DIR_Attr] & AM_MASK;
;;;910    		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;911    			ord = 0xFF;
;;;912    		} else {
;;;913    			if (a == AM_LFN) {			/* An LFN entry is found */
;;;914    				if (c & 0x40) {			/* Is it start of LFN sequence? */
;;;915    					sum = dir[LDIR_Chksum];
;;;916    					c &= 0xBF; ord = c;
;;;917    					dj->lfn_idx = dj->index;
;;;918    				}
;;;919    				/* Check LFN validity and capture it */
;;;920    				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;921    			} else {					/* An SFN entry is found */
;;;922    				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
;;;923    					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
;;;924    				break;
;;;925    			}
;;;926    		}
;;;927    #else		/* Non LFN configuration */
;;;928    		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
00063a  29e5              CMP      r1,#0xe5
00063c  d004              BEQ      |L1.1608|
00063e  292e              CMP      r1,#0x2e
000640  d002              BEQ      |L1.1608|
000642  7ad1              LDRB     r1,[r2,#0xb]
000644  0709              LSLS     r1,r1,#28
000646  d50b              BPL      |L1.1632|
                  |L1.1608|
;;;929    			break;
;;;930    #endif
;;;931    		res = dir_next(dj, FALSE);				/* Next entry */
000648  2100              MOVS     r1,#0
00064a  0020              MOVS     r0,r4
00064c  f7fffffe          BL       dir_next
;;;932    		if (res != FR_OK) break;
000650  2800              CMP      r0,#0
000652  d002              BEQ      |L1.1626|
000654  e004              B        |L1.1632|
                  |L1.1622|
000656  2004              MOVS     r0,#4                 ;907
000658  e002              B        |L1.1632|
                  |L1.1626|
00065a  6921              LDR      r1,[r4,#0x10]         ;902
00065c  2900              CMP      r1,#0                 ;902
00065e  d1e3              BNE      |L1.1576|
                  |L1.1632|
;;;933    	}
;;;934    
;;;935    	if (res != FR_OK) dj->sect = 0;
000660  2800              CMP      r0,#0
000662  d001              BEQ      |L1.1640|
000664  2100              MOVS     r1,#0
000666  6121              STR      r1,[r4,#0x10]
                  |L1.1640|
;;;936    
;;;937    	return res;
;;;938    }
000668  bd10              POP      {r4,pc}
;;;939    #endif
                          ENDP

                  dir_register PROC
;;;947    static
;;;948    FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
00066a  b570              PUSH     {r4-r6,lr}
;;;949    	DIR *dj				/* Target directory with object name to be created */
;;;950    )
;;;951    {
00066c  0005              MOVS     r5,r0
;;;952    	FRESULT res;
;;;953    	BYTE c, *dir;
;;;954    #if _USE_LFN	/* LFN configuration */
;;;955    	WORD n, ne, is;
;;;956    	BYTE sn[12], *fn, sum;
;;;957    	WCHAR *lfn;
;;;958    
;;;959    
;;;960    	fn = dj->fn; lfn = dj->lfn;
;;;961    	mem_cpy(sn, fn, 12);
;;;962    
;;;963    	if (_FS_RPATH && (sn[NS] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */
;;;964    
;;;965    	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
;;;966    		fn[NS] = 0; dj->lfn = NULL;			/* Find only SFN */
;;;967    		for (n = 1; n < 100; n++) {
;;;968    			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
;;;969    			res = dir_find(dj);				/* Check if the name collides with existing SFN */
;;;970    			if (res != FR_OK) break;
;;;971    		}
;;;972    		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
;;;973    		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;974    		fn[NS] = sn[NS]; dj->lfn = lfn;
;;;975    	}
;;;976    
;;;977    	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve reserve an SFN + LFN entries. */
;;;978    		for (ne = 0; lfn[ne]; ne++) ;
;;;979    		ne = (ne + 25) / 13;
;;;980    	} else {						/* Otherwise reserve only an SFN entry. */
;;;981    		ne = 1;
;;;982    	}
;;;983    
;;;984    	/* Reserve contiguous entries */
;;;985    	res = dir_seek(dj, 0);
;;;986    	if (res != FR_OK) return res;
;;;987    	n = is = 0;
;;;988    	do {
;;;989    		res = move_window(dj->fs, dj->sect);
;;;990    		if (res != FR_OK) break;
;;;991    		c = *dj->dir;				/* Check the entry status */
;;;992    		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
;;;993    			if (n == 0) is = dj->index;	/* First index of the contigulus entry */
;;;994    			if (++n == ne) break;	/* A contiguous entry that requiered count is found */
;;;995    		} else {
;;;996    			n = 0;					/* Not a blank entry. Restart to search */
;;;997    		}
;;;998    		res = dir_next(dj, TRUE);	/* Next entry with table streach */
;;;999    	} while (res == FR_OK);
;;;1000   
;;;1001   	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
;;;1002   		res = dir_seek(dj, is);
;;;1003   		if (res == FR_OK) {
;;;1004   			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
;;;1005   			ne--;
;;;1006   			do {					/* Store LFN entries in bottom first */
;;;1007   				res = move_window(dj->fs, dj->sect);
;;;1008   				if (res != FR_OK) break;
;;;1009   				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
;;;1010   				dj->fs->wflag = 1;
;;;1011   				res = dir_next(dj, FALSE);	/* Next entry */
;;;1012   			} while (res == FR_OK && --ne);
;;;1013   		}
;;;1014   	}
;;;1015   
;;;1016   #else	/* Non LFN configuration */
;;;1017   	res = dir_seek(dj, 0);
00066e  2100              MOVS     r1,#0
000670  0028              MOVS     r0,r5
000672  f7fffffe          BL       dir_seek
000676  0004              MOVS     r4,r0
;;;1018   	if (res == FR_OK) {
000678  2c00              CMP      r4,#0
00067a  d113              BNE      |L1.1700|
                  |L1.1660|
;;;1019   		do {	/* Find a blank entry for the SFN */
;;;1020   			res = move_window(dj->fs, dj->sect);
00067c  6929              LDR      r1,[r5,#0x10]
00067e  6828              LDR      r0,[r5,#0]
000680  f7fffffe          BL       move_window
000684  0004              MOVS     r4,r0
;;;1021   			if (res != FR_OK) break;
000686  2c00              CMP      r4,#0
000688  d10c              BNE      |L1.1700|
;;;1022   			c = *dj->dir;
00068a  6968              LDR      r0,[r5,#0x14]
00068c  7800              LDRB     r0,[r0,#0]
;;;1023   			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
00068e  28e5              CMP      r0,#0xe5
000690  d008              BEQ      |L1.1700|
000692  2800              CMP      r0,#0
000694  d006              BEQ      |L1.1700|
;;;1024   			res = dir_next(dj, TRUE);		/* Next entry with table streach */
000696  2101              MOVS     r1,#1
000698  0028              MOVS     r0,r5
00069a  f7fffffe          BL       dir_next
00069e  0004              MOVS     r4,r0
;;;1025   		} while (res == FR_OK);
0006a0  2c00              CMP      r4,#0
0006a2  d0eb              BEQ      |L1.1660|
                  |L1.1700|
;;;1026   	}
;;;1027   #endif
;;;1028   
;;;1029   	if (res == FR_OK) {		/* Initialize the SFN entry */
0006a4  2c00              CMP      r4,#0
0006a6  d119              BNE      |L1.1756|
;;;1030   		res = move_window(dj->fs, dj->sect);
0006a8  6929              LDR      r1,[r5,#0x10]
0006aa  6828              LDR      r0,[r5,#0]
0006ac  f7fffffe          BL       move_window
0006b0  0004              MOVS     r4,r0
;;;1031   		if (res == FR_OK) {
0006b2  2c00              CMP      r4,#0
0006b4  d112              BNE      |L1.1756|
;;;1032   			dir = dj->dir;
0006b6  696e              LDR      r6,[r5,#0x14]
;;;1033   			mem_set(dir, 0, 32);		/* Clean the entry */
0006b8  2220              MOVS     r2,#0x20
0006ba  2100              MOVS     r1,#0
0006bc  0030              MOVS     r0,r6
0006be  f7fffffe          BL       mem_set
;;;1034   			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
0006c2  69a9              LDR      r1,[r5,#0x18]
0006c4  220b              MOVS     r2,#0xb
0006c6  0030              MOVS     r0,r6
0006c8  f7fffffe          BL       mem_cpy
;;;1035   			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
0006cc  69a8              LDR      r0,[r5,#0x18]
0006ce  2118              MOVS     r1,#0x18
0006d0  7ac0              LDRB     r0,[r0,#0xb]
0006d2  4008              ANDS     r0,r0,r1
0006d4  7330              STRB     r0,[r6,#0xc]
;;;1036   			dj->fs->wflag = 1;
0006d6  6829              LDR      r1,[r5,#0]
0006d8  2001              MOVS     r0,#1
0006da  7108              STRB     r0,[r1,#4]
                  |L1.1756|
;;;1037   		}
;;;1038   	}
;;;1039   
;;;1040   	return res;
0006dc  0020              MOVS     r0,r4
;;;1041   }
0006de  bd70              POP      {r4-r6,pc}
;;;1042   #endif /* !_FS_READONLY */
                          ENDP

                  dir_remove PROC
;;;1051   static
;;;1052   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
0006e0  b510              PUSH     {r4,lr}
;;;1053   	DIR *dj				/* Directory object pointing the entry to be removed */
;;;1054   )
;;;1055   {
0006e2  0004              MOVS     r4,r0
;;;1056   	FRESULT res;
;;;1057   #if _USE_LFN	/* LFN configuration */
;;;1058   	WORD i;
;;;1059   
;;;1060   	i = dj->index;	/* SFN index */
;;;1061   	res = dir_seek(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
;;;1062   	if (res == FR_OK) {
;;;1063   		do {
;;;1064   			res = move_window(dj->fs, dj->sect);
;;;1065   			if (res != FR_OK) break;
;;;1066   			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
;;;1067   			dj->fs->wflag = 1;
;;;1068   			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
;;;1069   			res = dir_next(dj, FALSE);	/* Next entry */
;;;1070   		} while (res == FR_OK);
;;;1071   		if (res == FR_NO_FILE) res = FR_INT_ERR;
;;;1072   	}
;;;1073   
;;;1074   #else			/* Non LFN configuration */
;;;1075   	res = dir_seek(dj, dj->index);
0006e4  88e1              LDRH     r1,[r4,#6]
0006e6  0020              MOVS     r0,r4
0006e8  f7fffffe          BL       dir_seek
;;;1076   	if (res == FR_OK) {
0006ec  2800              CMP      r0,#0
0006ee  d10b              BNE      |L1.1800|
;;;1077   		res = move_window(dj->fs, dj->sect);
0006f0  6921              LDR      r1,[r4,#0x10]
0006f2  6820              LDR      r0,[r4,#0]
0006f4  f7fffffe          BL       move_window
;;;1078   		if (res == FR_OK) {
0006f8  2800              CMP      r0,#0
0006fa  d105              BNE      |L1.1800|
;;;1079   			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
0006fc  6962              LDR      r2,[r4,#0x14]
0006fe  21e5              MOVS     r1,#0xe5
000700  7011              STRB     r1,[r2,#0]
;;;1080   			dj->fs->wflag = 1;
000702  6822              LDR      r2,[r4,#0]
000704  2101              MOVS     r1,#1
000706  7111              STRB     r1,[r2,#4]
                  |L1.1800|
;;;1081   		}
;;;1082   	}
;;;1083   #endif
;;;1084   
;;;1085   	return res;
;;;1086   }
000708  bd10              POP      {r4,pc}
;;;1087   #endif /* !_FS_READONLY */
                          ENDP

                  create_name PROC
;;;1096   static
;;;1097   FRESULT create_name (
00070a  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;1098   	DIR *dj,			/* Pointer to the directory object */
;;;1099   	const XCHAR **path	/* Pointer to pointer to the segment in the path string */
;;;1100   )
;;;1101   {
00070c  b083              SUB      sp,sp,#0xc
;;;1102   #ifdef _EXCVT
;;;1103   	static const BYTE cvt[] = _EXCVT;
;;;1104   #endif
;;;1105   
;;;1106   #if _USE_LFN	/* LFN configuration */
;;;1107   	BYTE b, cf;
;;;1108   	WCHAR w, *lfn;
;;;1109   	int i, ni, si, di;
;;;1110   	const XCHAR *p;
;;;1111   
;;;1112   	/* Create LFN in Unicode */
;;;1113   	si = di = 0;
;;;1114   	p = *path;
;;;1115   	lfn = dj->lfn;
;;;1116   	for (;;) {
;;;1117   		w = p[si++];					/* Get a character */
;;;1118   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
;;;1119   		if (di >= _MAX_LFN)				/* Reject too long name */
;;;1120   			return FR_INVALID_NAME;
;;;1121   #if !_LFN_UNICODE
;;;1122   		w &= 0xFF;
;;;1123   		if (IsDBCS1(w)) {				/* If it is a DBC 1st byte */
;;;1124   			b = p[si++];				/* Get 2nd byte */
;;;1125   			if (!IsDBCS2(b))			/* Reject invalid code for DBC */
;;;1126   				return FR_INVALID_NAME;
;;;1127   			w = (w << 8) + b;
;;;1128   		}
;;;1129   		w = ff_convert(w, 1);			/* Convert OEM to Unicode */
;;;1130   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1131   #endif
;;;1132   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
;;;1133   			return FR_INVALID_NAME;
;;;1134   		lfn[di++] = w;					/* Store the Unicode char */
;;;1135   	}
;;;1136   	*path = &p[si];						/* Rerurn pointer to the next segment */
;;;1137   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1138   #if _FS_RPATH
;;;1139   	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
;;;1140   		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
;;;1141   		lfn[di] = 0;
;;;1142   		for (i = 0; i < 11; i++)
;;;1143   			dj->fn[i] = (i < di) ? '.' : ' ';
;;;1144   		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1145   		return FR_OK;
;;;1146   	}
;;;1147   #endif
;;;1148   	while (di) {						/* Strip trailing spaces and dots */
;;;1149   		w = lfn[di - 1];
;;;1150   		if (w != ' ' && w != '.') break;
;;;1151   		di--;
;;;1152   	}
;;;1153   	if (!di) return FR_INVALID_NAME;	/* Reject null string */
;;;1154   
;;;1155   	lfn[di] = 0;						/* LFN is created */
;;;1156   
;;;1157   	/* Create SFN in directory form */
;;;1158   	mem_set(dj->fn, ' ', 11);
;;;1159   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1160   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1161   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1162   
;;;1163   	b = i = 0; ni = 8;
;;;1164   	for (;;) {
;;;1165   		w = lfn[si++];					/* Get an LFN char */
;;;1166   		if (!w) break;					/* Break on enf of the LFN */
;;;1167   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1168   			cf |= NS_LOSS | NS_LFN; continue;
;;;1169   		}
;;;1170   
;;;1171   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1172   			if (ni == 11) {				/* Long extension */
;;;1173   				cf |= NS_LOSS | NS_LFN; break;
;;;1174   			}
;;;1175   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1176   			if (si > di) break;			/* No extension */
;;;1177   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1178   			b <<= 2; continue;
;;;1179   		}
;;;1180   
;;;1181   		if (w >= 0x80) {				/* Non ASCII char */
;;;1182   #ifdef _EXCVT
;;;1183   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1184   			if (w) w = cvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
;;;1185   #else
;;;1186   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1187   #endif
;;;1188   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1189   		}
;;;1190   
;;;1191   		if (_DF1S && w >= 0x100) {		/* Double byte char */
;;;1192   			if (i >= ni - 1) {
;;;1193   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1194   			}
;;;1195   			dj->fn[i++] = (BYTE)(w >> 8);
;;;1196   		} else {						/* Single byte char */
;;;1197   			if (!w || chk_chr("+,;[=]", w)) {		/* Replace illegal chars for SFN */
;;;1198   				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
;;;1199   			} else {
;;;1200   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1201   					b |= 2;
;;;1202   				} else {
;;;1203   					if (IsLower(w)) {	/* ASCII small capital */
;;;1204   						b |= 1; w -= 0x20;
;;;1205   					}
;;;1206   				}
;;;1207   			}
;;;1208   		}
;;;1209   		dj->fn[i++] = (BYTE)w;
;;;1210   	}
;;;1211   
;;;1212   	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace it with 0x05 */
;;;1213   
;;;1214   	if (ni == 8) b <<= 2;
;;;1215   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1216   		cf |= NS_LFN;
;;;1217   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
;;;1218   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1219   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1220   	}
;;;1221   
;;;1222   	dj->fn[NS] = cf;	/* SFN is created */
;;;1223   
;;;1224   	return FR_OK;
;;;1225   
;;;1226   
;;;1227   #else	/* Non-LFN configuration */
;;;1228   	BYTE b, c, d, *sfn;
;;;1229   	int ni, si, i;
;;;1230   	const char *p;
;;;1231   
;;;1232   	/* Create file name in directory form */
;;;1233   	sfn = dj->fn;
00070e  6980              LDR      r0,[r0,#0x18]
000710  9002              STR      r0,[sp,#8]
;;;1234   	mem_set(sfn, ' ', 11);
000712  9802              LDR      r0,[sp,#8]
000714  220b              MOVS     r2,#0xb
000716  2120              MOVS     r1,#0x20
000718  f7fffffe          BL       mem_set
;;;1235   	si = i = b = 0; ni = 8;
00071c  2500              MOVS     r5,#0
00071e  002e              MOVS     r6,r5
000720  9501              STR      r5,[sp,#4]
000722  2708              MOVS     r7,#8
;;;1236   	p = *path;
000724  9804              LDR      r0,[sp,#0x10]
000726  6800              LDR      r0,[r0,#0]
000728  9000              STR      r0,[sp,#0]
                  |L1.1834|
;;;1237   #if _FS_RPATH
;;;1238   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1239   		for (;;) {
;;;1240   			c = p[si++];
;;;1241   			if (c != '.' || si >= 3) break;
;;;1242   			sfn[i++] = c;
;;;1243   		}
;;;1244   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;1245   		*path = &p[si];									/* Rerurn pointer to the next segment */
;;;1246   		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1247   		return FR_OK;
;;;1248   	}
;;;1249   #endif
;;;1250   	for (;;) {
;;;1251   		c = p[si++];
00072a  9801              LDR      r0,[sp,#4]
00072c  9901              LDR      r1,[sp,#4]
00072e  1c40              ADDS     r0,r0,#1
000730  9001              STR      r0,[sp,#4]
000732  9800              LDR      r0,[sp,#0]
000734  5c44              LDRB     r4,[r0,r1]
;;;1252   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
000736  2c20              CMP      r4,#0x20
000738  d90a              BLS      |L1.1872|
00073a  2c2f              CMP      r4,#0x2f
00073c  d008              BEQ      |L1.1872|
00073e  2c5c              CMP      r4,#0x5c
000740  d006              BEQ      |L1.1872|
;;;1253   		if (c == '.' || i >= ni) {
000742  2c2e              CMP      r4,#0x2e
000744  d001              BEQ      |L1.1866|
000746  42be              CMP      r6,r7
000748  db15              BLT      |L1.1910|
                  |L1.1866|
;;;1254   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
00074a  2f08              CMP      r7,#8
00074c  d10b              BNE      |L1.1894|
00074e  e008              B        |L1.1890|
                  |L1.1872|
;;;1255   			i = 8; ni = 11;
;;;1256   			b <<= 2; continue;
;;;1257   		}
;;;1258   		if (c >= 0x80) {				/* Extended char */
;;;1259   #ifdef _EXCVT
;;;1260   			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
;;;1261   #else
;;;1262   			b |= 3;						/* Eliminate NT flag if ext char is exist */
;;;1263   #if !_DF1S	/* ASCII only cfg */
;;;1264   			return FR_INVALID_NAME;
;;;1265   #endif
;;;1266   #endif
;;;1267   		}
;;;1268   		if (IsDBCS1(c)) {				/* DBC 1st byte? */
;;;1269   			d = p[si++];				/* Get 2nd byte */
;;;1270   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1271   				return FR_INVALID_NAME;
;;;1272   			sfn[i++] = c;
;;;1273   			sfn[i++] = d;
;;;1274   		} else {						/* Single byte code */
;;;1275   			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;1276   				return FR_INVALID_NAME;
;;;1277   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;1278   				b |= 2;
;;;1279   			} else {
;;;1280   				if (IsLower(c)) {		/* ASCII small capital? */
;;;1281   					b |= 1; c -= 0x20;
;;;1282   				}
;;;1283   			}
;;;1284   			sfn[i++] = c;
;;;1285   		}
;;;1286   	}
;;;1287   	*path = &p[si];						/* Rerurn pointer to the next segment */
000750  9900              LDR      r1,[sp,#0]
000752  9801              LDR      r0,[sp,#4]
000754  1809              ADDS     r1,r1,r0
000756  9804              LDR      r0,[sp,#0x10]
000758  6001              STR      r1,[r0,#0]
;;;1288   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
00075a  2c20              CMP      r4,#0x20
00075c  d82e              BHI      |L1.1980|
00075e  2004              MOVS     r0,#4
000760  e02d              B        |L1.1982|
                  |L1.1890|
000762  2c2e              CMP      r4,#0x2e              ;1254
000764  d002              BEQ      |L1.1900|
                  |L1.1894|
000766  2006              MOVS     r0,#6                 ;1254
                  |L1.1896|
;;;1289   
;;;1290   	if (!i) return FR_INVALID_NAME;		/* Reject null string */
;;;1291   	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
;;;1292   
;;;1293   	if (ni == 8) b <<= 2;
;;;1294   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1295   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1296   
;;;1297   	sfn[NS] = c;		/* Store NT flag, File name is created */
;;;1298   
;;;1299   	return FR_OK;
;;;1300   #endif
;;;1301   }
000768  b005              ADD      sp,sp,#0x14
00076a  bdf0              POP      {r4-r7,pc}
                  |L1.1900|
00076c  2608              MOVS     r6,#8                 ;1255
00076e  270b              MOVS     r7,#0xb               ;1255
000770  06a8              LSLS     r0,r5,#26             ;1256
000772  0e05              LSRS     r5,r0,#24             ;1256
000774  e7d9              B        |L1.1834|
                  |L1.1910|
000776  2c80              CMP      r4,#0x80              ;1258
000778  d303              BCC      |L1.1922|
00077a  4815              LDR      r0,|L1.2000|
00077c  1900              ADDS     r0,r0,r4              ;1260
00077e  3880              SUBS     r0,r0,#0x80           ;1260
000780  7804              LDRB     r4,[r0,#0]            ;1260
                  |L1.1922|
000782  a014              ADR      r0,|L1.2004|
000784  0021              MOVS     r1,r4                 ;1275
000786  f7fffffe          BL       chk_chr
00078a  2800              CMP      r0,#0                 ;1275
00078c  d001              BEQ      |L1.1938|
00078e  2006              MOVS     r0,#6                 ;1276
000790  e7ea              B        |L1.1896|
                  |L1.1938|
000792  0020              MOVS     r0,r4                 ;1277
000794  3841              SUBS     r0,r0,#0x41           ;1277
000796  2819              CMP      r0,#0x19              ;1277
000798  d802              BHI      |L1.1952|
00079a  2002              MOVS     r0,#2                 ;1278
00079c  4305              ORRS     r5,r5,r0              ;1278
00079e  e008              B        |L1.1970|
                  |L1.1952|
0007a0  0020              MOVS     r0,r4                 ;1280
0007a2  3861              SUBS     r0,r0,#0x61           ;1280
0007a4  2819              CMP      r0,#0x19              ;1280
0007a6  d804              BHI      |L1.1970|
0007a8  2001              MOVS     r0,#1                 ;1281
0007aa  4305              ORRS     r5,r5,r0              ;1281
0007ac  3c20              SUBS     r4,r4,#0x20           ;1281
0007ae  0624              LSLS     r4,r4,#24             ;1281
0007b0  0e24              LSRS     r4,r4,#24             ;1281
                  |L1.1970|
0007b2  9902              LDR      r1,[sp,#8]            ;1284
0007b4  0030              MOVS     r0,r6                 ;1284
0007b6  1c76              ADDS     r6,r6,#1              ;1284
0007b8  540c              STRB     r4,[r1,r0]            ;1284
0007ba  e7b6              B        |L1.1834|
                  |L1.1980|
0007bc  2000              MOVS     r0,#0                 ;1288
                  |L1.1982|
0007be  2e00              CMP      r6,#0                 ;1290
0007c0  d00e              BEQ      |L1.2016|
0007c2  9902              LDR      r1,[sp,#8]            ;1291
0007c4  7809              LDRB     r1,[r1,#0]            ;1291
0007c6  29e5              CMP      r1,#0xe5              ;1291
0007c8  d00c              BEQ      |L1.2020|
0007ca  e00e              B        |L1.2026|
                  |L1.1996|
                          DCD      0x0fffffff
                  |L1.2000|
                          DCD      ||.constdata||
                  |L1.2004|
0007d4  20222a2b          DCB      " ""*+,[=]|",127,0
0007d8  2c5b3d5d
0007dc  7c7f00  
0007df  00                DCB      0
                  |L1.2016|
0007e0  2006              MOVS     r0,#6                 ;1290
0007e2  e7c1              B        |L1.1896|
                  |L1.2020|
0007e4  9902              LDR      r1,[sp,#8]            ;1291
0007e6  2205              MOVS     r2,#5                 ;1291
0007e8  700a              STRB     r2,[r1,#0]            ;1291
                  |L1.2026|
0007ea  2f08              CMP      r7,#8                 ;1293
0007ec  d101              BNE      |L1.2034|
0007ee  06a9              LSLS     r1,r5,#26             ;1293
0007f0  0e0d              LSRS     r5,r1,#24             ;1293
                  |L1.2034|
0007f2  07a9              LSLS     r1,r5,#30             ;1294
0007f4  0f89              LSRS     r1,r1,#30             ;1294
0007f6  2901              CMP      r1,#1                 ;1294
0007f8  d101              BNE      |L1.2046|
0007fa  2110              MOVS     r1,#0x10              ;1294
0007fc  4308              ORRS     r0,r0,r1              ;1294
                  |L1.2046|
0007fe  0729              LSLS     r1,r5,#28             ;1295
000800  0f89              LSRS     r1,r1,#30             ;1295
000802  2901              CMP      r1,#1                 ;1295
000804  d101              BNE      |L1.2058|
000806  2108              MOVS     r1,#8                 ;1295
000808  4308              ORRS     r0,r0,r1              ;1295
                  |L1.2058|
00080a  9902              LDR      r1,[sp,#8]            ;1297
00080c  72c8              STRB     r0,[r1,#0xb]          ;1297
00080e  2000              MOVS     r0,#0                 ;1299
000810  e7aa              B        |L1.1896|
;;;1302   
                          ENDP

                  get_fileinfo PROC
;;;1310   static
;;;1311   void get_fileinfo (		/* No return code */
000812  b530              PUSH     {r4,r5,lr}
;;;1312   	DIR *dj,			/* Pointer to the directory object */
;;;1313   	FILINFO *fno	 	/* Pointer to the file information to be filled */
;;;1314   )
;;;1315   {
;;;1316   	int i;
;;;1317   	BYTE c, nt, *dir;
;;;1318   	char *p;
;;;1319   
;;;1320   
;;;1321   	p = fno->fname;
000814  000a              MOVS     r2,r1
000816  3209              ADDS     r2,r2,#9
;;;1322   	if (dj->sect) {
000818  6903              LDR      r3,[r0,#0x10]
00081a  2b00              CMP      r3,#0
00081c  d032              BEQ      |L1.2180|
;;;1323   		dir = dj->dir;
00081e  6940              LDR      r0,[r0,#0x14]
;;;1324   		nt = dir[DIR_NTres];		/* NT flag */
;;;1325   		for (i = 0; i < 8; i++) {	/* Copy name body */
000820  2400              MOVS     r4,#0
                  |L1.2082|
;;;1326   			c = dir[i];
000822  5d03              LDRB     r3,[r0,r4]
;;;1327   			if (c == ' ') break;
000824  2b20              CMP      r3,#0x20
000826  d007              BEQ      |L1.2104|
;;;1328   			if (c == 0x05) c = 0xE5;
000828  2b05              CMP      r3,#5
00082a  d100              BNE      |L1.2094|
00082c  23e5              MOVS     r3,#0xe5
                  |L1.2094|
;;;1329   			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
;;;1330   			*p++ = c;
00082e  7013              STRB     r3,[r2,#0]
000830  1c52              ADDS     r2,r2,#1
000832  1c64              ADDS     r4,r4,#1              ;1325
000834  2c08              CMP      r4,#8                 ;1325
000836  dbf4              BLT      |L1.2082|
                  |L1.2104|
;;;1331   		}
;;;1332   		if (dir[8] != ' ') {		/* Copy name extension */
000838  7a03              LDRB     r3,[r0,#8]
00083a  2b20              CMP      r3,#0x20
00083c  d00b              BEQ      |L1.2134|
;;;1333   			*p++ = '.';
00083e  232e              MOVS     r3,#0x2e
000840  7013              STRB     r3,[r2,#0]
000842  1c52              ADDS     r2,r2,#1
;;;1334   			for (i = 8; i < 11; i++) {
000844  2308              MOVS     r3,#8
                  |L1.2118|
;;;1335   				c = dir[i];
000846  5cc4              LDRB     r4,[r0,r3]
;;;1336   				if (c == ' ') break;
000848  2c20              CMP      r4,#0x20
00084a  d004              BEQ      |L1.2134|
;;;1337   				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
;;;1338   				*p++ = c;
00084c  7014              STRB     r4,[r2,#0]
00084e  1c52              ADDS     r2,r2,#1
000850  1c5b              ADDS     r3,r3,#1              ;1334
000852  2b0b              CMP      r3,#0xb               ;1334
000854  dbf7              BLT      |L1.2118|
                  |L1.2134|
;;;1339   			}
;;;1340   		}
;;;1341   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
000856  7ac3              LDRB     r3,[r0,#0xb]
000858  720b              STRB     r3,[r1,#8]
;;;1342   		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
00085a  7fc4              LDRB     r4,[r0,#0x1f]
00085c  7f03              LDRB     r3,[r0,#0x1c]
00085e  7f45              LDRB     r5,[r0,#0x1d]
000860  0624              LSLS     r4,r4,#24
000862  4323              ORRS     r3,r3,r4
000864  7f84              LDRB     r4,[r0,#0x1e]
000866  0424              LSLS     r4,r4,#16
000868  022d              LSLS     r5,r5,#8
00086a  432c              ORRS     r4,r4,r5
00086c  4323              ORRS     r3,r3,r4
00086e  600b              STR      r3,[r1,#0]
;;;1343   		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
000870  7e43              LDRB     r3,[r0,#0x19]
000872  7e04              LDRB     r4,[r0,#0x18]
000874  021b              LSLS     r3,r3,#8
000876  4323              ORRS     r3,r3,r4
000878  808b              STRH     r3,[r1,#4]
;;;1344   		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
00087a  7dc3              LDRB     r3,[r0,#0x17]
00087c  7d80              LDRB     r0,[r0,#0x16]
00087e  021b              LSLS     r3,r3,#8
000880  4303              ORRS     r3,r3,r0
000882  80cb              STRH     r3,[r1,#6]
                  |L1.2180|
;;;1345   	}
;;;1346   	*p = 0;
000884  2000              MOVS     r0,#0
000886  7010              STRB     r0,[r2,#0]
;;;1347   
;;;1348   #if _USE_LFN
;;;1349   	if (fno->lfname) {
;;;1350   		XCHAR *tp = fno->lfname;
;;;1351   		WCHAR w, *lfn;
;;;1352   
;;;1353   		i = 0;
;;;1354   		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
;;;1355   			lfn = dj->lfn;
;;;1356   			while ((w = *lfn++) != 0) {			/* Get an LFN char */
;;;1357   #if !_LFN_UNICODE
;;;1358   				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
;;;1359   				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
;;;1360   				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
;;;1361   					tp[i++] = (XCHAR)(w >> 8);
;;;1362   #endif
;;;1363   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overrun, no LFN */
;;;1364   				tp[i++] = (XCHAR)w;
;;;1365   			}
;;;1366   		}
;;;1367   		tp[i] = 0;	/* Terminator */
;;;1368   	}
;;;1369   #endif
;;;1370   }
000888  bd30              POP      {r4,r5,pc}
;;;1371   #endif /* _FS_MINIMIZE <= 1 */
                          ENDP

                  follow_path PROC
;;;1380   static
;;;1381   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
00088a  b573              PUSH     {r0,r1,r4-r6,lr}
;;;1382   	DIR *dj,			/* Directory object to return last directory and found object */
;;;1383   	const XCHAR *path	/* Full-path string to find a file or directory */
;;;1384   )
;;;1385   {
00088c  0004              MOVS     r4,r0
;;;1386   	FRESULT res;
;;;1387   	BYTE *dir, last;
;;;1388   
;;;1389   
;;;1390   	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
00088e  e001              B        |L1.2196|
                  |L1.2192|
000890  1c40              ADDS     r0,r0,#1
000892  9001              STR      r0,[sp,#4]
                  |L1.2196|
000894  9801              LDR      r0,[sp,#4]
000896  7801              LDRB     r1,[r0,#0]
000898  2920              CMP      r1,#0x20
00089a  d0f9              BEQ      |L1.2192|
;;;1391   #if _FS_RPATH
;;;1392   	if (*path == '/' || *path == '\\') { /* There is a heading separator */
;;;1393   		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
;;;1394   	} else {							/* No heading saparator */
;;;1395   		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
;;;1396   	}
;;;1397   #else
;;;1398   	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
00089c  9901              LDR      r1,[sp,#4]
00089e  7809              LDRB     r1,[r1,#0]
0008a0  292f              CMP      r1,#0x2f
0008a2  d001              BEQ      |L1.2216|
0008a4  295c              CMP      r1,#0x5c
0008a6  d101              BNE      |L1.2220|
                  |L1.2216|
;;;1399   		path++;
0008a8  1c40              ADDS     r0,r0,#1
0008aa  9001              STR      r0,[sp,#4]
                  |L1.2220|
;;;1400   	dj->sclust = 0;						/* Start from the root dir */
0008ac  2500              MOVS     r5,#0
0008ae  60a5              STR      r5,[r4,#8]
;;;1401   #endif
;;;1402   
;;;1403   	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
0008b0  9801              LDR      r0,[sp,#4]
0008b2  7800              LDRB     r0,[r0,#0]
0008b4  2820              CMP      r0,#0x20
0008b6  d205              BCS      |L1.2244|
;;;1404   		res = dir_seek(dj, 0);
0008b8  2100              MOVS     r1,#0
0008ba  0020              MOVS     r0,r4
0008bc  f7fffffe          BL       dir_seek
;;;1405   		dj->dir = NULL;
0008c0  6165              STR      r5,[r4,#0x14]
                  |L1.2242|
;;;1406   
;;;1407   	} else {							/* Follow path */
;;;1408   		for (;;) {
;;;1409   			res = create_name(dj, &path);	/* Get a segment */
;;;1410   			if (res != FR_OK) break;
;;;1411   			res = dir_find(dj);				/* Find it */
;;;1412   			last = *(dj->fn+NS) & NS_LAST;
;;;1413   			if (res != FR_OK) {				/* Could not find the object */
;;;1414   				if (res == FR_NO_FILE && !last)
;;;1415   					res = FR_NO_PATH;
;;;1416   				break;
;;;1417   			}
;;;1418   			if (last) break;				/* Last segment match. Function completed. */
;;;1419   			dir = dj->dir;					/* There is next segment. Follow the sub directory */
;;;1420   			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
;;;1421   				res = FR_NO_PATH; break;
;;;1422   			}
;;;1423   			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
;;;1424   		}
;;;1425   	}
;;;1426   
;;;1427   	return res;
;;;1428   }
0008c2  bd7c              POP      {r2-r6,pc}
                  |L1.2244|
0008c4  0020              MOVS     r0,r4                 ;1409
0008c6  a901              ADD      r1,sp,#4              ;1409
0008c8  f7fffffe          BL       create_name
0008cc  2800              CMP      r0,#0                 ;1410
0008ce  d1f8              BNE      |L1.2242|
0008d0  0020              MOVS     r0,r4                 ;1411
0008d2  f7fffffe          BL       dir_find
0008d6  69a1              LDR      r1,[r4,#0x18]         ;1412
0008d8  2204              MOVS     r2,#4                 ;1412
0008da  7ac9              LDRB     r1,[r1,#0xb]          ;1412
0008dc  4011              ANDS     r1,r1,r2              ;1412
0008de  2800              CMP      r0,#0                 ;1413
0008e0  d005              BEQ      |L1.2286|
0008e2  2804              CMP      r0,#4                 ;1414
0008e4  d1ed              BNE      |L1.2242|
0008e6  2900              CMP      r1,#0                 ;1414
0008e8  d1eb              BNE      |L1.2242|
0008ea  2005              MOVS     r0,#5                 ;1415
                  |L1.2284|
0008ec  bd7c              POP      {r2-r6,pc}
                  |L1.2286|
0008ee  2900              CMP      r1,#0                 ;1418
0008f0  d1fc              BNE      |L1.2284|
0008f2  6960              LDR      r0,[r4,#0x14]         ;1419
0008f4  7ac1              LDRB     r1,[r0,#0xb]          ;1420
0008f6  06c9              LSLS     r1,r1,#27             ;1420
0008f8  d401              BMI      |L1.2302|
0008fa  2005              MOVS     r0,#5                 ;1421
0008fc  bd7c              POP      {r2-r6,pc}
                  |L1.2302|
0008fe  7d41              LDRB     r1,[r0,#0x15]         ;1423
000900  7d02              LDRB     r2,[r0,#0x14]         ;1423
000902  0209              LSLS     r1,r1,#8              ;1423
000904  4311              ORRS     r1,r1,r2              ;1423
000906  7ec2              LDRB     r2,[r0,#0x1b]         ;1423
000908  7e80              LDRB     r0,[r0,#0x1a]         ;1423
00090a  0409              LSLS     r1,r1,#16             ;1423
00090c  0212              LSLS     r2,r2,#8              ;1423
00090e  4311              ORRS     r1,r1,r2              ;1423
000910  4301              ORRS     r1,r1,r0              ;1423
000912  60a1              STR      r1,[r4,#8]            ;1423
000914  e7d6              B        |L1.2244|
;;;1429   
                          ENDP

                  check_fs PROC
;;;1437   static
;;;1438   BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
000916  b510              PUSH     {r4,lr}
;;;1439   	FATFS *fs,	/* File system object */
;;;1440   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;1441   )
;;;1442   {
000918  0004              MOVS     r4,r0
;;;1443   	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
00091a  000a              MOVS     r2,r1
00091c  0021              MOVS     r1,r4
00091e  7860              LDRB     r0,[r4,#1]
000920  2301              MOVS     r3,#1
000922  3130              ADDS     r1,r1,#0x30
000924  f7fffffe          BL       disk_read
000928  2800              CMP      r0,#0
00092a  d001              BEQ      |L1.2352|
;;;1444   		return 3;
00092c  2003              MOVS     r0,#3
;;;1445   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
;;;1446   		return 2;
;;;1447   
;;;1448   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;1449   		return 0;
;;;1450   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
;;;1451   		return 0;
;;;1452   
;;;1453   	return 1;
;;;1454   }
00092e  bd10              POP      {r4,pc}
                  |L1.2352|
000930  2011              MOVS     r0,#0x11              ;1445
000932  0140              LSLS     r0,r0,#5              ;1445
000934  1820              ADDS     r0,r4,r0              ;1445
000936  7bc1              LDRB     r1,[r0,#0xf]          ;1445
000938  7b80              LDRB     r0,[r0,#0xe]          ;1445
00093a  0209              LSLS     r1,r1,#8              ;1445
00093c  4301              ORRS     r1,r1,r0              ;1445
00093e  48f7              LDR      r0,|L1.3356|
000940  4281              CMP      r1,r0                 ;1445
000942  d001              BEQ      |L1.2376|
000944  2002              MOVS     r0,#2                 ;1446
000946  bd10              POP      {r4,pc}
                  |L1.2376|
000948  0020              MOVS     r0,r4                 ;1448
00094a  3060              ADDS     r0,r0,#0x60           ;1448
00094c  7a42              LDRB     r2,[r0,#9]            ;1448
00094e  7981              LDRB     r1,[r0,#6]            ;1448
000950  0612              LSLS     r2,r2,#24             ;1448
000952  4311              ORRS     r1,r1,r2              ;1448
000954  7a02              LDRB     r2,[r0,#8]            ;1448
000956  79c0              LDRB     r0,[r0,#7]            ;1448
000958  0412              LSLS     r2,r2,#16             ;1448
00095a  0200              LSLS     r0,r0,#8              ;1448
00095c  4302              ORRS     r2,r2,r0              ;1448
00095e  4311              ORRS     r1,r1,r2              ;1448
000960  0208              LSLS     r0,r1,#8              ;1448
000962  49ef              LDR      r1,|L1.3360|
000964  4288              CMP      r0,r1                 ;1448
000966  d101              BNE      |L1.2412|
000968  2000              MOVS     r0,#0                 ;1449
00096a  bd10              POP      {r4,pc}
                  |L1.2412|
00096c  3480              ADDS     r4,r4,#0x80           ;1450
00096e  7962              LDRB     r2,[r4,#5]            ;1450
000970  78a0              LDRB     r0,[r4,#2]            ;1450
000972  78e3              LDRB     r3,[r4,#3]            ;1450
000974  0612              LSLS     r2,r2,#24             ;1450
000976  4310              ORRS     r0,r0,r2              ;1450
000978  7922              LDRB     r2,[r4,#4]            ;1450
00097a  021b              LSLS     r3,r3,#8              ;1450
00097c  0412              LSLS     r2,r2,#16             ;1450
00097e  431a              ORRS     r2,r2,r3              ;1450
000980  4310              ORRS     r0,r0,r2              ;1450
000982  0200              LSLS     r0,r0,#8              ;1450
000984  4288              CMP      r0,r1                 ;1450
000986  d101              BNE      |L1.2444|
000988  2000              MOVS     r0,#0                 ;1451
00098a  bd10              POP      {r4,pc}
                  |L1.2444|
00098c  2001              MOVS     r0,#1                 ;1453
00098e  bd10              POP      {r4,pc}
;;;1455   
                          ENDP

                  chk_mounted PROC
;;;1463   
;;;1464   FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
000990  b5f0              PUSH     {r4-r7,lr}
;;;1465   	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
;;;1466   	FATFS **rfs,		/* Pointer to pointer to the found file system object */
;;;1467   	BYTE chk_wp			/* !=0: Check media write protection for write access */
;;;1468   )
;;;1469   {
000992  000f              MOVS     r7,r1
000994  0015              MOVS     r5,r2
000996  b085              SUB      sp,sp,#0x14
;;;1470   	BYTE fmt, *tbl;
;;;1471   	UINT vol;
;;;1472   	DSTATUS stat;
;;;1473   	DWORD bsect, fsize, tsect, mclst;
;;;1474   	const XCHAR *p = *path;
000998  6801              LDR      r1,[r0,#0]
;;;1475   	FATFS *fs;
;;;1476   
;;;1477   	/* Get logical drive number from the path name */
;;;1478   	vol = p[0] - '0';				/* Is there a drive number? */
00099a  780b              LDRB     r3,[r1,#0]
00099c  3b30              SUBS     r3,r3,#0x30
;;;1479   	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
00099e  2b09              CMP      r3,#9
0009a0  d802              BHI      |L1.2472|
0009a2  784a              LDRB     r2,[r1,#1]
0009a4  2a3a              CMP      r2,#0x3a
0009a6  d004              BEQ      |L1.2482|
                  |L1.2472|
;;;1480   		p += 2; *path = p;			/* Return pointer to the path name */
;;;1481   	} else {						/* No drive number is given */
;;;1482   #if _FS_RPATH
;;;1483   		vol = Drive;				/* Use current drive */
;;;1484   #else
;;;1485   		vol = 0;					/* Use drive 0 */
0009a8  2300              MOVS     r3,#0
                  |L1.2474|
;;;1486   #endif
;;;1487   	}
;;;1488   
;;;1489   	/* Check if the logical drive is valid or not */
;;;1490   	if (vol >= _DRIVES) 			/* Is the drive number valid? */
0009aa  2b00              CMP      r3,#0
0009ac  d004              BEQ      |L1.2488|
;;;1491   		return FR_INVALID_DRIVE;
0009ae  200b              MOVS     r0,#0xb
;;;1492   	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
;;;1493   	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
;;;1494   
;;;1495   	ENTER_FF(fs);					/* Lock file system */
;;;1496   
;;;1497   	if (fs->fs_type) {				/* If the logical drive has been mounted */
;;;1498   		stat = disk_status(fs->drive);
;;;1499   		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
;;;1500   #if !_FS_READONLY
;;;1501   			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;1502   				return FR_WRITE_PROTECTED;
;;;1503   #endif
;;;1504   			return FR_OK;			/* The file system object is valid */
;;;1505   		}
;;;1506   	}
;;;1507   
;;;1508   	/* The logical drive must be mounted. Following code attempts to mount the volume */
;;;1509   
;;;1510   	fs->fs_type = 0;					/* Clear the file system object */
;;;1511   	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
;;;1512   	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
;;;1513   	if (stat & STA_NOINIT)				/* Check if the drive is ready */
;;;1514   		return FR_NOT_READY;
;;;1515   #if _MAX_SS != 512						/* Get disk sector size if needed */
;;;1516   	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
;;;1517   		return FR_NO_FILESYSTEM;
;;;1518   #endif
;;;1519   #if !_FS_READONLY
;;;1520   	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;1521   		return FR_WRITE_PROTECTED;
;;;1522   #endif
;;;1523   	/* Search FAT partition on the drive */
;;;1524   	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
;;;1525   	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
;;;1526   		/* Check a partition listed in top of the partition table */
;;;1527   		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
;;;1528   		if (tbl[4]) {									/* Is the partition existing? */
;;;1529   			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
;;;1530   			fmt = check_fs(fs, bsect);					/* Check the partition */
;;;1531   		}
;;;1532   	}
;;;1533   	if (fmt == 3) return FR_DISK_ERR;
;;;1534   	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
;;;1535   		return FR_NO_FILESYSTEM;
;;;1536   
;;;1537   	/* Initialize the file system object */
;;;1538   	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
;;;1539   	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
;;;1540   	fs->sects_fat = fsize;
;;;1541   	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
;;;1542   	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
;;;1543   	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
;;;1544   	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
;;;1545   	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
;;;1546   	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
;;;1547   	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
;;;1548   	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
;;;1549   		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
;;;1550   		) / fs->csize + 2;
;;;1551   
;;;1552   	fmt = FS_FAT12;										/* Determine the FAT sub type */
;;;1553   	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
;;;1554   	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
;;;1555   
;;;1556   	if (fmt == FS_FAT32)
;;;1557   		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
;;;1558   	else
;;;1559   		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
;;;1560   	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
;;;1561   
;;;1562   #if !_FS_READONLY
;;;1563   	/* Initialize allocation information */
;;;1564   	fs->free_clust = 0xFFFFFFFF;
;;;1565   	fs->wflag = 0;
;;;1566   	/* Get fsinfo if needed */
;;;1567   	if (fmt == FS_FAT32) {
;;;1568   	 	fs->fsi_flag = 0;
;;;1569   		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
;;;1570   		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
;;;1571   			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
;;;1572   			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
;;;1573   			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
;;;1574   			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
;;;1575   			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
;;;1576   		}
;;;1577   	}
;;;1578   #endif
;;;1579   	fs->fs_type = fmt;		/* FAT sub-type */
;;;1580   	fs->winsect = 0;		/* Invalidate sector cache */
;;;1581   #if _FS_RPATH
;;;1582   	fs->cdir = 0;			/* Current directory (root dir) */
;;;1583   #endif
;;;1584   	fs->id = ++Fsid;		/* File system mount ID */
;;;1585   
;;;1586   	return FR_OK;
;;;1587   }
0009b0  e6da              B        |L1.1896|
                  |L1.2482|
0009b2  1c89              ADDS     r1,r1,#2              ;1480
0009b4  6001              STR      r1,[r0,#0]            ;1480
0009b6  e7f8              B        |L1.2474|
                  |L1.2488|
0009b8  48da              LDR      r0,|L1.3364|
0009ba  6804              LDR      r4,[r0,#0]            ;1492
0009bc  603c              STR      r4,[r7,#0]            ;1492
0009be  2c00              CMP      r4,#0                 ;1493
0009c0  d010              BEQ      |L1.2532|
0009c2  7820              LDRB     r0,[r4,#0]            ;1497
0009c4  2800              CMP      r0,#0                 ;1497
0009c6  d004              BEQ      |L1.2514|
0009c8  7860              LDRB     r0,[r4,#1]            ;1498
0009ca  f7fffffe          BL       disk_status
0009ce  07c1              LSLS     r1,r0,#31             ;1499
0009d0  d00a              BEQ      |L1.2536|
                  |L1.2514|
0009d2  2000              MOVS     r0,#0                 ;1510
0009d4  7020              STRB     r0,[r4,#0]            ;1510
0009d6  7060              STRB     r0,[r4,#1]            ;1511
0009d8  f7fffffe          BL       disk_initialize
0009dc  07c1              LSLS     r1,r0,#31             ;1513
0009de  d00b              BEQ      |L1.2552|
0009e0  2003              MOVS     r0,#3                 ;1514
0009e2  e6c1              B        |L1.1896|
                  |L1.2532|
0009e4  200c              MOVS     r0,#0xc               ;1493
0009e6  e6bf              B        |L1.1896|
                  |L1.2536|
0009e8  2d00              CMP      r5,#0                 ;1501
0009ea  d003              BEQ      |L1.2548|
0009ec  0740              LSLS     r0,r0,#29             ;1501
0009ee  d501              BPL      |L1.2548|
0009f0  200a              MOVS     r0,#0xa               ;1502
                  |L1.2546|
0009f2  e6b9              B        |L1.1896|
                  |L1.2548|
0009f4  2000              MOVS     r0,#0                 ;1504
                  |L1.2550|
0009f6  e6b7              B        |L1.1896|
                  |L1.2552|
0009f8  2d00              CMP      r5,#0                 ;1520
0009fa  d003              BEQ      |L1.2564|
0009fc  0740              LSLS     r0,r0,#29             ;1520
0009fe  d501              BPL      |L1.2564|
000a00  200a              MOVS     r0,#0xa               ;1521
000a02  e6b1              B        |L1.1896|
                  |L1.2564|
000a04  2100              MOVS     r1,#0                 ;1524
000a06  0020              MOVS     r0,r4                 ;1524
000a08  9101              STR      r1,[sp,#4]            ;1524
000a0a  f7fffffe          BL       check_fs
000a0e  0001              MOVS     r1,r0                 ;1524
000a10  2901              CMP      r1,#1                 ;1525
000a12  d115              BNE      |L1.2624|
000a14  0020              MOVS     r0,r4                 ;1527
000a16  30ff              ADDS     r0,r0,#0xff           ;1527
000a18  30ef              ADDS     r0,r0,#0xef           ;1527
000a1a  7902              LDRB     r2,[r0,#4]            ;1528
000a1c  2a00              CMP      r2,#0                 ;1528
000a1e  d00f              BEQ      |L1.2624|
000a20  7ac2              LDRB     r2,[r0,#0xb]          ;1529
000a22  7a01              LDRB     r1,[r0,#8]            ;1529
000a24  0612              LSLS     r2,r2,#24             ;1529
000a26  4311              ORRS     r1,r1,r2              ;1529
000a28  7a82              LDRB     r2,[r0,#0xa]          ;1529
000a2a  7a40              LDRB     r0,[r0,#9]            ;1529
000a2c  0412              LSLS     r2,r2,#16             ;1529
000a2e  0200              LSLS     r0,r0,#8              ;1529
000a30  4302              ORRS     r2,r2,r0              ;1529
000a32  4311              ORRS     r1,r1,r2              ;1529
000a34  9101              STR      r1,[sp,#4]            ;1529
000a36  9901              LDR      r1,[sp,#4]            ;1530
000a38  0020              MOVS     r0,r4                 ;1530
000a3a  f7fffffe          BL       check_fs
000a3e  0001              MOVS     r1,r0                 ;1530
                  |L1.2624|
000a40  2903              CMP      r1,#3                 ;1533
000a42  d002              BEQ      |L1.2634|
000a44  2900              CMP      r1,#0                 ;1534
000a46  d10c              BNE      |L1.2658|
000a48  e001              B        |L1.2638|
                  |L1.2634|
000a4a  2001              MOVS     r0,#1                 ;1533
000a4c  e68c              B        |L1.1896|
                  |L1.2638|
000a4e  0026              MOVS     r6,r4                 ;1534
000a50  3620              ADDS     r6,r6,#0x20           ;1534
000a52  7f30              LDRB     r0,[r6,#0x1c]         ;1534
000a54  7ef1              LDRB     r1,[r6,#0x1b]         ;1534
000a56  0200              LSLS     r0,r0,#8              ;1534
000a58  4308              ORRS     r0,r0,r1              ;1534
000a5a  1fc1              SUBS     r1,r0,#7              ;1534
000a5c  39ff              SUBS     r1,r1,#0xff           ;1534
000a5e  39fa              SUBS     r1,r1,#0xfa           ;1534
000a60  d001              BEQ      |L1.2662|
                  |L1.2658|
000a62  200d              MOVS     r0,#0xd               ;1535
000a64  e680              B        |L1.1896|
                  |L1.2662|
000a66  0025              MOVS     r5,r4                 ;1538
000a68  3540              ADDS     r5,r5,#0x40           ;1538
000a6a  79e8              LDRB     r0,[r5,#7]            ;1538
000a6c  79a9              LDRB     r1,[r5,#6]            ;1538
000a6e  0200              LSLS     r0,r0,#8              ;1538
000a70  4308              ORRS     r0,r0,r1              ;1538
000a72  2800              CMP      r0,#0                 ;1539
000a74  d109              BNE      |L1.2698|
000a76  7de9              LDRB     r1,[r5,#0x17]         ;1539
000a78  7d28              LDRB     r0,[r5,#0x14]         ;1539
000a7a  7d6a              LDRB     r2,[r5,#0x15]         ;1539
000a7c  0609              LSLS     r1,r1,#24             ;1539
000a7e  4308              ORRS     r0,r0,r1              ;1539
000a80  7da9              LDRB     r1,[r5,#0x16]         ;1539
000a82  0409              LSLS     r1,r1,#16             ;1539
000a84  0212              LSLS     r2,r2,#8              ;1539
000a86  4311              ORRS     r1,r1,r2              ;1539
000a88  4308              ORRS     r0,r0,r1              ;1539
                  |L1.2698|
000a8a  61a0              STR      r0,[r4,#0x18]         ;1540
000a8c  7829              LDRB     r1,[r5,#0]            ;1541
000a8e  70e1              STRB     r1,[r4,#3]            ;1541
000a90  4341              MULS     r1,r0,r1              ;1542
000a92  9100              STR      r1,[sp,#0]            ;1542
000a94  7ff0              LDRB     r0,[r6,#0x1f]         ;1543
000a96  7fb1              LDRB     r1,[r6,#0x1e]         ;1543
000a98  0200              LSLS     r0,r0,#8              ;1543
000a9a  4308              ORRS     r0,r0,r1              ;1543
000a9c  9901              LDR      r1,[sp,#4]            ;1543
000a9e  1841              ADDS     r1,r0,r1              ;1543
000aa0  6221              STR      r1,[r4,#0x20]         ;1543
000aa2  9103              STR      r1,[sp,#0xc]          ;1543
000aa4  7f71              LDRB     r1,[r6,#0x1d]         ;1544
000aa6  468c              MOV      r12,r1                ;1544
000aa8  70a1              STRB     r1,[r4,#2]            ;1544
000aaa  78a9              LDRB     r1,[r5,#2]            ;1545
000aac  786a              LDRB     r2,[r5,#1]            ;1545
000aae  0209              LSLS     r1,r1,#8              ;1545
000ab0  4311              ORRS     r1,r1,r2              ;1545
000ab2  8121              STRH     r1,[r4,#8]            ;1545
000ab4  792a              LDRB     r2,[r5,#4]            ;1546
000ab6  78eb              LDRB     r3,[r5,#3]            ;1546
000ab8  0212              LSLS     r2,r2,#8              ;1546
000aba  431a              ORRS     r2,r2,r3              ;1546
000abc  2a00              CMP      r2,#0                 ;1547
000abe  d109              BNE      |L1.2772|
000ac0  7ceb              LDRB     r3,[r5,#0x13]         ;1547
000ac2  7c2a              LDRB     r2,[r5,#0x10]         ;1547
000ac4  7c6f              LDRB     r7,[r5,#0x11]         ;1547
000ac6  061b              LSLS     r3,r3,#24             ;1547
000ac8  431a              ORRS     r2,r2,r3              ;1547
000aca  7cab              LDRB     r3,[r5,#0x12]         ;1547
000acc  041b              LSLS     r3,r3,#16             ;1547
000ace  023f              LSLS     r7,r7,#8              ;1547
000ad0  433b              ORRS     r3,r3,r7              ;1547
000ad2  431a              ORRS     r2,r2,r3              ;1547
                  |L1.2772|
000ad4  1a12              SUBS     r2,r2,r0              ;1548
000ad6  9800              LDR      r0,[sp,#0]            ;1548
000ad8  1a12              SUBS     r2,r2,r0              ;1548
000ada  0908              LSRS     r0,r1,#4              ;1548
000adc  9002              STR      r0,[sp,#8]            ;1548
000ade  1a10              SUBS     r0,r2,r0              ;1548
000ae0  4661              MOV      r1,r12                ;1548
000ae2  f7fffffe          BL       __aeabi_uidivmod
000ae6  1c80              ADDS     r0,r0,#2              ;1548
000ae8  61e0              STR      r0,[r4,#0x1c]         ;1548
000aea  2701              MOVS     r7,#1                 ;1552
000aec  498e              LDR      r1,|L1.3368|
000aee  4288              CMP      r0,r1                 ;1553
000af0  d300              BCC      |L1.2804|
000af2  2702              MOVS     r7,#2                 ;1553
                  |L1.2804|
000af4  498d              LDR      r1,|L1.3372|
000af6  4288              CMP      r0,r1                 ;1554
000af8  d300              BCC      |L1.2812|
000afa  2703              MOVS     r7,#3                 ;1554
                  |L1.2812|
000afc  2f03              CMP      r7,#3                 ;1556
000afe  d010              BEQ      |L1.2850|
000b00  9900              LDR      r1,[sp,#0]            ;1559
000b02  9803              LDR      r0,[sp,#0xc]          ;1559
000b04  1840              ADDS     r0,r0,r1              ;1559
000b06  6260              STR      r0,[r4,#0x24]         ;1559
                  |L1.2824|
000b08  9a00              LDR      r2,[sp,#0]            ;1560
000b0a  9902              LDR      r1,[sp,#8]            ;1560
000b0c  9803              LDR      r0,[sp,#0xc]          ;1560
000b0e  1889              ADDS     r1,r1,r2              ;1560
000b10  1840              ADDS     r0,r0,r1              ;1560
000b12  62a0              STR      r0,[r4,#0x28]         ;1560
000b14  4886              LDR      r0,|L1.3376|
000b16  6120              STR      r0,[r4,#0x10]         ;1564
000b18  2500              MOVS     r5,#0                 ;1565
000b1a  7125              STRB     r5,[r4,#4]            ;1565
000b1c  2f03              CMP      r7,#3                 ;1567
000b1e  d00c              BEQ      |L1.2874|
000b20  e05a              B        |L1.3032|
                  |L1.2850|
000b22  7fe9              LDRB     r1,[r5,#0x1f]         ;1557
000b24  7f28              LDRB     r0,[r5,#0x1c]         ;1557
000b26  7f6a              LDRB     r2,[r5,#0x1d]         ;1557
000b28  0609              LSLS     r1,r1,#24             ;1557
000b2a  4308              ORRS     r0,r0,r1              ;1557
000b2c  7fa9              LDRB     r1,[r5,#0x1e]         ;1557
000b2e  0409              LSLS     r1,r1,#16             ;1557
000b30  0212              LSLS     r2,r2,#8              ;1557
000b32  4311              ORRS     r1,r1,r2              ;1557
000b34  4308              ORRS     r0,r0,r1              ;1557
000b36  6260              STR      r0,[r4,#0x24]         ;1557
000b38  e7e6              B        |L1.2824|
                  |L1.2874|
000b3a  7165              STRB     r5,[r4,#5]            ;1568
000b3c  0020              MOVS     r0,r4                 ;1569
000b3e  3060              ADDS     r0,r0,#0x60           ;1569
000b40  7841              LDRB     r1,[r0,#1]            ;1569
000b42  7800              LDRB     r0,[r0,#0]            ;1569
000b44  0209              LSLS     r1,r1,#8              ;1569
000b46  4301              ORRS     r1,r1,r0              ;1569
000b48  9801              LDR      r0,[sp,#4]            ;1569
000b4a  180a              ADDS     r2,r1,r0              ;1569
000b4c  6162              STR      r2,[r4,#0x14]         ;1569
000b4e  0021              MOVS     r1,r4                 ;1570
000b50  7860              LDRB     r0,[r4,#1]            ;1570
000b52  2301              MOVS     r3,#1                 ;1570
000b54  3130              ADDS     r1,r1,#0x30           ;1570
000b56  f7fffffe          BL       disk_read
000b5a  2800              CMP      r0,#0                 ;1570
000b5c  d13c              BNE      |L1.3032|
000b5e  2011              MOVS     r0,#0x11              ;1571
000b60  0140              LSLS     r0,r0,#5              ;1571
000b62  1820              ADDS     r0,r4,r0              ;1571
000b64  7bc1              LDRB     r1,[r0,#0xf]          ;1571
000b66  7b80              LDRB     r0,[r0,#0xe]          ;1571
000b68  0209              LSLS     r1,r1,#8              ;1571
000b6a  4301              ORRS     r1,r1,r0              ;1571
000b6c  486b              LDR      r0,|L1.3356|
000b6e  4281              CMP      r1,r0                 ;1571
000b70  d132              BNE      |L1.3032|
000b72  7cf1              LDRB     r1,[r6,#0x13]         ;1572
000b74  7c30              LDRB     r0,[r6,#0x10]         ;1572
000b76  7c72              LDRB     r2,[r6,#0x11]         ;1572
000b78  0609              LSLS     r1,r1,#24             ;1572
000b7a  4308              ORRS     r0,r0,r1              ;1572
000b7c  7cb1              LDRB     r1,[r6,#0x12]         ;1572
000b7e  0212              LSLS     r2,r2,#8              ;1572
000b80  0409              LSLS     r1,r1,#16             ;1572
000b82  4311              ORRS     r1,r1,r2              ;1572
000b84  4308              ORRS     r0,r0,r1              ;1572
000b86  496b              LDR      r1,|L1.3380|
000b88  4288              CMP      r0,r1                 ;1572
000b8a  d125              BNE      |L1.3032|
000b8c  1de0              ADDS     r0,r4,#7              ;1573
000b8e  30ff              ADDS     r0,r0,#0xff           ;1573
000b90  30fa              ADDS     r0,r0,#0xfa           ;1573
000b92  7dc2              LDRB     r2,[r0,#0x17]         ;1573
000b94  7d01              LDRB     r1,[r0,#0x14]         ;1573
000b96  7d43              LDRB     r3,[r0,#0x15]         ;1573
000b98  0612              LSLS     r2,r2,#24             ;1573
000b9a  4311              ORRS     r1,r1,r2              ;1573
000b9c  7d82              LDRB     r2,[r0,#0x16]         ;1573
000b9e  021b              LSLS     r3,r3,#8              ;1573
000ba0  0412              LSLS     r2,r2,#16             ;1573
000ba2  431a              ORRS     r2,r2,r3              ;1573
000ba4  4311              ORRS     r1,r1,r2              ;1573
000ba6  4a64              LDR      r2,|L1.3384|
000ba8  4291              CMP      r1,r2                 ;1573
000baa  d115              BNE      |L1.3032|
000bac  7fc2              LDRB     r2,[r0,#0x1f]         ;1574
000bae  7f01              LDRB     r1,[r0,#0x1c]         ;1574
000bb0  7f43              LDRB     r3,[r0,#0x1d]         ;1574
000bb2  0612              LSLS     r2,r2,#24             ;1574
000bb4  4311              ORRS     r1,r1,r2              ;1574
000bb6  7f82              LDRB     r2,[r0,#0x1e]         ;1574
000bb8  0412              LSLS     r2,r2,#16             ;1574
000bba  021b              LSLS     r3,r3,#8              ;1574
000bbc  431a              ORRS     r2,r2,r3              ;1574
000bbe  4311              ORRS     r1,r1,r2              ;1574
000bc0  60e1              STR      r1,[r4,#0xc]          ;1574
000bc2  7ec2              LDRB     r2,[r0,#0x1b]         ;1575
000bc4  7e01              LDRB     r1,[r0,#0x18]         ;1575
000bc6  0612              LSLS     r2,r2,#24             ;1575
000bc8  4311              ORRS     r1,r1,r2              ;1575
000bca  7e82              LDRB     r2,[r0,#0x1a]         ;1575
000bcc  7e40              LDRB     r0,[r0,#0x19]         ;1575
000bce  0412              LSLS     r2,r2,#16             ;1575
000bd0  0200              LSLS     r0,r0,#8              ;1575
000bd2  4302              ORRS     r2,r2,r0              ;1575
000bd4  4311              ORRS     r1,r1,r2              ;1575
000bd6  6121              STR      r1,[r4,#0x10]         ;1575
                  |L1.3032|
000bd8  7027              STRB     r7,[r4,#0]            ;1579
000bda  62e5              STR      r5,[r4,#0x2c]         ;1580
000bdc  4951              LDR      r1,|L1.3364|
000bde  1f09              SUBS     r1,r1,#4              ;1584
000be0  8808              LDRH     r0,[r1,#0]            ;1584  ; Fsid
000be2  1c40              ADDS     r0,r0,#1              ;1584
000be4  8008              STRH     r0,[r1,#0]            ;1584
000be6  80e0              STRH     r0,[r4,#6]            ;1584
000be8  2000              MOVS     r0,#0                 ;1586
                  |L1.3050|
000bea  e5bd              B        |L1.1896|
;;;1588   
                          ENDP

                  validate PROC
;;;1596   static
;;;1597   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000bec  b510              PUSH     {r4,lr}
;;;1598   	FATFS *fs,		/* Pointer to the file system object */
;;;1599   	WORD id			/* Member id of the target object to be checked */
;;;1600   )
;;;1601   {
;;;1602   	if (!fs || !fs->fs_type || fs->id != id)
000bee  2800              CMP      r0,#0
000bf0  d005              BEQ      |L1.3070|
000bf2  7802              LDRB     r2,[r0,#0]
000bf4  2a00              CMP      r2,#0
000bf6  d002              BEQ      |L1.3070|
000bf8  88c2              LDRH     r2,[r0,#6]
000bfa  428a              CMP      r2,r1
000bfc  d001              BEQ      |L1.3074|
                  |L1.3070|
;;;1603   		return FR_INVALID_OBJECT;
000bfe  2009              MOVS     r0,#9
;;;1604   
;;;1605   	ENTER_FF(fs);		/* Lock file system */
;;;1606   
;;;1607   	if (disk_status(fs->drive) & STA_NOINIT)
;;;1608   		return FR_NOT_READY;
;;;1609   
;;;1610   	return FR_OK;
;;;1611   }
000c00  bd10              POP      {r4,pc}
                  |L1.3074|
000c02  7840              LDRB     r0,[r0,#1]            ;1607
000c04  f7fffffe          BL       disk_status
000c08  07c0              LSLS     r0,r0,#31             ;1607
000c0a  d001              BEQ      |L1.3088|
000c0c  2003              MOVS     r0,#3                 ;1608
000c0e  bd10              POP      {r4,pc}
                  |L1.3088|
000c10  2000              MOVS     r0,#0                 ;1610
000c12  bd10              POP      {r4,pc}
;;;1612   
                          ENDP

                  f_mount PROC
;;;1627   
;;;1628   FRESULT f_mount (
000c14  2800              CMP      r0,#0
;;;1629   	BYTE vol,		/* Logical drive number to be mounted/unmounted */
;;;1630   	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
;;;1631   )
;;;1632   {
;;;1633   	FATFS *rfs;
;;;1634   
;;;1635   
;;;1636   	if (vol >= _DRIVES)				/* Check if the drive number is valid */
000c16  d001              BEQ      |L1.3100|
;;;1637   		return FR_INVALID_DRIVE;
000c18  200b              MOVS     r0,#0xb
;;;1638   	rfs = FatFs[vol];				/* Get current fs object */
;;;1639   
;;;1640   	if (rfs) {
;;;1641   #if _FS_REENTRANT					/* Discard sync object of the current volume */
;;;1642   		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
;;;1643   #endif
;;;1644   		rfs->fs_type = 0;			/* Clear old fs object */
;;;1645   	}
;;;1646   
;;;1647   	if (fs) {
;;;1648   		fs->fs_type = 0;			/* Clear new fs object */
;;;1649   #if _FS_REENTRANT					/* Create sync object for the new volume */
;;;1650   		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
;;;1651   #endif
;;;1652   	}
;;;1653   	FatFs[vol] = fs;				/* Register new fs object */
;;;1654   
;;;1655   	return FR_OK;
;;;1656   }
000c1a  4770              BX       lr
                  |L1.3100|
000c1c  4b41              LDR      r3,|L1.3364|
000c1e  2200              MOVS     r2,#0                 ;1638
000c20  6818              LDR      r0,[r3,#0]            ;1638
000c22  2800              CMP      r0,#0                 ;1640
000c24  d000              BEQ      |L1.3112|
000c26  7002              STRB     r2,[r0,#0]            ;1644
                  |L1.3112|
000c28  2900              CMP      r1,#0                 ;1647
000c2a  d000              BEQ      |L1.3118|
000c2c  700a              STRB     r2,[r1,#0]            ;1648
                  |L1.3118|
000c2e  6019              STR      r1,[r3,#0]            ;1653
000c30  2000              MOVS     r0,#0                 ;1655
000c32  4770              BX       lr
;;;1657   
                          ENDP

                  f_open PROC
;;;1664   
;;;1665   FRESULT f_open (
000c34  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;1666   	FIL *fp,			/* Pointer to the blank file object */
;;;1667   	const XCHAR *path,	/* Pointer to the file name */
;;;1668   	BYTE mode			/* Access mode and file open mode flags */
;;;1669   )
;;;1670   {
000c36  0006              MOVS     r6,r0
000c38  b08c              SUB      sp,sp,#0x30
;;;1671   	FRESULT res;
;;;1672   	DIR dj;
;;;1673   	NAMEBUF(sfn, lfn);
;;;1674   	BYTE *dir;
;;;1675   
;;;1676   
;;;1677   	fp->fs = NULL;		/* Clear file object */
000c3a  2000              MOVS     r0,#0
000c3c  6030              STR      r0,[r6,#0]
;;;1678   #if !_FS_READONLY
;;;1679   	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
000c3e  06d5              LSLS     r5,r2,#27
000c40  0eed              LSRS     r5,r5,#27
;;;1680   	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
000c42  201e              MOVS     r0,#0x1e
000c44  002a              MOVS     r2,r5
000c46  4002              ANDS     r2,r2,r0
000c48  a905              ADD      r1,sp,#0x14
000c4a  a80d              ADD      r0,sp,#0x34
000c4c  f7fffffe          BL       chk_mounted
;;;1681   #else
;;;1682   	mode &= FA_READ;
;;;1683   	res = chk_mounted(&path, &dj.fs, 0);
;;;1684   #endif
;;;1685   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
000c50  2800              CMP      r0,#0
000c52  d118              BNE      |L1.3206|
;;;1686   	INITBUF(dj, sfn, lfn);
000c54  a802              ADD      r0,sp,#8
000c56  900b              STR      r0,[sp,#0x2c]
;;;1687   	res = follow_path(&dj, path);	/* Follow the file path */
000c58  990d              LDR      r1,[sp,#0x34]
000c5a  a805              ADD      r0,sp,#0x14
000c5c  f7fffffe          BL       follow_path
;;;1688   
;;;1689   #if !_FS_READONLY
;;;1690   	/* Create or Open a file */
;;;1691   	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
000c60  06e9              LSLS     r1,r5,#27
000c62  0f49              LSRS     r1,r1,#29
000c64  d06a              BEQ      |L1.3388|
;;;1692   		DWORD ps, cl;
;;;1693   
;;;1694   		if (res != FR_OK) {			/* No file, create new */
000c66  2800              CMP      r0,#0
000c68  d00a              BEQ      |L1.3200|
;;;1695   			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
000c6a  2804              CMP      r0,#4
000c6c  d102              BNE      |L1.3188|
;;;1696   				res = dir_register(&dj);
000c6e  a805              ADD      r0,sp,#0x14
000c70  f7fffffe          BL       dir_register
                  |L1.3188|
;;;1697   			if (res != FR_OK) LEAVE_FF(dj.fs, res);
000c74  2800              CMP      r0,#0
000c76  d106              BNE      |L1.3206|
;;;1698   			mode |= FA_CREATE_ALWAYS;
000c78  2008              MOVS     r0,#8
000c7a  4305              ORRS     r5,r5,r0
;;;1699   			dir = dj.dir;			/* Created entry (SFN entry) */
000c7c  9c0a              LDR      r4,[sp,#0x28]
000c7e  e039              B        |L1.3316|
                  |L1.3200|
;;;1700   		}
;;;1701   		else {						/* Any object is already existing */
;;;1702   			if (mode & FA_CREATE_NEW)			/* Cannot create new */
000c80  0768              LSLS     r0,r5,#29
000c82  d502              BPL      |L1.3210|
;;;1703   				LEAVE_FF(dj.fs, FR_EXIST);
000c84  2008              MOVS     r0,#8
                  |L1.3206|
;;;1704   			dir = dj.dir;
;;;1705   			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
;;;1706   				LEAVE_FF(dj.fs, FR_DENIED);
;;;1707   			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
;;;1708   				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
;;;1709   				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
;;;1710   				ST_WORD(dir+DIR_FstClusLO, 0);
;;;1711   				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
;;;1712   				dj.fs->wflag = 1;
;;;1713   				ps = dj.fs->winsect;			/* Remove the cluster chain */
;;;1714   				if (cl) {
;;;1715   					res = remove_chain(dj.fs, cl);
;;;1716   					if (res) LEAVE_FF(dj.fs, res);
;;;1717   					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
;;;1718   				}
;;;1719   				res = move_window(dj.fs, ps);
;;;1720   				if (res != FR_OK) LEAVE_FF(dj.fs, res);
;;;1721   			}
;;;1722   		}
;;;1723   		if (mode & FA_CREATE_ALWAYS) {
;;;1724   			dir[DIR_Attr] = 0;					/* Reset attribute */
;;;1725   			ps = get_fattime();
;;;1726   			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
;;;1727   			dj.fs->wflag = 1;
;;;1728   			mode |= FA__WRITTEN;				/* Set file changed flag */
;;;1729   		}
;;;1730   	}
;;;1731   	/* Open an existing file */
;;;1732   	else {
;;;1733   #endif /* !_FS_READONLY */
;;;1734   		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
;;;1735   		dir = dj.dir;
;;;1736   		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
;;;1737   			LEAVE_FF(dj.fs, FR_NO_FILE);
;;;1738   #if !_FS_READONLY
;;;1739   		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
;;;1740   			LEAVE_FF(dj.fs, FR_DENIED);
;;;1741   	}
;;;1742   	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
;;;1743   	fp->dir_ptr = dj.dir;
;;;1744   #endif
;;;1745   	fp->flag = mode;					/* File access mode */
;;;1746   	fp->org_clust =						/* File start cluster */
;;;1747   		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
;;;1748   	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
;;;1749   	fp->fptr = 0; fp->csect = 255;		/* File pointer */
;;;1750   	fp->dsect = 0;
;;;1751   	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
;;;1752   
;;;1753   	LEAVE_FF(dj.fs, FR_OK);
;;;1754   }
000c86  b00f              ADD      sp,sp,#0x3c
000c88  bdf0              POP      {r4-r7,pc}
                  |L1.3210|
000c8a  9c0a              LDR      r4,[sp,#0x28]         ;1704
000c8c  2c00              CMP      r4,#0                 ;1705
000c8e  d003              BEQ      |L1.3224|
000c90  7ae0              LDRB     r0,[r4,#0xb]          ;1705
000c92  2111              MOVS     r1,#0x11              ;1705
000c94  4208              TST      r0,r1                 ;1705
000c96  d001              BEQ      |L1.3228|
                  |L1.3224|
000c98  2007              MOVS     r0,#7                 ;1706
000c9a  e7f4              B        |L1.3206|
                  |L1.3228|
000c9c  0728              LSLS     r0,r5,#28             ;1707
000c9e  d529              BPL      |L1.3316|
000ca0  7d60              LDRB     r0,[r4,#0x15]         ;1708
000ca2  7d21              LDRB     r1,[r4,#0x14]         ;1708
000ca4  0200              LSLS     r0,r0,#8              ;1708
000ca6  4308              ORRS     r0,r0,r1              ;1708
000ca8  0407              LSLS     r7,r0,#16             ;1708
000caa  7ee0              LDRB     r0,[r4,#0x1b]         ;1708
000cac  0200              LSLS     r0,r0,#8              ;1708
000cae  4307              ORRS     r7,r7,r0              ;1708
000cb0  7ea0              LDRB     r0,[r4,#0x1a]         ;1708
000cb2  4307              ORRS     r7,r7,r0              ;1708
000cb4  2000              MOVS     r0,#0                 ;1709
000cb6  7520              STRB     r0,[r4,#0x14]         ;1709
000cb8  7560              STRB     r0,[r4,#0x15]         ;1709
000cba  76a0              STRB     r0,[r4,#0x1a]         ;1710
000cbc  76e0              STRB     r0,[r4,#0x1b]         ;1710
000cbe  7720              STRB     r0,[r4,#0x1c]         ;1711
000cc0  7760              STRB     r0,[r4,#0x1d]         ;1711
000cc2  77a0              STRB     r0,[r4,#0x1e]         ;1711
000cc4  77e0              STRB     r0,[r4,#0x1f]         ;1711
000cc6  9905              LDR      r1,[sp,#0x14]         ;1712
000cc8  2001              MOVS     r0,#1                 ;1712
000cca  7108              STRB     r0,[r1,#4]            ;1712
000ccc  9805              LDR      r0,[sp,#0x14]         ;1713
000cce  6ac0              LDR      r0,[r0,#0x2c]         ;1713
000cd0  9001              STR      r0,[sp,#4]            ;1713
000cd2  2f00              CMP      r7,#0                 ;1714
000cd4  d008              BEQ      |L1.3304|
000cd6  9805              LDR      r0,[sp,#0x14]         ;1715
000cd8  0039              MOVS     r1,r7                 ;1715
000cda  f7fffffe          BL       remove_chain
000cde  2800              CMP      r0,#0                 ;1716
000ce0  d1d1              BNE      |L1.3206|
000ce2  9805              LDR      r0,[sp,#0x14]         ;1717
000ce4  1e7f              SUBS     r7,r7,#1              ;1717
000ce6  60c7              STR      r7,[r0,#0xc]          ;1717
                  |L1.3304|
000ce8  9901              LDR      r1,[sp,#4]            ;1719
000cea  9805              LDR      r0,[sp,#0x14]         ;1719
000cec  f7fffffe          BL       move_window
000cf0  2800              CMP      r0,#0                 ;1720
000cf2  d1c8              BNE      |L1.3206|
                  |L1.3316|
000cf4  0728              LSLS     r0,r5,#28             ;1723
000cf6  d531              BPL      |L1.3420|
000cf8  2000              MOVS     r0,#0                 ;1724
000cfa  72e0              STRB     r0,[r4,#0xb]          ;1724
000cfc  f7fffffe          BL       get_fattime
000d00  73a0              STRB     r0,[r4,#0xe]          ;1726
000d02  0a01              LSRS     r1,r0,#8              ;1726
000d04  73e1              STRB     r1,[r4,#0xf]          ;1726
000d06  0c01              LSRS     r1,r0,#16             ;1726
000d08  7421              STRB     r1,[r4,#0x10]         ;1726
000d0a  0e00              LSRS     r0,r0,#24             ;1726
000d0c  7460              STRB     r0,[r4,#0x11]         ;1726
000d0e  9905              LDR      r1,[sp,#0x14]         ;1727
000d10  2001              MOVS     r0,#1                 ;1727
000d12  7108              STRB     r0,[r1,#4]            ;1727
000d14  2020              MOVS     r0,#0x20              ;1728
000d16  4305              ORRS     r5,r5,r0              ;1728
000d18  e020              B        |L1.3420|
000d1a  e00f              B        |L1.3388|
                  |L1.3356|
                          DCD      0x0000aa55
                  |L1.3360|
                          DCD      0x54414600
                  |L1.3364|
                          DCD      ||.data||+0x4
                  |L1.3368|
                          DCD      0x00000ff7
                  |L1.3372|
                          DCD      0x0000fff7
                  |L1.3376|
                          DCD      0xffffffff
                  |L1.3380|
                          DCD      0x41615252
                  |L1.3384|
                          DCD      0x61417272
                  |L1.3388|
000d3c  2800              CMP      r0,#0                 ;1734
000d3e  d1a2              BNE      |L1.3206|
000d40  9c0a              LDR      r4,[sp,#0x28]         ;1735
000d42  2c00              CMP      r4,#0                 ;1736
000d44  d002              BEQ      |L1.3404|
000d46  7ae0              LDRB     r0,[r4,#0xb]          ;1736
000d48  06c1              LSLS     r1,r0,#27             ;1736
000d4a  d501              BPL      |L1.3408|
                  |L1.3404|
000d4c  2004              MOVS     r0,#4                 ;1737
000d4e  e79a              B        |L1.3206|
                  |L1.3408|
000d50  07a9              LSLS     r1,r5,#30             ;1739
000d52  d503              BPL      |L1.3420|
000d54  07c0              LSLS     r0,r0,#31             ;1739
000d56  d001              BEQ      |L1.3420|
000d58  2007              MOVS     r0,#7                 ;1740
000d5a  e794              B        |L1.3206|
                  |L1.3420|
000d5c  9805              LDR      r0,[sp,#0x14]         ;1742
000d5e  6ac0              LDR      r0,[r0,#0x2c]         ;1742
000d60  61f0              STR      r0,[r6,#0x1c]         ;1742
000d62  980a              LDR      r0,[sp,#0x28]         ;1743
000d64  6230              STR      r0,[r6,#0x20]         ;1743
000d66  71b5              STRB     r5,[r6,#6]            ;1745
000d68  7d60              LDRB     r0,[r4,#0x15]         ;1746
000d6a  7d21              LDRB     r1,[r4,#0x14]         ;1746
000d6c  0200              LSLS     r0,r0,#8              ;1746
000d6e  4308              ORRS     r0,r0,r1              ;1746
000d70  7ee1              LDRB     r1,[r4,#0x1b]         ;1746
000d72  0400              LSLS     r0,r0,#16             ;1746
000d74  0209              LSLS     r1,r1,#8              ;1746
000d76  4308              ORRS     r0,r0,r1              ;1746
000d78  7ea1              LDRB     r1,[r4,#0x1a]         ;1746
000d7a  4308              ORRS     r0,r0,r1              ;1746
000d7c  6130              STR      r0,[r6,#0x10]         ;1746
000d7e  7fe1              LDRB     r1,[r4,#0x1f]         ;1748
000d80  7f20              LDRB     r0,[r4,#0x1c]         ;1748
000d82  7f62              LDRB     r2,[r4,#0x1d]         ;1748
000d84  0609              LSLS     r1,r1,#24             ;1748
000d86  4308              ORRS     r0,r0,r1              ;1748
000d88  7fa1              LDRB     r1,[r4,#0x1e]         ;1748
000d8a  0409              LSLS     r1,r1,#16             ;1748
000d8c  0212              LSLS     r2,r2,#8              ;1748
000d8e  4311              ORRS     r1,r1,r2              ;1748
000d90  4308              ORRS     r0,r0,r1              ;1748
000d92  60f0              STR      r0,[r6,#0xc]          ;1748
000d94  2000              MOVS     r0,#0                 ;1749
000d96  60b0              STR      r0,[r6,#8]            ;1749
000d98  21ff              MOVS     r1,#0xff              ;1749
000d9a  71f1              STRB     r1,[r6,#7]            ;1749
000d9c  61b0              STR      r0,[r6,#0x18]         ;1750
000d9e  9805              LDR      r0,[sp,#0x14]         ;1751
000da0  6030              STR      r0,[r6,#0]            ;1751
000da2  9805              LDR      r0,[sp,#0x14]         ;1751
000da4  88c0              LDRH     r0,[r0,#6]            ;1751
000da6  80b0              STRH     r0,[r6,#4]            ;1751
000da8  2000              MOVS     r0,#0                 ;1753
000daa  e76c              B        |L1.3206|
;;;1755   
                          ENDP

                  f_read PROC
;;;1762   
;;;1763   FRESULT f_read (
000dac  b5ff              PUSH     {r0-r7,lr}
;;;1764   	FIL *fp, 		/* Pointer to the file object */
;;;1765   	void *buff,		/* Pointer to data buffer */
;;;1766   	UINT btr,		/* Number of bytes to read */
;;;1767   	UINT *br		/* Pointer to number of bytes read */
;;;1768   )
;;;1769   {
000dae  0004              MOVS     r4,r0
000db0  0016              MOVS     r6,r2
000db2  b083              SUB      sp,sp,#0xc
;;;1770   	FRESULT res;
;;;1771   	DWORD clst, sect, remain;
;;;1772   	UINT rcnt, cc;
;;;1773   	BYTE *rbuff = buff;
000db4  9101              STR      r1,[sp,#4]
;;;1774   
;;;1775   
;;;1776   	*br = 0;	/* Initialize bytes read */
000db6  9906              LDR      r1,[sp,#0x18]
000db8  2000              MOVS     r0,#0
000dba  6008              STR      r0,[r1,#0]
;;;1777   
;;;1778   	res = validate(fp->fs, fp->id);					/* Check validity of the object */
000dbc  88a1              LDRH     r1,[r4,#4]
000dbe  6820              LDR      r0,[r4,#0]
000dc0  f7fffffe          BL       validate
;;;1779   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000dc4  2800              CMP      r0,#0
000dc6  d103              BNE      |L1.3536|
;;;1780   	if (fp->flag & FA__ERROR)						/* Check abort flag */
000dc8  79a0              LDRB     r0,[r4,#6]
000dca  0601              LSLS     r1,r0,#24
000dcc  d502              BPL      |L1.3540|
;;;1781   		LEAVE_FF(fp->fs, FR_INT_ERR);
000dce  2002              MOVS     r0,#2
                  |L1.3536|
;;;1782   	if (!(fp->flag & FA_READ)) 						/* Check access mode */
;;;1783   		LEAVE_FF(fp->fs, FR_DENIED);
;;;1784   	remain = fp->fsize - fp->fptr;
;;;1785   	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
;;;1786   
;;;1787   	for ( ;  btr;									/* Repeat until all data transferred */
;;;1788   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;1789   		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
;;;1790   			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
;;;1791   				clst = (fp->fptr == 0) ?			/* On the top of the file? */
;;;1792   					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
;;;1793   				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;1794   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;1795   				fp->curr_clust = clst;				/* Update current cluster */
;;;1796   				fp->csect = 0;						/* Reset sector offset in the cluster */
;;;1797   			}
;;;1798   			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
;;;1799   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;1800   			sect += fp->csect;
;;;1801   			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
;;;1802   			if (cc) {								/* Read maximum contiguous sectors directly */
;;;1803   				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;1804   					cc = fp->fs->csize - fp->csect;
;;;1805   				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
;;;1806   					ABORT(fp->fs, FR_DISK_ERR);
;;;1807   #if !_FS_READONLY && _FS_MINIMIZE <= 2
;;;1808   #if _FS_TINY
;;;1809   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;1810   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;1811   #else
;;;1812   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;1813   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;1814   #endif
;;;1815   #endif
;;;1816   				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
;;;1817   				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
;;;1818   				continue;
;;;1819   			}
;;;1820   #if !_FS_TINY
;;;1821   #if !_FS_READONLY
;;;1822   			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
;;;1823   				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
;;;1824   					ABORT(fp->fs, FR_DISK_ERR);
;;;1825   				fp->flag &= ~FA__DIRTY;
;;;1826   			}
;;;1827   #endif
;;;1828   			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
;;;1829   				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
;;;1830   					ABORT(fp->fs, FR_DISK_ERR);
;;;1831   			}
;;;1832   #endif
;;;1833   			fp->dsect = sect;
;;;1834   			fp->csect++;							/* Next sector address in the cluster */
;;;1835   		}
;;;1836   		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;1837   		if (rcnt > btr) rcnt = btr;
;;;1838   #if _FS_TINY
;;;1839   		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
;;;1840   			ABORT(fp->fs, FR_DISK_ERR);
;;;1841   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;1842   #else
;;;1843   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;1844   #endif
;;;1845   	}
;;;1846   
;;;1847   	LEAVE_FF(fp->fs, FR_OK);
;;;1848   }
000dd0  b007              ADD      sp,sp,#0x1c
000dd2  bdf0              POP      {r4-r7,pc}
                  |L1.3540|
000dd4  07c0              LSLS     r0,r0,#31             ;1782
000dd6  d009              BEQ      |L1.3564|
000dd8  68a1              LDR      r1,[r4,#8]            ;1784
000dda  68e0              LDR      r0,[r4,#0xc]          ;1784
000ddc  1a40              SUBS     r0,r0,r1              ;1784
000dde  4286              CMP      r6,r0                 ;1785
000de0  d900              BLS      |L1.3556|
000de2  0006              MOVS     r6,r0                 ;1785
                  |L1.3556|
000de4  0020              MOVS     r0,r4                 ;1813
000de6  3024              ADDS     r0,r0,#0x24           ;1813
000de8  9002              STR      r0,[sp,#8]            ;1787
000dea  e0a6              B        |L1.3898|
                  |L1.3564|
000dec  2007              MOVS     r0,#7                 ;1783
000dee  e7ef              B        |L1.3536|
                  |L1.3568|
000df0  68a1              LDR      r1,[r4,#8]            ;1789
000df2  05c8              LSLS     r0,r1,#23             ;1789
000df4  d17e              BNE      |L1.3828|
000df6  6820              LDR      r0,[r4,#0]            ;1790
000df8  79e2              LDRB     r2,[r4,#7]            ;1790
000dfa  7883              LDRB     r3,[r0,#2]            ;1790
000dfc  429a              CMP      r2,r3                 ;1790
000dfe  d313              BCC      |L1.3624|
000e00  2900              CMP      r1,#0                 ;1791
000e02  d00a              BEQ      |L1.3610|
000e04  6961              LDR      r1,[r4,#0x14]         ;1792
000e06  f7fffffe          BL       get_fat
                  |L1.3594|
000e0a  2801              CMP      r0,#1                 ;1793
000e0c  d807              BHI      |L1.3614|
000e0e  79a0              LDRB     r0,[r4,#6]            ;1793
000e10  2180              MOVS     r1,#0x80              ;1793
000e12  4308              ORRS     r0,r0,r1              ;1793
000e14  71a0              STRB     r0,[r4,#6]            ;1793
000e16  2002              MOVS     r0,#2                 ;1793
000e18  e7da              B        |L1.3536|
                  |L1.3610|
000e1a  6920              LDR      r0,[r4,#0x10]         ;1792
000e1c  e7f5              B        |L1.3594|
                  |L1.3614|
000e1e  1c41              ADDS     r1,r0,#1              ;1794
000e20  d022              BEQ      |L1.3688|
000e22  6160              STR      r0,[r4,#0x14]         ;1795
000e24  2000              MOVS     r0,#0                 ;1796
000e26  71e0              STRB     r0,[r4,#7]            ;1796
                  |L1.3624|
000e28  6961              LDR      r1,[r4,#0x14]         ;1798
000e2a  6820              LDR      r0,[r4,#0]            ;1798
000e2c  f7fffffe          BL       clust2sect
000e30  2800              CMP      r0,#0                 ;1799
000e32  d01f              BEQ      |L1.3700|
000e34  79e1              LDRB     r1,[r4,#7]            ;1800
000e36  180f              ADDS     r7,r1,r0              ;1800
000e38  0a75              LSRS     r5,r6,#9              ;1801
000e3a  2d00              CMP      r5,#0                 ;1802
000e3c  d034              BEQ      |L1.3752|
000e3e  6822              LDR      r2,[r4,#0]            ;1803
000e40  194b              ADDS     r3,r1,r5              ;1803
000e42  7890              LDRB     r0,[r2,#2]            ;1803
000e44  4283              CMP      r3,r0                 ;1803
000e46  d900              BLS      |L1.3658|
000e48  1a45              SUBS     r5,r0,r1              ;1804
                  |L1.3658|
000e4a  7850              LDRB     r0,[r2,#1]            ;1805
000e4c  062b              LSLS     r3,r5,#24             ;1805
000e4e  9901              LDR      r1,[sp,#4]            ;1805
000e50  0e1b              LSRS     r3,r3,#24             ;1805
000e52  003a              MOVS     r2,r7                 ;1805
000e54  f7fffffe          BL       disk_read
000e58  2800              CMP      r0,#0                 ;1805
000e5a  d011              BEQ      |L1.3712|
000e5c  79a0              LDRB     r0,[r4,#6]            ;1806
000e5e  2180              MOVS     r1,#0x80              ;1806
000e60  4308              ORRS     r0,r0,r1              ;1806
000e62  71a0              STRB     r0,[r4,#6]            ;1806
000e64  2001              MOVS     r0,#1                 ;1806
000e66  e7b3              B        |L1.3536|
                  |L1.3688|
000e68  79a0              LDRB     r0,[r4,#6]            ;1794
000e6a  2180              MOVS     r1,#0x80              ;1794
000e6c  4308              ORRS     r0,r0,r1              ;1794
000e6e  71a0              STRB     r0,[r4,#6]            ;1794
000e70  2001              MOVS     r0,#1                 ;1794
000e72  e7ad              B        |L1.3536|
                  |L1.3700|
000e74  79a0              LDRB     r0,[r4,#6]            ;1799
000e76  2180              MOVS     r1,#0x80              ;1799
000e78  4308              ORRS     r0,r0,r1              ;1799
000e7a  71a0              STRB     r0,[r4,#6]            ;1799
000e7c  2002              MOVS     r0,#2                 ;1799
000e7e  e7a7              B        |L1.3536|
                  |L1.3712|
000e80  79a0              LDRB     r0,[r4,#6]            ;1812
000e82  0640              LSLS     r0,r0,#25             ;1812
000e84  d50b              BPL      |L1.3742|
000e86  69a0              LDR      r0,[r4,#0x18]         ;1812
000e88  1bc0              SUBS     r0,r0,r7              ;1812
000e8a  42a8              CMP      r0,r5                 ;1812
000e8c  d207              BCS      |L1.3742|
000e8e  0241              LSLS     r1,r0,#9              ;1813
000e90  9801              LDR      r0,[sp,#4]            ;1813
000e92  2201              MOVS     r2,#1                 ;1813
000e94  1808              ADDS     r0,r1,r0              ;1813
000e96  9902              LDR      r1,[sp,#8]            ;1813
000e98  0252              LSLS     r2,r2,#9              ;1813
000e9a  f7fffffe          BL       mem_cpy
                  |L1.3742|
000e9e  79e0              LDRB     r0,[r4,#7]            ;1816
000ea0  1940              ADDS     r0,r0,r5              ;1816
000ea2  71e0              STRB     r0,[r4,#7]            ;1816
000ea4  026d              LSLS     r5,r5,#9              ;1817
000ea6  e03c              B        |L1.3874|
                  |L1.3752|
000ea8  79a0              LDRB     r0,[r4,#6]            ;1822
000eaa  0640              LSLS     r0,r0,#25             ;1822
000eac  d512              BPL      |L1.3796|
000eae  6820              LDR      r0,[r4,#0]            ;1823
000eb0  69a2              LDR      r2,[r4,#0x18]         ;1823
000eb2  7840              LDRB     r0,[r0,#1]            ;1823
000eb4  9902              LDR      r1,[sp,#8]            ;1823
000eb6  2301              MOVS     r3,#1                 ;1823
000eb8  f7fffffe          BL       disk_write
000ebc  2800              CMP      r0,#0                 ;1823
000ebe  d005              BEQ      |L1.3788|
000ec0  79a0              LDRB     r0,[r4,#6]            ;1824
000ec2  2180              MOVS     r1,#0x80              ;1824
000ec4  4308              ORRS     r0,r0,r1              ;1824
000ec6  71a0              STRB     r0,[r4,#6]            ;1824
000ec8  2001              MOVS     r0,#1                 ;1824
000eca  e781              B        |L1.3536|
                  |L1.3788|
000ecc  79a0              LDRB     r0,[r4,#6]            ;1825
000ece  21bf              MOVS     r1,#0xbf              ;1825
000ed0  4008              ANDS     r0,r0,r1              ;1825
000ed2  71a0              STRB     r0,[r4,#6]            ;1825
                  |L1.3796|
000ed4  69a0              LDR      r0,[r4,#0x18]         ;1828
000ed6  42b8              CMP      r0,r7                 ;1828
000ed8  d010              BEQ      |L1.3836|
000eda  6820              LDR      r0,[r4,#0]            ;1829
000edc  9902              LDR      r1,[sp,#8]            ;1829
000ede  7840              LDRB     r0,[r0,#1]            ;1829
000ee0  2301              MOVS     r3,#1                 ;1829
000ee2  003a              MOVS     r2,r7                 ;1829
000ee4  f7fffffe          BL       disk_read
000ee8  2800              CMP      r0,#0                 ;1829
000eea  d007              BEQ      |L1.3836|
000eec  79a0              LDRB     r0,[r4,#6]            ;1830
000eee  2180              MOVS     r1,#0x80              ;1830
000ef0  4308              ORRS     r0,r0,r1              ;1830
000ef2  e000              B        |L1.3830|
                  |L1.3828|
000ef4  e006              B        |L1.3844|
                  |L1.3830|
000ef6  71a0              STRB     r0,[r4,#6]            ;1830
000ef8  2001              MOVS     r0,#1                 ;1830
000efa  e769              B        |L1.3536|
                  |L1.3836|
000efc  61a7              STR      r7,[r4,#0x18]         ;1833
000efe  79e0              LDRB     r0,[r4,#7]            ;1834
000f00  1c40              ADDS     r0,r0,#1              ;1834
000f02  71e0              STRB     r0,[r4,#7]            ;1834
                  |L1.3844|
000f04  68a0              LDR      r0,[r4,#8]            ;1836
000f06  2101              MOVS     r1,#1                 ;1836
000f08  05c0              LSLS     r0,r0,#23             ;1836
000f0a  0dc0              LSRS     r0,r0,#23             ;1836
000f0c  0249              LSLS     r1,r1,#9              ;1836
000f0e  1a0d              SUBS     r5,r1,r0              ;1836
000f10  42b5              CMP      r5,r6                 ;1837
000f12  d900              BLS      |L1.3862|
000f14  0035              MOVS     r5,r6                 ;1837
                  |L1.3862|
000f16  1901              ADDS     r1,r0,r4              ;1843
000f18  9801              LDR      r0,[sp,#4]            ;1843
000f1a  3124              ADDS     r1,r1,#0x24           ;1843
000f1c  002a              MOVS     r2,r5                 ;1843
000f1e  f7fffffe          BL       mem_cpy
                  |L1.3874|
000f22  9801              LDR      r0,[sp,#4]            ;1788
000f24  1940              ADDS     r0,r0,r5              ;1788
000f26  9001              STR      r0,[sp,#4]            ;1788
000f28  68a0              LDR      r0,[r4,#8]            ;1788
000f2a  1940              ADDS     r0,r0,r5              ;1788
000f2c  60a0              STR      r0,[r4,#8]            ;1788
000f2e  9806              LDR      r0,[sp,#0x18]         ;1788
000f30  6800              LDR      r0,[r0,#0]            ;1788
000f32  1941              ADDS     r1,r0,r5              ;1788
000f34  9806              LDR      r0,[sp,#0x18]         ;1788
000f36  6001              STR      r1,[r0,#0]            ;1788
000f38  1b76              SUBS     r6,r6,r5              ;1788
                  |L1.3898|
000f3a  2e00              CMP      r6,#0                 ;1787
000f3c  d000              BEQ      |L1.3904|
000f3e  e757              B        |L1.3568|
                  |L1.3904|
000f40  2000              MOVS     r0,#0                 ;1847
000f42  e745              B        |L1.3536|
;;;1849   
                          ENDP

                  f_write PROC
;;;1857   
;;;1858   FRESULT f_write (
000f44  b5ff              PUSH     {r0-r7,lr}
;;;1859   	FIL *fp,			/* Pointer to the file object */
;;;1860   	const void *buff,	/* Pointer to the data to be written */
;;;1861   	UINT btw,			/* Number of bytes to write */
;;;1862   	UINT *bw			/* Pointer to number of bytes written */
;;;1863   )
;;;1864   {
000f46  0004              MOVS     r4,r0
000f48  0016              MOVS     r6,r2
000f4a  b083              SUB      sp,sp,#0xc
;;;1865   	FRESULT res;
;;;1866   	DWORD clst, sect;
;;;1867   	UINT wcnt, cc;
;;;1868   	const BYTE *wbuff = buff;
000f4c  9101              STR      r1,[sp,#4]
;;;1869   
;;;1870   
;;;1871   	*bw = 0;	/* Initialize bytes written */
000f4e  9906              LDR      r1,[sp,#0x18]
000f50  2000              MOVS     r0,#0
000f52  6008              STR      r0,[r1,#0]
;;;1872   
;;;1873   	res = validate(fp->fs, fp->id);					/* Check validity of the object */
000f54  88a1              LDRH     r1,[r4,#4]
000f56  6820              LDR      r0,[r4,#0]
000f58  f7fffffe          BL       validate
;;;1874   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000f5c  2800              CMP      r0,#0
000f5e  d103              BNE      |L1.3944|
;;;1875   	if (fp->flag & FA__ERROR)						/* Check abort flag */
000f60  79a0              LDRB     r0,[r4,#6]
000f62  0601              LSLS     r1,r0,#24
000f64  d501              BPL      |L1.3946|
;;;1876   		LEAVE_FF(fp->fs, FR_INT_ERR);
000f66  2002              MOVS     r0,#2
                  |L1.3944|
;;;1877   	if (!(fp->flag & FA_WRITE))						/* Check access mode */
;;;1878   		LEAVE_FF(fp->fs, FR_DENIED);
;;;1879   	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
;;;1880   
;;;1881   	for ( ;  btw;									/* Repeat until all data transferred */
;;;1882   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;1883   		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
;;;1884   			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
;;;1885   				if (fp->fptr == 0) {				/* On the top of the file? */
;;;1886   					clst = fp->org_clust;			/* Follow from the origin */
;;;1887   					if (clst == 0)					/* When there is no cluster chain, */
;;;1888   						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;1889   				} else {							/* Middle or end of the file */
;;;1890   					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
;;;1891   				}
;;;1892   				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
;;;1893   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;1894   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;1895   				fp->curr_clust = clst;				/* Update current cluster */
;;;1896   				fp->csect = 0;						/* Reset sector address in the cluster */
;;;1897   			}
;;;1898   #if _FS_TINY
;;;1899   			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
;;;1900   				ABORT(fp->fs, FR_DISK_ERR);
;;;1901   #else
;;;1902   			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
;;;1903   				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
;;;1904   					ABORT(fp->fs, FR_DISK_ERR);
;;;1905   				fp->flag &= ~FA__DIRTY;
;;;1906   			}
;;;1907   #endif
;;;1908   			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
;;;1909   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;1910   			sect += fp->csect;
;;;1911   			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
;;;1912   			if (cc) {								/* Write maximum contiguous sectors directly */
;;;1913   				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;1914   					cc = fp->fs->csize - fp->csect;
;;;1915   				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
;;;1916   					ABORT(fp->fs, FR_DISK_ERR);
;;;1917   #if _FS_TINY
;;;1918   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
;;;1919   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;1920   					fp->fs->wflag = 0;
;;;1921   				}
;;;1922   #else
;;;1923   				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
;;;1924   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;1925   					fp->flag &= ~FA__DIRTY;
;;;1926   				}
;;;1927   #endif
;;;1928   				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
;;;1929   				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
;;;1930   				continue;
;;;1931   			}
;;;1932   #if _FS_TINY
;;;1933   			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
;;;1934   				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
;;;1935   				fp->fs->winsect = sect;
;;;1936   			}
;;;1937   #else
;;;1938   			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
;;;1939   				if (fp->fptr < fp->fsize &&
;;;1940   					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
;;;1941   						ABORT(fp->fs, FR_DISK_ERR);
;;;1942   			}
;;;1943   #endif
;;;1944   			fp->dsect = sect;
;;;1945   			fp->csect++;							/* Next sector address in the cluster */
;;;1946   		}
;;;1947   		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
;;;1948   		if (wcnt > btw) wcnt = btw;
;;;1949   #if _FS_TINY
;;;1950   		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
;;;1951   			ABORT(fp->fs, FR_DISK_ERR);
;;;1952   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;1953   		fp->fs->wflag = 1;
;;;1954   #else
;;;1955   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;1956   		fp->flag |= FA__DIRTY;
;;;1957   #endif
;;;1958   	}
;;;1959   
;;;1960   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;1961   	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
;;;1962   
;;;1963   	LEAVE_FF(fp->fs, FR_OK);
;;;1964   }
000f68  e732              B        |L1.3536|
                  |L1.3946|
000f6a  0780              LSLS     r0,r0,#30             ;1877
000f6c  d401              BMI      |L1.3954|
000f6e  2007              MOVS     r0,#7                 ;1878
000f70  e72e              B        |L1.3536|
                  |L1.3954|
000f72  68e0              LDR      r0,[r4,#0xc]          ;1879
000f74  1981              ADDS     r1,r0,r6              ;1879
000f76  4281              CMP      r1,r0                 ;1879
000f78  d200              BCS      |L1.3964|
000f7a  2600              MOVS     r6,#0                 ;1879
                  |L1.3964|
000f7c  0020              MOVS     r0,r4                 ;1903
000f7e  3024              ADDS     r0,r0,#0x24           ;1903
000f80  9002              STR      r0,[sp,#8]            ;1881
000f82  e0b7              B        |L1.4340|
                  |L1.3972|
000f84  68a0              LDR      r0,[r4,#8]            ;1883
000f86  05c1              LSLS     r1,r0,#23             ;1883
000f88  d179              BNE      |L1.4222|
000f8a  6822              LDR      r2,[r4,#0]            ;1884
000f8c  79e1              LDRB     r1,[r4,#7]            ;1884
000f8e  7893              LDRB     r3,[r2,#2]            ;1884
000f90  4299              CMP      r1,r3                 ;1884
000f92  d30e              BCC      |L1.4018|
000f94  2800              CMP      r0,#0                 ;1885
000f96  d01e              BEQ      |L1.4054|
000f98  6961              LDR      r1,[r4,#0x14]         ;1890
000f9a  0010              MOVS     r0,r2                 ;1890
000f9c  f7fffffe          BL       create_chain
                  |L1.4000|
000fa0  2800              CMP      r0,#0                 ;1892
000fa2  d06d              BEQ      |L1.4224|
000fa4  2801              CMP      r0,#1                 ;1893
000fa6  d01f              BEQ      |L1.4072|
000fa8  1c41              ADDS     r1,r0,#1              ;1894
000faa  d023              BEQ      |L1.4084|
000fac  6160              STR      r0,[r4,#0x14]         ;1895
000fae  2000              MOVS     r0,#0                 ;1896
000fb0  71e0              STRB     r0,[r4,#7]            ;1896
                  |L1.4018|
000fb2  79a0              LDRB     r0,[r4,#6]            ;1902
000fb4  0640              LSLS     r0,r0,#25             ;1902
000fb6  d527              BPL      |L1.4104|
000fb8  6820              LDR      r0,[r4,#0]            ;1903
000fba  69a2              LDR      r2,[r4,#0x18]         ;1903
000fbc  7840              LDRB     r0,[r0,#1]            ;1903
000fbe  9902              LDR      r1,[sp,#8]            ;1903
000fc0  2301              MOVS     r3,#1                 ;1903
000fc2  f7fffffe          BL       disk_write
000fc6  2800              CMP      r0,#0                 ;1903
000fc8  d01a              BEQ      |L1.4096|
000fca  79a0              LDRB     r0,[r4,#6]            ;1904
000fcc  2180              MOVS     r1,#0x80              ;1904
000fce  4308              ORRS     r0,r0,r1              ;1904
000fd0  71a0              STRB     r0,[r4,#6]            ;1904
000fd2  2001              MOVS     r0,#1                 ;1904
000fd4  e6fc              B        |L1.3536|
                  |L1.4054|
000fd6  6920              LDR      r0,[r4,#0x10]         ;1886
000fd8  2800              CMP      r0,#0                 ;1887
000fda  d1e1              BNE      |L1.4000|
000fdc  2100              MOVS     r1,#0                 ;1888
000fde  0010              MOVS     r0,r2                 ;1888
000fe0  f7fffffe          BL       create_chain
000fe4  6120              STR      r0,[r4,#0x10]         ;1888
000fe6  e7db              B        |L1.4000|
                  |L1.4072|
000fe8  79a0              LDRB     r0,[r4,#6]            ;1893
000fea  2180              MOVS     r1,#0x80              ;1893
000fec  4308              ORRS     r0,r0,r1              ;1893
000fee  71a0              STRB     r0,[r4,#6]            ;1893
000ff0  2002              MOVS     r0,#2                 ;1893
000ff2  e6ed              B        |L1.3536|
                  |L1.4084|
000ff4  79a0              LDRB     r0,[r4,#6]            ;1894
000ff6  2180              MOVS     r1,#0x80              ;1894
000ff8  4308              ORRS     r0,r0,r1              ;1894
000ffa  71a0              STRB     r0,[r4,#6]            ;1894
000ffc  2001              MOVS     r0,#1                 ;1894
000ffe  e6e7              B        |L1.3536|
                  |L1.4096|
001000  79a0              LDRB     r0,[r4,#6]            ;1905
001002  21bf              MOVS     r1,#0xbf              ;1905
001004  4008              ANDS     r0,r0,r1              ;1905
001006  71a0              STRB     r0,[r4,#6]            ;1905
                  |L1.4104|
001008  6961              LDR      r1,[r4,#0x14]         ;1908
00100a  6820              LDR      r0,[r4,#0]            ;1908
00100c  f7fffffe          BL       clust2sect
001010  2800              CMP      r0,#0                 ;1909
001012  d019              BEQ      |L1.4168|
001014  79e1              LDRB     r1,[r4,#7]            ;1910
001016  180f              ADDS     r7,r1,r0              ;1910
001018  0a75              LSRS     r5,r6,#9              ;1911
00101a  2d00              CMP      r5,#0                 ;1912
00101c  d031              BEQ      |L1.4226|
00101e  6822              LDR      r2,[r4,#0]            ;1913
001020  194b              ADDS     r3,r1,r5              ;1913
001022  7890              LDRB     r0,[r2,#2]            ;1913
001024  4283              CMP      r3,r0                 ;1913
001026  d900              BLS      |L1.4138|
001028  1a45              SUBS     r5,r0,r1              ;1914
                  |L1.4138|
00102a  7850              LDRB     r0,[r2,#1]            ;1915
00102c  062b              LSLS     r3,r5,#24             ;1915
00102e  9901              LDR      r1,[sp,#4]            ;1915
001030  0e1b              LSRS     r3,r3,#24             ;1915
001032  003a              MOVS     r2,r7                 ;1915
001034  f7fffffe          BL       disk_write
001038  2800              CMP      r0,#0                 ;1915
00103a  d00b              BEQ      |L1.4180|
00103c  79a0              LDRB     r0,[r4,#6]            ;1916
00103e  2180              MOVS     r1,#0x80              ;1916
001040  4308              ORRS     r0,r0,r1              ;1916
001042  71a0              STRB     r0,[r4,#6]            ;1916
001044  2001              MOVS     r0,#1                 ;1916
001046  e6c3              B        |L1.3536|
                  |L1.4168|
001048  79a0              LDRB     r0,[r4,#6]            ;1909
00104a  2180              MOVS     r1,#0x80              ;1909
00104c  4308              ORRS     r0,r0,r1              ;1909
00104e  71a0              STRB     r0,[r4,#6]            ;1909
001050  2002              MOVS     r0,#2                 ;1909
001052  e6bd              B        |L1.3536|
                  |L1.4180|
001054  69a0              LDR      r0,[r4,#0x18]         ;1923
001056  1bc0              SUBS     r0,r0,r7              ;1923
001058  42a8              CMP      r0,r5                 ;1923
00105a  d20b              BCS      |L1.4212|
00105c  0241              LSLS     r1,r0,#9              ;1924
00105e  9801              LDR      r0,[sp,#4]            ;1924
001060  2201              MOVS     r2,#1                 ;1924
001062  1809              ADDS     r1,r1,r0              ;1924
001064  9802              LDR      r0,[sp,#8]            ;1924
001066  0252              LSLS     r2,r2,#9              ;1924
001068  f7fffffe          BL       mem_cpy
00106c  79a0              LDRB     r0,[r4,#6]            ;1925
00106e  21bf              MOVS     r1,#0xbf              ;1925
001070  4008              ANDS     r0,r0,r1              ;1925
001072  71a0              STRB     r0,[r4,#6]            ;1925
                  |L1.4212|
001074  79e0              LDRB     r0,[r4,#7]            ;1928
001076  1940              ADDS     r0,r0,r5              ;1928
001078  71e0              STRB     r0,[r4,#7]            ;1928
00107a  026d              LSLS     r5,r5,#9              ;1929
00107c  e02e              B        |L1.4316|
                  |L1.4222|
00107e  e01a              B        |L1.4278|
                  |L1.4224|
001080  e03b              B        |L1.4346|
                  |L1.4226|
001082  69a0              LDR      r0,[r4,#0x18]         ;1938
001084  42b8              CMP      r0,r7                 ;1938
001086  d012              BEQ      |L1.4270|
001088  68e1              LDR      r1,[r4,#0xc]          ;1939
00108a  68a0              LDR      r0,[r4,#8]            ;1939
00108c  4288              CMP      r0,r1                 ;1939
00108e  d20e              BCS      |L1.4270|
001090  6820              LDR      r0,[r4,#0]            ;1940
001092  9902              LDR      r1,[sp,#8]            ;1940
001094  7840              LDRB     r0,[r0,#1]            ;1940
001096  2301              MOVS     r3,#1                 ;1940
001098  003a              MOVS     r2,r7                 ;1940
00109a  f7fffffe          BL       disk_read
00109e  2800              CMP      r0,#0                 ;1940
0010a0  d005              BEQ      |L1.4270|
0010a2  79a0              LDRB     r0,[r4,#6]            ;1941
0010a4  2180              MOVS     r1,#0x80              ;1941
0010a6  4308              ORRS     r0,r0,r1              ;1941
0010a8  71a0              STRB     r0,[r4,#6]            ;1941
0010aa  2001              MOVS     r0,#1                 ;1941
0010ac  e690              B        |L1.3536|
                  |L1.4270|
0010ae  61a7              STR      r7,[r4,#0x18]         ;1944
0010b0  79e0              LDRB     r0,[r4,#7]            ;1945
0010b2  1c40              ADDS     r0,r0,#1              ;1945
0010b4  71e0              STRB     r0,[r4,#7]            ;1945
                  |L1.4278|
0010b6  68a0              LDR      r0,[r4,#8]            ;1947
0010b8  2101              MOVS     r1,#1                 ;1947
0010ba  05c0              LSLS     r0,r0,#23             ;1947
0010bc  0dc0              LSRS     r0,r0,#23             ;1947
0010be  0249              LSLS     r1,r1,#9              ;1947
0010c0  1a0d              SUBS     r5,r1,r0              ;1947
0010c2  42b5              CMP      r5,r6                 ;1948
0010c4  d900              BLS      |L1.4296|
0010c6  0035              MOVS     r5,r6                 ;1948
                  |L1.4296|
0010c8  1900              ADDS     r0,r0,r4              ;1955
0010ca  9901              LDR      r1,[sp,#4]            ;1955
0010cc  3024              ADDS     r0,r0,#0x24           ;1955
0010ce  002a              MOVS     r2,r5                 ;1955
0010d0  f7fffffe          BL       mem_cpy
0010d4  79a0              LDRB     r0,[r4,#6]            ;1956
0010d6  2140              MOVS     r1,#0x40              ;1956
0010d8  4308              ORRS     r0,r0,r1              ;1956
0010da  71a0              STRB     r0,[r4,#6]            ;1956
                  |L1.4316|
0010dc  9801              LDR      r0,[sp,#4]            ;1882
0010de  1940              ADDS     r0,r0,r5              ;1882
0010e0  9001              STR      r0,[sp,#4]            ;1882
0010e2  68a0              LDR      r0,[r4,#8]            ;1882
0010e4  1940              ADDS     r0,r0,r5              ;1882
0010e6  60a0              STR      r0,[r4,#8]            ;1882
0010e8  9806              LDR      r0,[sp,#0x18]         ;1882
0010ea  6800              LDR      r0,[r0,#0]            ;1882
0010ec  1941              ADDS     r1,r0,r5              ;1882
0010ee  9806              LDR      r0,[sp,#0x18]         ;1882
0010f0  6001              STR      r1,[r0,#0]            ;1882
0010f2  1b76              SUBS     r6,r6,r5              ;1882
                  |L1.4340|
0010f4  2e00              CMP      r6,#0                 ;1881
0010f6  d000              BEQ      |L1.4346|
0010f8  e744              B        |L1.3972|
                  |L1.4346|
0010fa  68e1              LDR      r1,[r4,#0xc]          ;1960
0010fc  68a0              LDR      r0,[r4,#8]            ;1960
0010fe  4288              CMP      r0,r1                 ;1960
001100  d900              BLS      |L1.4356|
001102  60e0              STR      r0,[r4,#0xc]          ;1960
                  |L1.4356|
001104  79a0              LDRB     r0,[r4,#6]            ;1961
001106  2120              MOVS     r1,#0x20              ;1961
001108  4308              ORRS     r0,r0,r1              ;1961
00110a  71a0              STRB     r0,[r4,#6]            ;1961
00110c  2000              MOVS     r0,#0                 ;1963
00110e  e65f              B        |L1.3536|
;;;1965   
                          ENDP

                  f_sync PROC
;;;1972   
;;;1973   FRESULT f_sync (
001110  b570              PUSH     {r4-r6,lr}
;;;1974   	FIL *fp		/* Pointer to the file object */
;;;1975   )
;;;1976   {
001112  0004              MOVS     r4,r0
;;;1977   	FRESULT res;
;;;1978   	DWORD tim;
;;;1979   	BYTE *dir;
;;;1980   
;;;1981   
;;;1982   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
001114  88a1              LDRH     r1,[r4,#4]
001116  6820              LDR      r0,[r4,#0]
001118  f7fffffe          BL       validate
;;;1983   	if (res == FR_OK) {
00111c  2800              CMP      r0,#0
00111e  d10f              BNE      |L1.4416|
;;;1984   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
001120  79a1              LDRB     r1,[r4,#6]
001122  068a              LSLS     r2,r1,#26
001124  d50c              BPL      |L1.4416|
;;;1985   #if !_FS_TINY	/* Write-back dirty buffer */
;;;1986   			if (fp->flag & FA__DIRTY) {
001126  0648              LSLS     r0,r1,#25
001128  d50f              BPL      |L1.4426|
;;;1987   				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
00112a  6820              LDR      r0,[r4,#0]
00112c  0021              MOVS     r1,r4
00112e  7840              LDRB     r0,[r0,#1]
001130  69a2              LDR      r2,[r4,#0x18]
001132  2301              MOVS     r3,#1
001134  3124              ADDS     r1,r1,#0x24
001136  f7fffffe          BL       disk_write
00113a  2800              CMP      r0,#0
00113c  d001              BEQ      |L1.4418|
;;;1988   					LEAVE_FF(fp->fs, FR_DISK_ERR);
00113e  2001              MOVS     r0,#1
                  |L1.4416|
;;;1989   				fp->flag &= ~FA__DIRTY;
;;;1990   			}
;;;1991   #endif
;;;1992   			/* Update the directory entry */
;;;1993   			res = move_window(fp->fs, fp->dir_sect);
;;;1994   			if (res == FR_OK) {
;;;1995   				dir = fp->dir_ptr;
;;;1996   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;1997   				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
;;;1998   				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
;;;1999   				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
;;;2000   				tim = get_fattime();			/* Updated time */
;;;2001   				ST_DWORD(dir+DIR_WrtTime, tim);
;;;2002   				fp->flag &= ~FA__WRITTEN;
;;;2003   				fp->fs->wflag = 1;
;;;2004   				res = sync(fp->fs);
;;;2005   			}
;;;2006   		}
;;;2007   	}
;;;2008   
;;;2009   	LEAVE_FF(fp->fs, res);
;;;2010   }
001140  bd70              POP      {r4-r6,pc}
                  |L1.4418|
001142  79a0              LDRB     r0,[r4,#6]            ;1989
001144  21bf              MOVS     r1,#0xbf              ;1989
001146  4008              ANDS     r0,r0,r1              ;1989
001148  71a0              STRB     r0,[r4,#6]            ;1989
                  |L1.4426|
00114a  69e1              LDR      r1,[r4,#0x1c]         ;1993
00114c  6820              LDR      r0,[r4,#0]            ;1993
00114e  f7fffffe          BL       move_window
001152  2800              CMP      r0,#0                 ;1994
001154  d1f4              BNE      |L1.4416|
001156  6a25              LDR      r5,[r4,#0x20]         ;1995
001158  2120              MOVS     r1,#0x20              ;1996
00115a  7ae8              LDRB     r0,[r5,#0xb]          ;1996
00115c  4308              ORRS     r0,r0,r1              ;1996
00115e  72e8              STRB     r0,[r5,#0xb]          ;1996
001160  68e0              LDR      r0,[r4,#0xc]          ;1997
001162  7728              STRB     r0,[r5,#0x1c]         ;1997
001164  68e0              LDR      r0,[r4,#0xc]          ;1997
001166  0a00              LSRS     r0,r0,#8              ;1997
001168  7768              STRB     r0,[r5,#0x1d]         ;1997
00116a  68e0              LDR      r0,[r4,#0xc]          ;1997
00116c  0c00              LSRS     r0,r0,#16             ;1997
00116e  77a8              STRB     r0,[r5,#0x1e]         ;1997
001170  68e0              LDR      r0,[r4,#0xc]          ;1997
001172  0e00              LSRS     r0,r0,#24             ;1997
001174  77e8              STRB     r0,[r5,#0x1f]         ;1997
001176  6920              LDR      r0,[r4,#0x10]         ;1998
001178  76a8              STRB     r0,[r5,#0x1a]         ;1998
00117a  6920              LDR      r0,[r4,#0x10]         ;1998
00117c  0a00              LSRS     r0,r0,#8              ;1998
00117e  76e8              STRB     r0,[r5,#0x1b]         ;1998
001180  6920              LDR      r0,[r4,#0x10]         ;1999
001182  0c00              LSRS     r0,r0,#16             ;1999
001184  7528              STRB     r0,[r5,#0x14]         ;1999
001186  6920              LDR      r0,[r4,#0x10]         ;1999
001188  0e00              LSRS     r0,r0,#24             ;1999
00118a  7568              STRB     r0,[r5,#0x15]         ;1999
00118c  f7fffffe          BL       get_fattime
001190  75a8              STRB     r0,[r5,#0x16]         ;2001
001192  0a01              LSRS     r1,r0,#8              ;2001
001194  75e9              STRB     r1,[r5,#0x17]         ;2001
001196  0c01              LSRS     r1,r0,#16             ;2001
001198  7629              STRB     r1,[r5,#0x18]         ;2001
00119a  0e00              LSRS     r0,r0,#24             ;2001
00119c  7668              STRB     r0,[r5,#0x19]         ;2001
00119e  79a0              LDRB     r0,[r4,#6]            ;2002
0011a0  21df              MOVS     r1,#0xdf              ;2002
0011a2  4008              ANDS     r0,r0,r1              ;2002
0011a4  71a0              STRB     r0,[r4,#6]            ;2002
0011a6  6821              LDR      r1,[r4,#0]            ;2003
0011a8  2001              MOVS     r0,#1                 ;2003
0011aa  7108              STRB     r0,[r1,#4]            ;2003
0011ac  6820              LDR      r0,[r4,#0]            ;2004
0011ae  f7fffffe          BL       sync
0011b2  bd70              POP      {r4-r6,pc}
;;;2011   
                          ENDP

                  f_close PROC
;;;2020   
;;;2021   FRESULT f_close (
0011b4  b510              PUSH     {r4,lr}
;;;2022   	FIL *fp		/* Pointer to the file object to be closed */
;;;2023   )
;;;2024   {
0011b6  0004              MOVS     r4,r0
;;;2025   	FRESULT res;
;;;2026   
;;;2027   
;;;2028   #if _FS_READONLY
;;;2029       FATFS *fs = fp->fs;
;;;2030   	res = validate(fp->fs, fp->id);
;;;2031   	if (res == FR_OK) fp->fs = NULL;
;;;2032   	LEAVE_FF(fs, res);
;;;2033   #else
;;;2034   	res = f_sync(fp);
0011b8  0020              MOVS     r0,r4
0011ba  f7fffffe          BL       f_sync
;;;2035   	if (res == FR_OK) fp->fs = NULL;
0011be  2800              CMP      r0,#0
0011c0  d101              BNE      |L1.4550|
0011c2  2100              MOVS     r1,#0
0011c4  6021              STR      r1,[r4,#0]
                  |L1.4550|
;;;2036   	return res;
;;;2037   #endif
;;;2038   }
0011c6  bd10              POP      {r4,pc}
;;;2039   
                          ENDP

                  f_lseek PROC
;;;2102   
;;;2103   FRESULT f_lseek (
0011c8  b5f0              PUSH     {r4-r7,lr}
;;;2104   	FIL *fp,		/* Pointer to the file object */
;;;2105   	DWORD ofs		/* File pointer from top of file */
;;;2106   )
;;;2107   {
0011ca  b085              SUB      sp,sp,#0x14
0011cc  0004              MOVS     r4,r0
0011ce  000d              MOVS     r5,r1
;;;2108   	FRESULT res;
;;;2109   	DWORD clst, bcs, nsect, ifptr;
;;;2110   
;;;2111   
;;;2112   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
0011d0  88a1              LDRH     r1,[r4,#4]
0011d2  6820              LDR      r0,[r4,#0]
0011d4  f7fffffe          BL       validate
0011d8  9002              STR      r0,[sp,#8]
;;;2113   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
0011da  9802              LDR      r0,[sp,#8]
0011dc  2800              CMP      r0,#0
0011de  d001              BEQ      |L1.4580|
0011e0  9802              LDR      r0,[sp,#8]
                  |L1.4578|
;;;2114   	if (fp->flag & FA__ERROR)			/* Check abort flag */
;;;2115   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2116   	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;2117   #if !_FS_READONLY
;;;2118   		 && !(fp->flag & FA_WRITE)
;;;2119   #endif
;;;2120   		) ofs = fp->fsize;
;;;2121   
;;;2122   	ifptr = fp->fptr;
;;;2123   	fp->fptr = nsect = 0; fp->csect = 255;
;;;2124   	if (ofs > 0) {
;;;2125   		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;2126   		if (ifptr > 0 &&
;;;2127   			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;2128   			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;2129   			ofs -= fp->fptr;
;;;2130   			clst = fp->curr_clust;
;;;2131   		} else {									/* When seek to back cluster, */
;;;2132   			clst = fp->org_clust;					/* start from the first cluster */
;;;2133   #if !_FS_READONLY
;;;2134   			if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;2135   				clst = create_chain(fp->fs, 0);
;;;2136   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2137   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2138   				fp->org_clust = clst;
;;;2139   			}
;;;2140   #endif
;;;2141   			fp->curr_clust = clst;
;;;2142   		}
;;;2143   		if (clst != 0) {
;;;2144   			while (ofs > bcs) {						/* Cluster following loop */
;;;2145   #if !_FS_READONLY
;;;2146   				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;2147   					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
;;;2148   					if (clst == 0) {				/* When disk gets full, clip file size */
;;;2149   						ofs = bcs; break;
;;;2150   					}
;;;2151   				} else
;;;2152   #endif
;;;2153   					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;2154   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2155   				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
;;;2156   				fp->curr_clust = clst;
;;;2157   				fp->fptr += bcs;
;;;2158   				ofs -= bcs;
;;;2159   			}
;;;2160   			fp->fptr += ofs;
;;;2161   			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
;;;2162   			if (ofs % SS(fp->fs)) {
;;;2163   				nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;2164   				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;2165   				nsect += fp->csect;
;;;2166   				fp->csect++;
;;;2167   			}
;;;2168   		}
;;;2169   	}
;;;2170   	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
;;;2171   #if !_FS_TINY
;;;2172   #if !_FS_READONLY
;;;2173   		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
;;;2174   			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
;;;2175   				ABORT(fp->fs, FR_DISK_ERR);
;;;2176   			fp->flag &= ~FA__DIRTY;
;;;2177   		}
;;;2178   #endif
;;;2179   		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
;;;2180   			ABORT(fp->fs, FR_DISK_ERR);
;;;2181   #endif
;;;2182   		fp->dsect = nsect;
;;;2183   	}
;;;2184   #if !_FS_READONLY
;;;2185   	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
;;;2186   		fp->fsize = fp->fptr;
;;;2187   		fp->flag |= FA__WRITTEN;
;;;2188   	}
;;;2189   #endif
;;;2190   
;;;2191   	LEAVE_FF(fp->fs, res);
;;;2192   }
0011e2  e406              B        |L1.2546|
                  |L1.4580|
0011e4  79a1              LDRB     r1,[r4,#6]            ;2114
0011e6  0608              LSLS     r0,r1,#24             ;2114
0011e8  d501              BPL      |L1.4590|
0011ea  2002              MOVS     r0,#2                 ;2115
0011ec  e403              B        |L1.2550|
                  |L1.4590|
0011ee  68e0              LDR      r0,[r4,#0xc]          ;2116
0011f0  42a8              CMP      r0,r5                 ;2116
0011f2  d202              BCS      |L1.4602|
0011f4  0789              LSLS     r1,r1,#30             ;2118
0011f6  d400              BMI      |L1.4602|
0011f8  0005              MOVS     r5,r0                 ;2120
                  |L1.4602|
0011fa  68a0              LDR      r0,[r4,#8]            ;2122
0011fc  9000              STR      r0,[sp,#0]            ;2122
0011fe  2000              MOVS     r0,#0                 ;2123
001200  9001              STR      r0,[sp,#4]            ;2123
001202  60a0              STR      r0,[r4,#8]            ;2123
001204  20ff              MOVS     r0,#0xff              ;2123
001206  71e0              STRB     r0,[r4,#7]            ;2123
001208  2d00              CMP      r5,#0                 ;2124
00120a  d071              BEQ      |L1.4848|
00120c  6820              LDR      r0,[r4,#0]            ;2125
00120e  9003              STR      r0,[sp,#0xc]          ;2125
001210  7880              LDRB     r0,[r0,#2]            ;2125
001212  0246              LSLS     r6,r0,#9              ;2125
001214  9800              LDR      r0,[sp,#0]            ;2126
001216  2800              CMP      r0,#0                 ;2126
001218  d013              BEQ      |L1.4674|
00121a  0031              MOVS     r1,r6                 ;2127
00121c  1e68              SUBS     r0,r5,#1              ;2127
00121e  f7fffffe          BL       __aeabi_uidivmod
001222  0007              MOVS     r7,r0                 ;2127
001224  9800              LDR      r0,[sp,#0]            ;2127
001226  0031              MOVS     r1,r6                 ;2127
001228  1e40              SUBS     r0,r0,#1              ;2127
00122a  f7fffffe          BL       __aeabi_uidivmod
00122e  4287              CMP      r7,r0                 ;2127
001230  d307              BCC      |L1.4674|
001232  9800              LDR      r0,[sp,#0]            ;2128
001234  1e40              SUBS     r0,r0,#1              ;2128
001236  1e71              SUBS     r1,r6,#1              ;2128
001238  4388              BICS     r0,r0,r1              ;2128
00123a  60a0              STR      r0,[r4,#8]            ;2128
00123c  1a2d              SUBS     r5,r5,r0              ;2129
00123e  6961              LDR      r1,[r4,#0x14]         ;2130
001240  e00c              B        |L1.4700|
                  |L1.4674|
001242  6921              LDR      r1,[r4,#0x10]         ;2132
001244  2900              CMP      r1,#0                 ;2134
001246  d108              BNE      |L1.4698|
001248  9803              LDR      r0,[sp,#0xc]          ;2135
00124a  f7fffffe          BL       create_chain
00124e  0001              MOVS     r1,r0                 ;2135
001250  2901              CMP      r1,#1                 ;2136
001252  d006              BEQ      |L1.4706|
001254  1c48              ADDS     r0,r1,#1              ;2137
001256  d00a              BEQ      |L1.4718|
001258  6121              STR      r1,[r4,#0x10]         ;2138
                  |L1.4698|
00125a  6161              STR      r1,[r4,#0x14]         ;2141
                  |L1.4700|
00125c  2900              CMP      r1,#0                 ;2143
00125e  d134              BNE      |L1.4810|
001260  e046              B        |L1.4848|
                  |L1.4706|
001262  79a0              LDRB     r0,[r4,#6]            ;2136
001264  2180              MOVS     r1,#0x80              ;2136
001266  4308              ORRS     r0,r0,r1              ;2136
001268  71a0              STRB     r0,[r4,#6]            ;2136
00126a  2002              MOVS     r0,#2                 ;2136
00126c  e4bd              B        |L1.3050|
                  |L1.4718|
00126e  79a0              LDRB     r0,[r4,#6]            ;2137
001270  2180              MOVS     r1,#0x80              ;2137
001272  4308              ORRS     r0,r0,r1              ;2137
001274  71a0              STRB     r0,[r4,#6]            ;2137
001276  2001              MOVS     r0,#1                 ;2137
001278  e4b7              B        |L1.3050|
                  |L1.4730|
00127a  79a0              LDRB     r0,[r4,#6]            ;2146
00127c  0780              LSLS     r0,r0,#30             ;2146
00127e  d507              BPL      |L1.4752|
001280  6820              LDR      r0,[r4,#0]            ;2147
001282  f7fffffe          BL       create_chain
001286  0001              MOVS     r1,r0                 ;2147
001288  2900              CMP      r1,#0                 ;2148
00128a  d105              BNE      |L1.4760|
00128c  0035              MOVS     r5,r6                 ;2149
00128e  e01e              B        |L1.4814|
                  |L1.4752|
001290  6820              LDR      r0,[r4,#0]            ;2153
001292  f7fffffe          BL       get_fat
001296  0001              MOVS     r1,r0                 ;2153
                  |L1.4760|
001298  1c48              ADDS     r0,r1,#1              ;2154
00129a  d00b              BEQ      |L1.4788|
00129c  2901              CMP      r1,#1                 ;2155
00129e  d903              BLS      |L1.4776|
0012a0  6820              LDR      r0,[r4,#0]            ;2155
0012a2  69c0              LDR      r0,[r0,#0x1c]         ;2155
0012a4  4288              CMP      r0,r1                 ;2155
0012a6  d80b              BHI      |L1.4800|
                  |L1.4776|
0012a8  79a0              LDRB     r0,[r4,#6]            ;2155
0012aa  2180              MOVS     r1,#0x80              ;2155
0012ac  4308              ORRS     r0,r0,r1              ;2155
0012ae  71a0              STRB     r0,[r4,#6]            ;2155
0012b0  2002              MOVS     r0,#2                 ;2155
0012b2  e49a              B        |L1.3050|
                  |L1.4788|
0012b4  79a0              LDRB     r0,[r4,#6]            ;2154
0012b6  2180              MOVS     r1,#0x80              ;2154
0012b8  4308              ORRS     r0,r0,r1              ;2154
0012ba  71a0              STRB     r0,[r4,#6]            ;2154
0012bc  2001              MOVS     r0,#1                 ;2154
0012be  e494              B        |L1.3050|
                  |L1.4800|
0012c0  6161              STR      r1,[r4,#0x14]         ;2156
0012c2  68a0              LDR      r0,[r4,#8]            ;2157
0012c4  1980              ADDS     r0,r0,r6              ;2157
0012c6  60a0              STR      r0,[r4,#8]            ;2157
0012c8  1bad              SUBS     r5,r5,r6              ;2158
                  |L1.4810|
0012ca  42b5              CMP      r5,r6                 ;2144
0012cc  d8d5              BHI      |L1.4730|
                  |L1.4814|
0012ce  68a0              LDR      r0,[r4,#8]            ;2160
0012d0  1940              ADDS     r0,r0,r5              ;2160
0012d2  60a0              STR      r0,[r4,#8]            ;2160
0012d4  0a68              LSRS     r0,r5,#9              ;2161
0012d6  71e0              STRB     r0,[r4,#7]            ;2161
0012d8  05e8              LSLS     r0,r5,#23             ;2162
0012da  d009              BEQ      |L1.4848|
0012dc  6820              LDR      r0,[r4,#0]            ;2163
0012de  f7fffffe          BL       clust2sect
0012e2  2800              CMP      r0,#0                 ;2164
0012e4  d01f              BEQ      |L1.4902|
0012e6  79e1              LDRB     r1,[r4,#7]            ;2165
0012e8  1808              ADDS     r0,r1,r0              ;2165
0012ea  9001              STR      r0,[sp,#4]            ;2165
0012ec  1c49              ADDS     r1,r1,#1              ;2166
0012ee  71e1              STRB     r1,[r4,#7]            ;2166
                  |L1.4848|
0012f0  68a0              LDR      r0,[r4,#8]            ;2170
0012f2  05c0              LSLS     r0,r0,#23             ;2170
0012f4  d032              BEQ      |L1.4956|
0012f6  69a2              LDR      r2,[r4,#0x18]         ;2170
0012f8  9801              LDR      r0,[sp,#4]            ;2170
0012fa  4282              CMP      r2,r0                 ;2170
0012fc  d02e              BEQ      |L1.4956|
0012fe  79a0              LDRB     r0,[r4,#6]            ;2173
001300  0025              MOVS     r5,r4                 ;2174
001302  3524              ADDS     r5,r5,#0x24           ;2174
001304  0640              LSLS     r0,r0,#25             ;2173
001306  2800              CMP      r0,#0                 ;2173
001308  da17              BGE      |L1.4922|
00130a  6820              LDR      r0,[r4,#0]            ;2174
00130c  2301              MOVS     r3,#1                 ;2174
00130e  7840              LDRB     r0,[r0,#1]            ;2174
001310  0029              MOVS     r1,r5                 ;2174
001312  f7fffffe          BL       disk_write
001316  2800              CMP      r0,#0                 ;2174
001318  d00b              BEQ      |L1.4914|
00131a  79a0              LDRB     r0,[r4,#6]            ;2175
00131c  2180              MOVS     r1,#0x80              ;2175
00131e  4308              ORRS     r0,r0,r1              ;2175
001320  71a0              STRB     r0,[r4,#6]            ;2175
001322  2001              MOVS     r0,#1                 ;2175
001324  e461              B        |L1.3050|
                  |L1.4902|
001326  79a0              LDRB     r0,[r4,#6]            ;2164
001328  2180              MOVS     r1,#0x80              ;2164
00132a  4308              ORRS     r0,r0,r1              ;2164
00132c  71a0              STRB     r0,[r4,#6]            ;2164
00132e  2002              MOVS     r0,#2                 ;2164
001330  e45b              B        |L1.3050|
                  |L1.4914|
001332  79a0              LDRB     r0,[r4,#6]            ;2176
001334  21bf              MOVS     r1,#0xbf              ;2176
001336  4008              ANDS     r0,r0,r1              ;2176
001338  71a0              STRB     r0,[r4,#6]            ;2176
                  |L1.4922|
00133a  6820              LDR      r0,[r4,#0]            ;2179
00133c  9a01              LDR      r2,[sp,#4]            ;2179
00133e  7840              LDRB     r0,[r0,#1]            ;2179
001340  2301              MOVS     r3,#1                 ;2179
001342  0029              MOVS     r1,r5                 ;2179
001344  f7fffffe          BL       disk_read
001348  2800              CMP      r0,#0                 ;2179
00134a  d005              BEQ      |L1.4952|
00134c  79a0              LDRB     r0,[r4,#6]            ;2180
00134e  2180              MOVS     r1,#0x80              ;2180
001350  4308              ORRS     r0,r0,r1              ;2180
001352  71a0              STRB     r0,[r4,#6]            ;2180
001354  2001              MOVS     r0,#1                 ;2180
001356  e448              B        |L1.3050|
                  |L1.4952|
001358  9801              LDR      r0,[sp,#4]            ;2182
00135a  61a0              STR      r0,[r4,#0x18]         ;2182
                  |L1.4956|
00135c  68e1              LDR      r1,[r4,#0xc]          ;2185
00135e  68a0              LDR      r0,[r4,#8]            ;2185
001360  4288              CMP      r0,r1                 ;2185
001362  d904              BLS      |L1.4974|
001364  60e0              STR      r0,[r4,#0xc]          ;2186
001366  79a0              LDRB     r0,[r4,#6]            ;2187
001368  2120              MOVS     r1,#0x20              ;2187
00136a  4308              ORRS     r0,r0,r1              ;2187
00136c  71a0              STRB     r0,[r4,#6]            ;2187
                  |L1.4974|
00136e  9802              LDR      r0,[sp,#8]            ;2191
001370  e43b              B        |L1.3050|
;;;2193   
                          ENDP

                  f_opendir PROC
;;;2201   
;;;2202   FRESULT f_opendir (
001372  b513              PUSH     {r0,r1,r4,lr}
;;;2203   	DIR *dj,			/* Pointer to directory object to create */
;;;2204   	const XCHAR *path	/* Pointer to the directory path */
;;;2205   )
;;;2206   {
001374  0004              MOVS     r4,r0
001376  b084              SUB      sp,sp,#0x10
;;;2207   	FRESULT res;
;;;2208   	NAMEBUF(sfn, lfn);
;;;2209   	BYTE *dir;
;;;2210   
;;;2211   
;;;2212   	res = chk_mounted(&path, &dj->fs, 0);
001378  2200              MOVS     r2,#0
00137a  0021              MOVS     r1,r4
00137c  a805              ADD      r0,sp,#0x14
00137e  f7fffffe          BL       chk_mounted
;;;2213   	if (res == FR_OK) {
001382  2800              CMP      r0,#0
001384  d126              BNE      |L1.5076|
;;;2214   		INITBUF((*dj), sfn, lfn);
001386  a801              ADD      r0,sp,#4
001388  61a0              STR      r0,[r4,#0x18]
;;;2215   		res = follow_path(dj, path);			/* Follow the path to the directory */
00138a  9905              LDR      r1,[sp,#0x14]
00138c  0020              MOVS     r0,r4
00138e  f7fffffe          BL       follow_path
;;;2216   		if (res == FR_OK) {						/* Follow completed */
001392  2800              CMP      r0,#0
001394  d11b              BNE      |L1.5070|
;;;2217   			dir = dj->dir;
001396  6962              LDR      r2,[r4,#0x14]
;;;2218   			if (dir) {							/* It is not the root dir */
001398  2a00              CMP      r2,#0
00139a  d00f              BEQ      |L1.5052|
;;;2219   				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
00139c  7ad1              LDRB     r1,[r2,#0xb]
00139e  06c9              LSLS     r1,r1,#27
0013a0  d50b              BPL      |L1.5050|
;;;2220   					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
0013a2  7d51              LDRB     r1,[r2,#0x15]
0013a4  7d13              LDRB     r3,[r2,#0x14]
0013a6  0209              LSLS     r1,r1,#8
0013a8  4319              ORRS     r1,r1,r3
0013aa  7ed3              LDRB     r3,[r2,#0x1b]
0013ac  7e92              LDRB     r2,[r2,#0x1a]
0013ae  0409              LSLS     r1,r1,#16
0013b0  021b              LSLS     r3,r3,#8
0013b2  4319              ORRS     r1,r1,r3
0013b4  4311              ORRS     r1,r1,r2
0013b6  60a1              STR      r1,[r4,#8]
0013b8  e000              B        |L1.5052|
                  |L1.5050|
;;;2221   				} else {						/* The object is not a directory */
;;;2222   					res = FR_NO_PATH;
0013ba  2005              MOVS     r0,#5
                  |L1.5052|
;;;2223   				}
;;;2224   			}
;;;2225   			if (res == FR_OK) {
0013bc  2800              CMP      r0,#0
0013be  d106              BNE      |L1.5070|
;;;2226   				dj->id = dj->fs->id;
0013c0  6820              LDR      r0,[r4,#0]
0013c2  88c0              LDRH     r0,[r0,#6]
0013c4  80a0              STRH     r0,[r4,#4]
;;;2227   				res = dir_seek(dj, 0);			/* Rewind dir */
0013c6  2100              MOVS     r1,#0
0013c8  0020              MOVS     r0,r4
0013ca  f7fffffe          BL       dir_seek
                  |L1.5070|
;;;2228   			}
;;;2229   		}
;;;2230   		if (res == FR_NO_FILE) res = FR_NO_PATH;
0013ce  2804              CMP      r0,#4
0013d0  d100              BNE      |L1.5076|
0013d2  2005              MOVS     r0,#5
                  |L1.5076|
;;;2231   	}
;;;2232   
;;;2233   	LEAVE_FF(dj->fs, res);
;;;2234   }
0013d4  b006              ADD      sp,sp,#0x18
0013d6  bd10              POP      {r4,pc}
;;;2235   
                          ENDP

                  f_readdir PROC
;;;2242   
;;;2243   FRESULT f_readdir (
0013d8  b5fe              PUSH     {r1-r7,lr}
;;;2244   	DIR *dj,			/* Pointer to the open directory object */
;;;2245   	FILINFO *fno		/* Pointer to file information to return */
;;;2246   )
;;;2247   {
0013da  0004              MOVS     r4,r0
0013dc  000d              MOVS     r5,r1
;;;2248   	FRESULT res;
;;;2249   	NAMEBUF(sfn, lfn);
;;;2250   
;;;2251   
;;;2252   	res = validate(dj->fs, dj->id);			/* Check validity of the object */
0013de  88a1              LDRH     r1,[r4,#4]
0013e0  6820              LDR      r0,[r4,#0]
0013e2  f7fffffe          BL       validate
;;;2253   	if (res == FR_OK) {
0013e6  2800              CMP      r0,#0
0013e8  d10e              BNE      |L1.5128|
;;;2254   		INITBUF((*dj), sfn, lfn);
0013ea  4668              MOV      r0,sp
0013ec  61a0              STR      r0,[r4,#0x18]
;;;2255   		if (!fno) {
0013ee  2d00              CMP      r5,#0
0013f0  d006              BEQ      |L1.5120|
;;;2256   			res = dir_seek(dj, 0);
;;;2257   		} else {
;;;2258   			res = dir_read(dj);
0013f2  0020              MOVS     r0,r4
0013f4  f7fffffe          BL       dir_read
0013f8  2600              MOVS     r6,#0                 ;2248
;;;2259   			if (res == FR_NO_FILE) {
0013fa  2804              CMP      r0,#4
0013fc  d005              BEQ      |L1.5130|
0013fe  e006              B        |L1.5134|
                  |L1.5120|
001400  2100              MOVS     r1,#0                 ;2256
001402  0020              MOVS     r0,r4                 ;2256
001404  f7fffffe          BL       dir_seek
                  |L1.5128|
;;;2260   				dj->sect = 0;
;;;2261   				res = FR_OK;
;;;2262   			}
;;;2263   			if (res == FR_OK) {				/* A valid entry is found */
;;;2264   				get_fileinfo(dj, fno);		/* Get the object information */
;;;2265   				res = dir_next(dj, FALSE);	/* Increment index for next */
;;;2266   				if (res == FR_NO_FILE) {
;;;2267   					dj->sect = 0;
;;;2268   					res = FR_OK;
;;;2269   				}
;;;2270   			}
;;;2271   		}
;;;2272   	}
;;;2273   
;;;2274   	LEAVE_FF(dj->fs, res);
;;;2275   }
001408  bdfe              POP      {r1-r7,pc}
                  |L1.5130|
00140a  6126              STR      r6,[r4,#0x10]         ;2260
00140c  2000              MOVS     r0,#0                 ;2261
                  |L1.5134|
00140e  2800              CMP      r0,#0                 ;2263
001410  d1fa              BNE      |L1.5128|
001412  0029              MOVS     r1,r5                 ;2264
001414  0020              MOVS     r0,r4                 ;2264
001416  f7fffffe          BL       get_fileinfo
00141a  2100              MOVS     r1,#0                 ;2265
00141c  0020              MOVS     r0,r4                 ;2265
00141e  f7fffffe          BL       dir_next
001422  2804              CMP      r0,#4                 ;2266
001424  d1f0              BNE      |L1.5128|
001426  6126              STR      r6,[r4,#0x10]         ;2267
001428  2000              MOVS     r0,#0                 ;2268
00142a  bdfe              POP      {r1-r7,pc}
;;;2276   
                          ENDP

                  f_stat PROC
;;;2283   
;;;2284   FRESULT f_stat (
00142c  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2285   	const XCHAR *path,	/* Pointer to the file path */
;;;2286   	FILINFO *fno		/* Pointer to file information to return */
;;;2287   )
;;;2288   {
00142e  000d              MOVS     r5,r1
001430  b08b              SUB      sp,sp,#0x2c
;;;2289   	FRESULT res;
;;;2290   	DIR dj;
;;;2291   	NAMEBUF(sfn, lfn);
;;;2292   
;;;2293   
;;;2294   	res = chk_mounted(&path, &dj.fs, 0);
001432  2200              MOVS     r2,#0
001434  a904              ADD      r1,sp,#0x10
001436  a80b              ADD      r0,sp,#0x2c
001438  f7fffffe          BL       chk_mounted
00143c  0004              MOVS     r4,r0
;;;2295   	if (res == FR_OK) {
00143e  2c00              CMP      r4,#0
001440  d111              BNE      |L1.5222|
;;;2296   		INITBUF(dj, sfn, lfn);
001442  a801              ADD      r0,sp,#4
001444  900a              STR      r0,[sp,#0x28]
;;;2297   		res = follow_path(&dj, path);	/* Follow the file path */
001446  990b              LDR      r1,[sp,#0x2c]
001448  a804              ADD      r0,sp,#0x10
00144a  f7fffffe          BL       follow_path
00144e  0004              MOVS     r4,r0
;;;2298   		if (res == FR_OK) {				/* Follwo completed */
001450  2c00              CMP      r4,#0
001452  d108              BNE      |L1.5222|
;;;2299   			if (dj.dir)	/* Found an object */
001454  9809              LDR      r0,[sp,#0x24]
001456  2800              CMP      r0,#0
001458  d004              BEQ      |L1.5220|
;;;2300   				get_fileinfo(&dj, fno);
00145a  0029              MOVS     r1,r5
00145c  a804              ADD      r0,sp,#0x10
00145e  f7fffffe          BL       get_fileinfo
001462  e000              B        |L1.5222|
                  |L1.5220|
;;;2301   			else		/* It is root dir */
;;;2302   				res = FR_INVALID_NAME;
001464  2406              MOVS     r4,#6
                  |L1.5222|
;;;2303   		}
;;;2304   	}
;;;2305   
;;;2306   	LEAVE_FF(dj.fs, res);
001466  0020              MOVS     r0,r4
                  |L1.5224|
;;;2307   }
001468  b00d              ADD      sp,sp,#0x34
00146a  bd30              POP      {r4,r5,pc}
;;;2308   
                          ENDP

                  f_getfree PROC
;;;2315   
;;;2316   FRESULT f_getfree (
00146c  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;2317   	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
;;;2318   	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
;;;2319   	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
;;;2320   )
;;;2321   {
00146e  0015              MOVS     r5,r2
001470  b082              SUB      sp,sp,#8
;;;2322   	FRESULT res;
;;;2323   	DWORD n, clst, sect, stat;
;;;2324   	UINT i;
;;;2325   	BYTE fat, *p;
;;;2326   
;;;2327   
;;;2328   	/* Get drive number */
;;;2329   	res = chk_mounted(&path, fatfs, 0);
001472  2200              MOVS     r2,#0
001474  0029              MOVS     r1,r5
001476  a802              ADD      r0,sp,#8
001478  f7fffffe          BL       chk_mounted
;;;2330   	if (res != FR_OK) LEAVE_FF(*fatfs, res);
00147c  2800              CMP      r0,#0
00147e  d108              BNE      |L1.5266|
;;;2331   
;;;2332   	/* If number of free cluster is valid, return it without cluster scan. */
;;;2333   	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
001480  6828              LDR      r0,[r5,#0]
001482  69c2              LDR      r2,[r0,#0x1c]
001484  6901              LDR      r1,[r0,#0x10]
001486  1e93              SUBS     r3,r2,#2
001488  4299              CMP      r1,r3
00148a  d803              BHI      |L1.5268|
;;;2334   		*nclst = (*fatfs)->free_clust;
00148c  9803              LDR      r0,[sp,#0xc]
00148e  6001              STR      r1,[r0,#0]
;;;2335   		LEAVE_FF(*fatfs, FR_OK);
001490  2000              MOVS     r0,#0
                  |L1.5266|
;;;2336   	}
;;;2337   
;;;2338   	/* Get number of free clusters */
;;;2339   	fat = (*fatfs)->fs_type;
;;;2340   	n = 0;
;;;2341   	if (fat == FS_FAT12) {
;;;2342   		clst = 2;
;;;2343   		do {
;;;2344   			stat = get_fat(*fatfs, clst);
;;;2345   			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
;;;2346   			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
;;;2347   			if (stat == 0) n++;
;;;2348   		} while (++clst < (*fatfs)->max_clust);
;;;2349   	} else {
;;;2350   		clst = (*fatfs)->max_clust;
;;;2351   		sect = (*fatfs)->fatbase;
;;;2352   		i = 0; p = 0;
;;;2353   		do {
;;;2354   			if (!i) {
;;;2355   				res = move_window(*fatfs, sect++);
;;;2356   				if (res != FR_OK)
;;;2357   					LEAVE_FF(*fatfs, res);
;;;2358   				p = (*fatfs)->win;
;;;2359   				i = SS(*fatfs);
;;;2360   			}
;;;2361   			if (fat == FS_FAT16) {
;;;2362   				if (LD_WORD(p) == 0) n++;
;;;2363   				p += 2; i -= 2;
;;;2364   			} else {
;;;2365   				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
;;;2366   				p += 4; i -= 4;
;;;2367   			}
;;;2368   		} while (--clst);
;;;2369   	}
;;;2370   	(*fatfs)->free_clust = n;
;;;2371   	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
;;;2372   	*nclst = n;
;;;2373   
;;;2374   	LEAVE_FF(*fatfs, FR_OK);
;;;2375   }
001492  e6a6              B        |L1.4578|
                  |L1.5268|
001494  7801              LDRB     r1,[r0,#0]            ;2339
001496  9100              STR      r1,[sp,#0]            ;2339
001498  2400              MOVS     r4,#0                 ;2340
00149a  9900              LDR      r1,[sp,#0]            ;2341
00149c  2901              CMP      r1,#1                 ;2341
00149e  d006              BEQ      |L1.5294|
0014a0  9201              STR      r2,[sp,#4]            ;2350
0014a2  6a06              LDR      r6,[r0,#0x20]         ;2351
0014a4  2100              MOVS     r1,#0                 ;2352
0014a6  2000              MOVS     r0,#0                 ;2352
                  |L1.5288|
0014a8  2900              CMP      r1,#0                 ;2354
0014aa  d017              BEQ      |L1.5340|
0014ac  e020              B        |L1.5360|
                  |L1.5294|
0014ae  2602              MOVS     r6,#2                 ;2342
                  |L1.5296|
0014b0  6828              LDR      r0,[r5,#0]            ;2344
0014b2  0031              MOVS     r1,r6                 ;2344
0014b4  f7fffffe          BL       get_fat
0014b8  1c41              ADDS     r1,r0,#1              ;2345
0014ba  d004              BEQ      |L1.5318|
0014bc  2801              CMP      r0,#1                 ;2346
0014be  d004              BEQ      |L1.5322|
0014c0  2800              CMP      r0,#0                 ;2347
0014c2  d004              BEQ      |L1.5326|
0014c4  e004              B        |L1.5328|
                  |L1.5318|
0014c6  2001              MOVS     r0,#1                 ;2345
0014c8  e68b              B        |L1.4578|
                  |L1.5322|
0014ca  2002              MOVS     r0,#2                 ;2346
0014cc  e689              B        |L1.4578|
                  |L1.5326|
0014ce  1c64              ADDS     r4,r4,#1              ;2347
                  |L1.5328|
0014d0  6828              LDR      r0,[r5,#0]            ;2348
0014d2  1c76              ADDS     r6,r6,#1              ;2348
0014d4  69c0              LDR      r0,[r0,#0x1c]         ;2348
0014d6  4286              CMP      r6,r0                 ;2348
0014d8  d3ea              BCC      |L1.5296|
0014da  e029              B        |L1.5424|
                  |L1.5340|
0014dc  0031              MOVS     r1,r6                 ;2355
0014de  6828              LDR      r0,[r5,#0]            ;2355
0014e0  1c76              ADDS     r6,r6,#1              ;2355
0014e2  f7fffffe          BL       move_window
0014e6  2800              CMP      r0,#0                 ;2356
0014e8  d1d3              BNE      |L1.5266|
0014ea  6828              LDR      r0,[r5,#0]            ;2358
0014ec  3030              ADDS     r0,r0,#0x30           ;2358
0014ee  49fe              LDR      r1,|L1.6376|
                  |L1.5360|
0014f0  9a00              LDR      r2,[sp,#0]            ;2361
0014f2  2a02              CMP      r2,#2                 ;2361
0014f4  d00c              BEQ      |L1.5392|
0014f6  78c3              LDRB     r3,[r0,#3]            ;2365
0014f8  7802              LDRB     r2,[r0,#0]            ;2365
0014fa  7847              LDRB     r7,[r0,#1]            ;2365
0014fc  061b              LSLS     r3,r3,#24             ;2365
0014fe  431a              ORRS     r2,r2,r3              ;2365
001500  7883              LDRB     r3,[r0,#2]            ;2365
001502  023f              LSLS     r7,r7,#8              ;2365
001504  041b              LSLS     r3,r3,#16             ;2365
001506  433b              ORRS     r3,r3,r7              ;2365
001508  431a              ORRS     r2,r2,r3              ;2365
00150a  0112              LSLS     r2,r2,#4              ;2365
00150c  d009              BEQ      |L1.5410|
00150e  e009              B        |L1.5412|
                  |L1.5392|
001510  7842              LDRB     r2,[r0,#1]            ;2362
001512  7803              LDRB     r3,[r0,#0]            ;2362
001514  0212              LSLS     r2,r2,#8              ;2362
001516  431a              ORRS     r2,r2,r3              ;2362
001518  d100              BNE      |L1.5404|
00151a  1c64              ADDS     r4,r4,#1              ;2362
                  |L1.5404|
00151c  1c80              ADDS     r0,r0,#2              ;2363
00151e  1e89              SUBS     r1,r1,#2              ;2363
001520  e002              B        |L1.5416|
                  |L1.5410|
001522  1c64              ADDS     r4,r4,#1              ;2365
                  |L1.5412|
001524  1d00              ADDS     r0,r0,#4              ;2366
001526  1f09              SUBS     r1,r1,#4              ;2366
                  |L1.5416|
001528  9a01              LDR      r2,[sp,#4]            ;2368
00152a  1e52              SUBS     r2,r2,#1              ;2368
00152c  9201              STR      r2,[sp,#4]            ;2368
00152e  d1bb              BNE      |L1.5288|
                  |L1.5424|
001530  6828              LDR      r0,[r5,#0]            ;2370
001532  6104              STR      r4,[r0,#0x10]         ;2370
001534  9800              LDR      r0,[sp,#0]            ;2371
001536  2803              CMP      r0,#3                 ;2371
001538  d102              BNE      |L1.5440|
00153a  6829              LDR      r1,[r5,#0]            ;2371
00153c  2001              MOVS     r0,#1                 ;2371
00153e  7148              STRB     r0,[r1,#5]            ;2371
                  |L1.5440|
001540  9803              LDR      r0,[sp,#0xc]          ;2372
001542  6004              STR      r4,[r0,#0]            ;2372
001544  2000              MOVS     r0,#0                 ;2374
001546  e64c              B        |L1.4578|
;;;2376   
                          ENDP

                  f_truncate PROC
;;;2383   
;;;2384   FRESULT f_truncate (
001548  b570              PUSH     {r4-r6,lr}
;;;2385   	FIL *fp		/* Pointer to the file object */
;;;2386   )
;;;2387   {
00154a  0004              MOVS     r4,r0
;;;2388   	FRESULT res;
;;;2389   	DWORD ncl;
;;;2390   
;;;2391   
;;;2392   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
00154c  88a1              LDRH     r1,[r4,#4]
00154e  6820              LDR      r0,[r4,#0]
001550  f7fffffe          BL       validate
001554  0005              MOVS     r5,r0
;;;2393   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
001556  2d00              CMP      r5,#0
001558  d001              BEQ      |L1.5470|
00155a  0028              MOVS     r0,r5
;;;2394   	if (fp->flag & FA__ERROR)			/* Check abort flag */
;;;2395   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2396   	if (!(fp->flag & FA_WRITE))			/* Check access mode */
;;;2397   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2398   
;;;2399   	if (fp->fsize > fp->fptr) {
;;;2400   		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
;;;2401   		fp->flag |= FA__WRITTEN;
;;;2402   		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
;;;2403   			res = remove_chain(fp->fs, fp->org_clust);
;;;2404   			fp->org_clust = 0;
;;;2405   		} else {				/* When truncate a part of the file, remove remaining clusters */
;;;2406   			ncl = get_fat(fp->fs, fp->curr_clust);
;;;2407   			res = FR_OK;
;;;2408   			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
;;;2409   			if (ncl == 1) res = FR_INT_ERR;
;;;2410   			if (res == FR_OK && ncl < fp->fs->max_clust) {
;;;2411   				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
;;;2412   				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
;;;2413   			}
;;;2414   		}
;;;2415   	}
;;;2416   	if (res != FR_OK) fp->flag |= FA__ERROR;
;;;2417   
;;;2418   	LEAVE_FF(fp->fs, res);
;;;2419   }
00155c  bd70              POP      {r4-r6,pc}
                  |L1.5470|
00155e  79a0              LDRB     r0,[r4,#6]            ;2394
001560  0601              LSLS     r1,r0,#24             ;2394
001562  d501              BPL      |L1.5480|
001564  2002              MOVS     r0,#2                 ;2395
001566  bd70              POP      {r4-r6,pc}
                  |L1.5480|
001568  0781              LSLS     r1,r0,#30             ;2396
00156a  d401              BMI      |L1.5488|
00156c  2007              MOVS     r0,#7                 ;2397
00156e  bd70              POP      {r4-r6,pc}
                  |L1.5488|
001570  68e2              LDR      r2,[r4,#0xc]          ;2399
001572  68a1              LDR      r1,[r4,#8]            ;2399
001574  428a              CMP      r2,r1                 ;2399
001576  d92b              BLS      |L1.5584|
001578  60e1              STR      r1,[r4,#0xc]          ;2400
00157a  2220              MOVS     r2,#0x20              ;2401
00157c  4310              ORRS     r0,r0,r2              ;2401
00157e  71a0              STRB     r0,[r4,#6]            ;2401
001580  2900              CMP      r1,#0                 ;2402
001582  d007              BEQ      |L1.5524|
001584  6961              LDR      r1,[r4,#0x14]         ;2406
001586  6820              LDR      r0,[r4,#0]            ;2406
001588  f7fffffe          BL       get_fat
00158c  0006              MOVS     r6,r0                 ;2406
00158e  1c70              ADDS     r0,r6,#1              ;2408
001590  d008              BEQ      |L1.5540|
001592  e008              B        |L1.5542|
                  |L1.5524|
001594  6921              LDR      r1,[r4,#0x10]         ;2403
001596  6820              LDR      r0,[r4,#0]            ;2403
001598  f7fffffe          BL       remove_chain
00159c  0005              MOVS     r5,r0                 ;2403
00159e  2000              MOVS     r0,#0                 ;2404
0015a0  6120              STR      r0,[r4,#0x10]         ;2404
0015a2  e015              B        |L1.5584|
                  |L1.5540|
0015a4  2501              MOVS     r5,#1                 ;2408
                  |L1.5542|
0015a6  2e01              CMP      r6,#1                 ;2409
0015a8  d100              BNE      |L1.5548|
0015aa  2502              MOVS     r5,#2                 ;2409
                  |L1.5548|
0015ac  2d00              CMP      r5,#0                 ;2410
0015ae  d10f              BNE      |L1.5584|
0015b0  6820              LDR      r0,[r4,#0]            ;2410
0015b2  69c1              LDR      r1,[r0,#0x1c]         ;2410
0015b4  42b1              CMP      r1,r6                 ;2410
0015b6  d90b              BLS      |L1.5584|
0015b8  4acc              LDR      r2,|L1.6380|
0015ba  6961              LDR      r1,[r4,#0x14]         ;2411
0015bc  f7fffffe          BL       put_fat
0015c0  0005              MOVS     r5,r0                 ;2411
0015c2  2d00              CMP      r5,#0                 ;2412
0015c4  d104              BNE      |L1.5584|
0015c6  6820              LDR      r0,[r4,#0]            ;2412
0015c8  0031              MOVS     r1,r6                 ;2412
0015ca  f7fffffe          BL       remove_chain
0015ce  0005              MOVS     r5,r0                 ;2412
                  |L1.5584|
0015d0  2d00              CMP      r5,#0                 ;2416
0015d2  d003              BEQ      |L1.5596|
0015d4  79a0              LDRB     r0,[r4,#6]            ;2416
0015d6  2180              MOVS     r1,#0x80              ;2416
0015d8  4308              ORRS     r0,r0,r1              ;2416
0015da  71a0              STRB     r0,[r4,#6]            ;2416
                  |L1.5596|
0015dc  0028              MOVS     r0,r5                 ;2418
0015de  bd70              POP      {r4-r6,pc}
;;;2420   
                          ENDP

                  f_unlink PROC
;;;2427   
;;;2428   FRESULT f_unlink (
0015e0  b511              PUSH     {r0,r4,lr}
;;;2429   	const XCHAR *path		/* Pointer to the file or directory path */
;;;2430   )
;;;2431   {
0015e2  b091              SUB      sp,sp,#0x44
;;;2432   	FRESULT res;
;;;2433   	DIR dj, sdj;
;;;2434   	NAMEBUF(sfn, lfn);
;;;2435   	BYTE *dir;
;;;2436   	DWORD dclst;
;;;2437   
;;;2438   
;;;2439   	res = chk_mounted(&path, &dj.fs, 1);
0015e4  2201              MOVS     r2,#1
0015e6  a90a              ADD      r1,sp,#0x28
0015e8  a811              ADD      r0,sp,#0x44
0015ea  f7fffffe          BL       chk_mounted
;;;2440   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
0015ee  2800              CMP      r0,#0
0015f0  d10e              BNE      |L1.5648|
;;;2441   
;;;2442   	INITBUF(dj, sfn, lfn);
0015f2  4668              MOV      r0,sp
0015f4  9010              STR      r0,[sp,#0x40]
;;;2443   	res = follow_path(&dj, path);			/* Follow the file path */
0015f6  9911              LDR      r1,[sp,#0x44]
0015f8  a80a              ADD      r0,sp,#0x28
0015fa  f7fffffe          BL       follow_path
;;;2444   	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
;;;2445   		res = FR_INVALID_NAME;
;;;2446   	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
0015fe  2800              CMP      r0,#0
001600  d106              BNE      |L1.5648|
;;;2447   
;;;2448   	dir = dj.dir;
001602  980f              LDR      r0,[sp,#0x3c]
;;;2449   	if (!dir)								/* Is it the root directory? */
001604  2800              CMP      r0,#0
001606  d005              BEQ      |L1.5652|
;;;2450   		LEAVE_FF(dj.fs, FR_INVALID_NAME);
;;;2451   	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
001608  7ac1              LDRB     r1,[r0,#0xb]
00160a  07ca              LSLS     r2,r1,#31
00160c  d004              BEQ      |L1.5656|
;;;2452   		LEAVE_FF(dj.fs, FR_DENIED);
00160e  2007              MOVS     r0,#7
                  |L1.5648|
;;;2453   	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
;;;2454   
;;;2455   	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
;;;2456   		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
;;;2457   		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
;;;2458   		sdj.sclust = dclst;
;;;2459   		res = dir_seek(&sdj, 2);
;;;2460   		if (res != FR_OK) LEAVE_FF(dj.fs, res);
;;;2461   		res = dir_read(&sdj);
;;;2462   		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
;;;2463   		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
;;;2464   	}
;;;2465   
;;;2466   	res = dir_remove(&dj);					/* Remove directory entry */
;;;2467   	if (res == FR_OK) {
;;;2468   		if (dclst)
;;;2469   			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
;;;2470   		if (res == FR_OK) res = sync(dj.fs);
;;;2471   	}
;;;2472   
;;;2473   	LEAVE_FF(dj.fs, res);
;;;2474   }
001610  b012              ADD      sp,sp,#0x48
001612  bd10              POP      {r4,pc}
                  |L1.5652|
001614  2006              MOVS     r0,#6                 ;2450
001616  e7fb              B        |L1.5648|
                  |L1.5656|
001618  7d42              LDRB     r2,[r0,#0x15]         ;2453
00161a  7d03              LDRB     r3,[r0,#0x14]         ;2453
00161c  0212              LSLS     r2,r2,#8              ;2453
00161e  431a              ORRS     r2,r2,r3              ;2453
001620  0414              LSLS     r4,r2,#16             ;2453
001622  7ec2              LDRB     r2,[r0,#0x1b]         ;2453
001624  7e80              LDRB     r0,[r0,#0x1a]         ;2453
001626  0212              LSLS     r2,r2,#8              ;2453
001628  4314              ORRS     r4,r4,r2              ;2453
00162a  4304              ORRS     r4,r4,r0              ;2453
00162c  06c8              LSLS     r0,r1,#27             ;2455
00162e  d517              BPL      |L1.5728|
001630  2c02              CMP      r4,#2                 ;2456
001632  d201              BCS      |L1.5688|
001634  2002              MOVS     r0,#2                 ;2456
001636  e7eb              B        |L1.5648|
                  |L1.5688|
001638  221c              MOVS     r2,#0x1c              ;2457
00163a  a90a              ADD      r1,sp,#0x28           ;2457
00163c  a803              ADD      r0,sp,#0xc            ;2457
00163e  f7fffffe          BL       mem_cpy
001642  9405              STR      r4,[sp,#0x14]         ;2458
001644  2102              MOVS     r1,#2                 ;2459
001646  a803              ADD      r0,sp,#0xc            ;2459
001648  f7fffffe          BL       dir_seek
00164c  2800              CMP      r0,#0                 ;2460
00164e  d1df              BNE      |L1.5648|
001650  a803              ADD      r0,sp,#0xc            ;2461
001652  f7fffffe          BL       dir_read
001656  2800              CMP      r0,#0                 ;2462
001658  d100              BNE      |L1.5724|
00165a  2007              MOVS     r0,#7                 ;2462
                  |L1.5724|
00165c  2804              CMP      r0,#4                 ;2463
00165e  d1d7              BNE      |L1.5648|
                  |L1.5728|
001660  a80a              ADD      r0,sp,#0x28           ;2466
001662  f7fffffe          BL       dir_remove
001666  2800              CMP      r0,#0                 ;2467
001668  d1d2              BNE      |L1.5648|
00166a  2c00              CMP      r4,#0                 ;2468
00166c  d003              BEQ      |L1.5750|
00166e  980a              LDR      r0,[sp,#0x28]         ;2469
001670  0021              MOVS     r1,r4                 ;2469
001672  f7fffffe          BL       remove_chain
                  |L1.5750|
001676  2800              CMP      r0,#0                 ;2470
001678  d1ca              BNE      |L1.5648|
00167a  980a              LDR      r0,[sp,#0x28]         ;2470
00167c  f7fffffe          BL       sync
001680  e7c6              B        |L1.5648|
;;;2475   
                          ENDP

                  f_mkdir PROC
;;;2482   
;;;2483   FRESULT f_mkdir (
001682  b5f1              PUSH     {r0,r4-r7,lr}
;;;2484   	const XCHAR *path		/* Pointer to the directory path */
;;;2485   )
;;;2486   {
001684  b092              SUB      sp,sp,#0x48
;;;2487   	FRESULT res;
;;;2488   	DIR dj;
;;;2489   	NAMEBUF(sfn, lfn);
;;;2490   	BYTE *dir, n;
;;;2491   	DWORD dsect, dclst, pclst, tim;
;;;2492   
;;;2493   
;;;2494   	res = chk_mounted(&path, &dj.fs, 1);
001686  2201              MOVS     r2,#1
001688  a903              ADD      r1,sp,#0xc
00168a  a812              ADD      r0,sp,#0x48
00168c  f7fffffe          BL       chk_mounted
;;;2495   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
001690  2800              CMP      r0,#0
001692  d171              BNE      |L1.6008|
;;;2496   
;;;2497   	INITBUF(dj, sfn, lfn);
001694  4668              MOV      r0,sp
001696  9009              STR      r0,[sp,#0x24]
;;;2498   	res = follow_path(&dj, path);			/* Follow the file path */
001698  9912              LDR      r1,[sp,#0x48]
00169a  a803              ADD      r0,sp,#0xc
00169c  f7fffffe          BL       follow_path
;;;2499   	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
0016a0  2800              CMP      r0,#0
0016a2  d100              BNE      |L1.5798|
0016a4  2008              MOVS     r0,#8
                  |L1.5798|
;;;2500   	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
;;;2501   		res = FR_INVALID_NAME;
;;;2502   	if (res != FR_NO_FILE)					/* Any error occured */
0016a6  2804              CMP      r0,#4
0016a8  d166              BNE      |L1.6008|
;;;2503   		LEAVE_FF(dj.fs, res);
;;;2504   
;;;2505   	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
0016aa  9803              LDR      r0,[sp,#0xc]
0016ac  2100              MOVS     r1,#0
0016ae  f7fffffe          BL       create_chain
0016b2  0005              MOVS     r5,r0
;;;2506   	res = FR_OK;
0016b4  2000              MOVS     r0,#0
;;;2507   	if (dclst == 0) res = FR_DENIED;
0016b6  2d00              CMP      r5,#0
0016b8  d100              BNE      |L1.5820|
0016ba  2007              MOVS     r0,#7
                  |L1.5820|
;;;2508   	if (dclst == 1) res = FR_INT_ERR;
0016bc  2d01              CMP      r5,#1
0016be  d100              BNE      |L1.5826|
0016c0  2002              MOVS     r0,#2
                  |L1.5826|
;;;2509   	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
0016c2  1c69              ADDS     r1,r5,#1
0016c4  d100              BNE      |L1.5832|
0016c6  2001              MOVS     r0,#1
                  |L1.5832|
;;;2510   	if (res == FR_OK)
0016c8  2800              CMP      r0,#0
0016ca  d103              BNE      |L1.5844|
;;;2511   		res = move_window(dj.fs, 0);
0016cc  9803              LDR      r0,[sp,#0xc]
0016ce  2100              MOVS     r1,#0
0016d0  f7fffffe          BL       move_window
                  |L1.5844|
;;;2512   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
0016d4  2800              CMP      r0,#0
0016d6  d14f              BNE      |L1.6008|
;;;2513   	dsect = clust2sect(dj.fs, dclst);
0016d8  9803              LDR      r0,[sp,#0xc]
0016da  0029              MOVS     r1,r5
0016dc  f7fffffe          BL       clust2sect
0016e0  0006              MOVS     r6,r0
;;;2514   
;;;2515   	dir = dj.fs->win;						/* Initialize the new directory table */
0016e2  9c03              LDR      r4,[sp,#0xc]
0016e4  3430              ADDS     r4,r4,#0x30
;;;2516   	mem_set(dir, 0, SS(dj.fs));
0016e6  4a80              LDR      r2,|L1.6376|
0016e8  2100              MOVS     r1,#0
0016ea  0020              MOVS     r0,r4
0016ec  f7fffffe          BL       mem_set
;;;2517   	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
0016f0  220b              MOVS     r2,#0xb
0016f2  2120              MOVS     r1,#0x20
0016f4  0020              MOVS     r0,r4
0016f6  f7fffffe          BL       mem_set
;;;2518   	dir[DIR_Name] = '.';
0016fa  202e              MOVS     r0,#0x2e
0016fc  7020              STRB     r0,[r4,#0]
;;;2519   	dir[DIR_Attr] = AM_DIR;
0016fe  2010              MOVS     r0,#0x10
001700  72e0              STRB     r0,[r4,#0xb]
;;;2520   	tim = get_fattime();
001702  f7fffffe          BL       get_fattime
;;;2521   	ST_DWORD(dir+DIR_WrtTime, tim);
001706  0601              LSLS     r1,r0,#24
001708  0e09              LSRS     r1,r1,#24
00170a  9111              STR      r1,[sp,#0x44]
00170c  75a1              STRB     r1,[r4,#0x16]
00170e  0401              LSLS     r1,r0,#16
001710  0e09              LSRS     r1,r1,#24
001712  9110              STR      r1,[sp,#0x40]
001714  75e1              STRB     r1,[r4,#0x17]
001716  0201              LSLS     r1,r0,#8
001718  0e09              LSRS     r1,r1,#24
00171a  910f              STR      r1,[sp,#0x3c]
00171c  7621              STRB     r1,[r4,#0x18]
00171e  0e00              LSRS     r0,r0,#24
001720  900e              STR      r0,[sp,#0x38]
001722  7660              STRB     r0,[r4,#0x19]
;;;2522   	ST_WORD(dir+DIR_FstClusLO, dclst);
001724  0628              LSLS     r0,r5,#24
001726  0e00              LSRS     r0,r0,#24
001728  900d              STR      r0,[sp,#0x34]
00172a  76a0              STRB     r0,[r4,#0x1a]
00172c  0428              LSLS     r0,r5,#16
00172e  0e00              LSRS     r0,r0,#24
001730  900c              STR      r0,[sp,#0x30]
001732  76e0              STRB     r0,[r4,#0x1b]
;;;2523   	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
001734  0228              LSLS     r0,r5,#8
001736  0e00              LSRS     r0,r0,#24
001738  900b              STR      r0,[sp,#0x2c]
00173a  7520              STRB     r0,[r4,#0x14]
00173c  0e28              LSRS     r0,r5,#24
00173e  900a              STR      r0,[sp,#0x28]
001740  7560              STRB     r0,[r4,#0x15]
;;;2524   	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
001742  2220              MOVS     r2,#0x20
001744  18a0              ADDS     r0,r4,r2
001746  0021              MOVS     r1,r4
001748  0007              MOVS     r7,r0
00174a  f7fffffe          BL       mem_cpy
;;;2525   	dir[33] = '.';
00174e  202e              MOVS     r0,#0x2e
001750  7078              STRB     r0,[r7,#1]
;;;2526   	pclst = dj.sclust;
001752  9805              LDR      r0,[sp,#0x14]
;;;2527   	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
001754  9903              LDR      r1,[sp,#0xc]
001756  7809              LDRB     r1,[r1,#0]
001758  2903              CMP      r1,#3
00175a  d104              BNE      |L1.5990|
00175c  9903              LDR      r1,[sp,#0xc]
00175e  6a49              LDR      r1,[r1,#0x24]
001760  4281              CMP      r1,r0
001762  d100              BNE      |L1.5990|
;;;2528   		pclst = 0;
001764  2000              MOVS     r0,#0
                  |L1.5990|
;;;2529   	ST_WORD(dir+32+DIR_FstClusLO, pclst);
001766  76b8              STRB     r0,[r7,#0x1a]
001768  0a01              LSRS     r1,r0,#8
00176a  76f9              STRB     r1,[r7,#0x1b]
;;;2530   	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
00176c  0c01              LSRS     r1,r0,#16
00176e  7539              STRB     r1,[r7,#0x14]
001770  0e00              LSRS     r0,r0,#24
001772  7578              STRB     r0,[r7,#0x15]
;;;2531   	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
001774  2700              MOVS     r7,#0
001776  e014              B        |L1.6050|
                  |L1.6008|
001778  e03d              B        |L1.6134|
                  |L1.6010|
;;;2532   		dj.fs->winsect = dsect++;
00177a  9803              LDR      r0,[sp,#0xc]
00177c  62c6              STR      r6,[r0,#0x2c]
00177e  1c76              ADDS     r6,r6,#1
;;;2533   		dj.fs->wflag = 1;
001780  9903              LDR      r1,[sp,#0xc]
001782  2001              MOVS     r0,#1
001784  7108              STRB     r0,[r1,#4]
;;;2534   		res = move_window(dj.fs, 0);
001786  9803              LDR      r0,[sp,#0xc]
001788  2100              MOVS     r1,#0
00178a  f7fffffe          BL       move_window
;;;2535   		if (res) LEAVE_FF(dj.fs, res);
00178e  2800              CMP      r0,#0
001790  d131              BNE      |L1.6134|
;;;2536   		mem_set(dir, 0, SS(dj.fs));
001792  4a55              LDR      r2,|L1.6376|
001794  2100              MOVS     r1,#0
001796  0020              MOVS     r0,r4
001798  f7fffffe          BL       mem_set
00179c  1c7f              ADDS     r7,r7,#1              ;2531
00179e  063f              LSLS     r7,r7,#24             ;2531
0017a0  0e3f              LSRS     r7,r7,#24             ;2531
                  |L1.6050|
0017a2  9803              LDR      r0,[sp,#0xc]          ;2531
0017a4  7880              LDRB     r0,[r0,#2]            ;2531
0017a6  42b8              CMP      r0,r7                 ;2531
0017a8  d8e7              BHI      |L1.6010|
;;;2537   	}
;;;2538   
;;;2539   	res = dir_register(&dj);
0017aa  a803              ADD      r0,sp,#0xc
0017ac  f7fffffe          BL       dir_register
0017b0  0004              MOVS     r4,r0
;;;2540   	if (res != FR_OK) {
0017b2  2c00              CMP      r4,#0
0017b4  d004              BEQ      |L1.6080|
;;;2541   		remove_chain(dj.fs, dclst);
0017b6  9803              LDR      r0,[sp,#0xc]
0017b8  0029              MOVS     r1,r5
0017ba  f7fffffe          BL       remove_chain
0017be  e019              B        |L1.6132|
                  |L1.6080|
;;;2542   	} else {
;;;2543   		dir = dj.dir;
0017c0  9808              LDR      r0,[sp,#0x20]
;;;2544   		dir[DIR_Attr] = AM_DIR;					/* Attribute */
0017c2  2110              MOVS     r1,#0x10
0017c4  72c1              STRB     r1,[r0,#0xb]
;;;2545   		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
0017c6  9911              LDR      r1,[sp,#0x44]
0017c8  7581              STRB     r1,[r0,#0x16]
0017ca  9910              LDR      r1,[sp,#0x40]
0017cc  75c1              STRB     r1,[r0,#0x17]
0017ce  990f              LDR      r1,[sp,#0x3c]
0017d0  7601              STRB     r1,[r0,#0x18]
0017d2  990e              LDR      r1,[sp,#0x38]
0017d4  7641              STRB     r1,[r0,#0x19]
;;;2546   		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
0017d6  990d              LDR      r1,[sp,#0x34]
0017d8  7681              STRB     r1,[r0,#0x1a]
0017da  990c              LDR      r1,[sp,#0x30]
0017dc  76c1              STRB     r1,[r0,#0x1b]
;;;2547   		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
0017de  990b              LDR      r1,[sp,#0x2c]
0017e0  7501              STRB     r1,[r0,#0x14]
0017e2  990a              LDR      r1,[sp,#0x28]
0017e4  7541              STRB     r1,[r0,#0x15]
;;;2548   		dj.fs->wflag = 1;
0017e6  9903              LDR      r1,[sp,#0xc]
0017e8  2001              MOVS     r0,#1
0017ea  7108              STRB     r0,[r1,#4]
;;;2549   		res = sync(dj.fs);
0017ec  9803              LDR      r0,[sp,#0xc]
0017ee  f7fffffe          BL       sync
0017f2  0004              MOVS     r4,r0
                  |L1.6132|
;;;2550   	}
;;;2551   
;;;2552   	LEAVE_FF(dj.fs, res);
0017f4  0020              MOVS     r0,r4
                  |L1.6134|
;;;2553   }
0017f6  b013              ADD      sp,sp,#0x4c
0017f8  bdf0              POP      {r4-r7,pc}
;;;2554   
                          ENDP

                  f_chmod PROC
;;;2561   
;;;2562   FRESULT f_chmod (
0017fa  b537              PUSH     {r0-r2,r4,r5,lr}
;;;2563   	const XCHAR *path,	/* Pointer to the file path */
;;;2564   	BYTE value,			/* Attribute bits */
;;;2565   	BYTE mask			/* Attribute mask to change */
;;;2566   )
;;;2567   {
0017fc  000d              MOVS     r5,r1
0017fe  0014              MOVS     r4,r2
001800  b08a              SUB      sp,sp,#0x28
;;;2568   	FRESULT res;
;;;2569   	DIR dj;
;;;2570   	NAMEBUF(sfn, lfn);
;;;2571   	BYTE *dir;
;;;2572   
;;;2573   
;;;2574   	res = chk_mounted(&path, &dj.fs, 1);
001802  2201              MOVS     r2,#1
001804  a903              ADD      r1,sp,#0xc
001806  a80a              ADD      r0,sp,#0x28
001808  f7fffffe          BL       chk_mounted
;;;2575   	if (res == FR_OK) {
00180c  2800              CMP      r0,#0
00180e  d117              BNE      |L1.6208|
;;;2576   		INITBUF(dj, sfn, lfn);
001810  4668              MOV      r0,sp
001812  9009              STR      r0,[sp,#0x24]
;;;2577   		res = follow_path(&dj, path);		/* Follow the file path */
001814  990a              LDR      r1,[sp,#0x28]
001816  a803              ADD      r0,sp,#0xc
001818  f7fffffe          BL       follow_path
;;;2578   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
;;;2579   			res = FR_INVALID_NAME;
;;;2580   		if (res == FR_OK) {
00181c  2800              CMP      r0,#0
00181e  d10f              BNE      |L1.6208|
;;;2581   			dir = dj.dir;
001820  9808              LDR      r0,[sp,#0x20]
;;;2582   			if (!dir) {						/* Is it a root directory? */
001822  2800              CMP      r0,#0
001824  d00d              BEQ      |L1.6210|
;;;2583   				res = FR_INVALID_NAME;
;;;2584   			} else {						/* File or sub directory */
;;;2585   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
001826  2127              MOVS     r1,#0x27
001828  400c              ANDS     r4,r4,r1
;;;2586   				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
00182a  7ac1              LDRB     r1,[r0,#0xb]
00182c  4025              ANDS     r5,r5,r4
00182e  43a1              BICS     r1,r1,r4
001830  430d              ORRS     r5,r5,r1
001832  72c5              STRB     r5,[r0,#0xb]
;;;2587   				dj.fs->wflag = 1;
001834  9903              LDR      r1,[sp,#0xc]
001836  2001              MOVS     r0,#1
001838  7108              STRB     r0,[r1,#4]
;;;2588   				res = sync(dj.fs);
00183a  9803              LDR      r0,[sp,#0xc]
00183c  f7fffffe          BL       sync
                  |L1.6208|
;;;2589   			}
;;;2590   		}
;;;2591   	}
;;;2592   
;;;2593   	LEAVE_FF(dj.fs, res);
;;;2594   }
001840  e612              B        |L1.5224|
                  |L1.6210|
001842  2006              MOVS     r0,#6                 ;2583
001844  e610              B        |L1.5224|
;;;2595   
                          ENDP

                  f_utime PROC
;;;2602   
;;;2603   FRESULT f_utime (
001846  b513              PUSH     {r0,r1,r4,lr}
;;;2604   	const XCHAR *path,	/* Pointer to the file/directory name */
;;;2605   	const FILINFO *fno	/* Pointer to the timestamp to be set */
;;;2606   )
;;;2607   {
001848  000c              MOVS     r4,r1
00184a  b08a              SUB      sp,sp,#0x28
;;;2608   	FRESULT res;
;;;2609   	DIR dj;
;;;2610   	NAMEBUF(sfn, lfn);
;;;2611   	BYTE *dir;
;;;2612   
;;;2613   
;;;2614   	res = chk_mounted(&path, &dj.fs, 1);
00184c  2201              MOVS     r2,#1
00184e  a903              ADD      r1,sp,#0xc
001850  a80a              ADD      r0,sp,#0x28
001852  f7fffffe          BL       chk_mounted
;;;2615   	if (res == FR_OK) {
001856  2800              CMP      r0,#0
001858  d11a              BNE      |L1.6288|
;;;2616   		INITBUF(dj, sfn, lfn);
00185a  4668              MOV      r0,sp
00185c  9009              STR      r0,[sp,#0x24]
;;;2617   		res = follow_path(&dj, path);	/* Follow the file path */
00185e  990a              LDR      r1,[sp,#0x28]
001860  a803              ADD      r0,sp,#0xc
001862  f7fffffe          BL       follow_path
;;;2618   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
;;;2619   			res = FR_INVALID_NAME;
;;;2620   		if (res == FR_OK) {
001866  2800              CMP      r0,#0
001868  d112              BNE      |L1.6288|
;;;2621   			dir = dj.dir;
00186a  9808              LDR      r0,[sp,#0x20]
;;;2622   			if (!dir) {				/* Root directory */
00186c  2800              CMP      r0,#0
00186e  d011              BEQ      |L1.6292|
;;;2623   				res = FR_INVALID_NAME;
;;;2624   			} else {				/* File or sub-directory */
;;;2625   				ST_WORD(dir+DIR_WrtTime, fno->ftime);
001870  88e1              LDRH     r1,[r4,#6]
001872  7581              STRB     r1,[r0,#0x16]
001874  88e1              LDRH     r1,[r4,#6]
001876  0a09              LSRS     r1,r1,#8
001878  75c1              STRB     r1,[r0,#0x17]
;;;2626   				ST_WORD(dir+DIR_WrtDate, fno->fdate);
00187a  88a1              LDRH     r1,[r4,#4]
00187c  7601              STRB     r1,[r0,#0x18]
00187e  88a1              LDRH     r1,[r4,#4]
001880  0a09              LSRS     r1,r1,#8
001882  7641              STRB     r1,[r0,#0x19]
;;;2627   				dj.fs->wflag = 1;
001884  9903              LDR      r1,[sp,#0xc]
001886  2001              MOVS     r0,#1
001888  7108              STRB     r0,[r1,#4]
;;;2628   				res = sync(dj.fs);
00188a  9803              LDR      r0,[sp,#0xc]
00188c  f7fffffe          BL       sync
                  |L1.6288|
;;;2629   			}
;;;2630   		}
;;;2631   	}
;;;2632   
;;;2633   	LEAVE_FF(dj.fs, res);
;;;2634   }
001890  b00c              ADD      sp,sp,#0x30
001892  bd10              POP      {r4,pc}
                  |L1.6292|
001894  2006              MOVS     r0,#6                 ;2623
001896  e7fb              B        |L1.6288|
;;;2635   
                          ENDP

                  f_rename PROC
;;;2642   
;;;2643   FRESULT f_rename (
001898  b573              PUSH     {r0,r1,r4-r6,lr}
;;;2644   	const XCHAR *path_old,	/* Pointer to the old name */
;;;2645   	const XCHAR *path_new	/* Pointer to the new name */
;;;2646   )
;;;2647   {
00189a  000c              MOVS     r4,r1
00189c  b098              SUB      sp,sp,#0x60
;;;2648   	FRESULT res;
;;;2649   	DIR dj_old, dj_new;
;;;2650   	NAMEBUF(sfn, lfn);
;;;2651   	BYTE buf[21], *dir;
;;;2652   	DWORD dw;
;;;2653   
;;;2654   
;;;2655   	INITBUF(dj_old, sfn, lfn);
00189e  a807              ADD      r0,sp,#0x1c
0018a0  9017              STR      r0,[sp,#0x5c]
;;;2656   	res = chk_mounted(&path_old, &dj_old.fs, 1);
0018a2  2201              MOVS     r2,#1
0018a4  a911              ADD      r1,sp,#0x44
0018a6  a818              ADD      r0,sp,#0x60
0018a8  f7fffffe          BL       chk_mounted
;;;2657   	if (res == FR_OK) {
0018ac  2800              CMP      r0,#0
0018ae  d105              BNE      |L1.6332|
;;;2658   		dj_new.fs = dj_old.fs;
0018b0  9811              LDR      r0,[sp,#0x44]
0018b2  900a              STR      r0,[sp,#0x28]
;;;2659   		res = follow_path(&dj_old, path_old);	/* Check old object */
0018b4  9918              LDR      r1,[sp,#0x60]
0018b6  a811              ADD      r0,sp,#0x44
0018b8  f7fffffe          BL       follow_path
                  |L1.6332|
;;;2660   		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
;;;2661   			res = FR_INVALID_NAME;
;;;2662   	}
;;;2663   	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
0018bc  2800              CMP      r0,#0
0018be  d11b              BNE      |L1.6392|
;;;2664   
;;;2665   	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
0018c0  9816              LDR      r0,[sp,#0x58]
0018c2  2800              CMP      r0,#0
0018c4  d017              BEQ      |L1.6390|
;;;2666   	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
0018c6  9916              LDR      r1,[sp,#0x58]
0018c8  2215              MOVS     r2,#0x15
0018ca  310b              ADDS     r1,r1,#0xb
0018cc  a801              ADD      r0,sp,#4
0018ce  f7fffffe          BL       mem_cpy
;;;2667   
;;;2668   	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
0018d2  221c              MOVS     r2,#0x1c
0018d4  a911              ADD      r1,sp,#0x44
0018d6  a80a              ADD      r0,sp,#0x28
0018d8  f7fffffe          BL       mem_cpy
;;;2669   	res = follow_path(&dj_new, path_new);		/* Check new object */
0018dc  0021              MOVS     r1,r4
0018de  a80a              ADD      r0,sp,#0x28
0018e0  f7fffffe          BL       follow_path
0018e4  0004              MOVS     r4,r0
;;;2670   	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
0018e6  e003              B        |L1.6384|
                  |L1.6376|
                          DCD      0x00000200
                  |L1.6380|
                          DCD      0x0fffffff
                  |L1.6384|
0018f0  2c00              CMP      r4,#0
0018f2  d003              BEQ      |L1.6396|
0018f4  e003              B        |L1.6398|
                  |L1.6390|
0018f6  2004              MOVS     r0,#4                 ;2665
                  |L1.6392|
;;;2671   	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
;;;2672   		res = dir_register(&dj_new);			/* Register the new object */
;;;2673   		if (res == FR_OK) {
;;;2674   			dir = dj_new.dir;					/* Copy object information into new entry */
;;;2675   			mem_cpy(dir+13, buf+2, 19);
;;;2676   			dir[DIR_Attr] = buf[0] | AM_ARC;
;;;2677   			dj_old.fs->wflag = 1;
;;;2678   			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
;;;2679   				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
;;;2680   				if (!dw) {
;;;2681   					res = FR_INT_ERR;
;;;2682   				} else {
;;;2683   					res = move_window(dj_new.fs, dw);
;;;2684   					dir = dj_new.fs->win+32;
;;;2685   					if (res == FR_OK && dir[1] == '.') {
;;;2686   						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
;;;2687   						ST_WORD(dir+DIR_FstClusLO, dw);
;;;2688   						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
;;;2689   						dj_new.fs->wflag = 1;
;;;2690   					}
;;;2691   				}
;;;2692   			}
;;;2693   			if (res == FR_OK) {
;;;2694   				res = dir_remove(&dj_old);			/* Remove old entry */
;;;2695   				if (res == FR_OK)
;;;2696   					res = sync(dj_old.fs);
;;;2697   			}
;;;2698   		}
;;;2699   	}
;;;2700   
;;;2701   	LEAVE_FF(dj_old.fs, res);
;;;2702   }
0018f8  b01a              ADD      sp,sp,#0x68
0018fa  bd70              POP      {r4-r6,pc}
                  |L1.6396|
0018fc  2408              MOVS     r4,#8                 ;2670
                  |L1.6398|
0018fe  2c04              CMP      r4,#4                 ;2671
001900  d156              BNE      |L1.6576|
001902  a80a              ADD      r0,sp,#0x28           ;2672
001904  f7fffffe          BL       dir_register
001908  0004              MOVS     r4,r0                 ;2672
00190a  2c00              CMP      r4,#0                 ;2673
00190c  d150              BNE      |L1.6576|
00190e  9d0f              LDR      r5,[sp,#0x3c]         ;2674
001910  a901              ADD      r1,sp,#4              ;2675
001912  0028              MOVS     r0,r5                 ;2675
001914  2213              MOVS     r2,#0x13              ;2675
001916  3102              ADDS     r1,#2                 ;2675
001918  300d              ADDS     r0,r0,#0xd            ;2675
00191a  f7fffffe          BL       mem_cpy
00191e  4668              MOV      r0,sp                 ;2676
001920  7900              LDRB     r0,[r0,#4]            ;2676
001922  2120              MOVS     r1,#0x20              ;2676
001924  4308              ORRS     r0,r0,r1              ;2676
001926  72e8              STRB     r0,[r5,#0xb]          ;2676
001928  9811              LDR      r0,[sp,#0x44]         ;2677
00192a  2601              MOVS     r6,#1                 ;2677
00192c  7106              STRB     r6,[r0,#4]            ;2677
00192e  7ae8              LDRB     r0,[r5,#0xb]          ;2678
001930  06c0              LSLS     r0,r0,#27             ;2678
001932  d531              BPL      |L1.6552|
001934  7d29              LDRB     r1,[r5,#0x14]         ;2679
001936  7ea8              LDRB     r0,[r5,#0x1a]         ;2679
001938  7eea              LDRB     r2,[r5,#0x1b]         ;2679
00193a  4301              ORRS     r1,r1,r0              ;2679
00193c  7d68              LDRB     r0,[r5,#0x15]         ;2679
00193e  0212              LSLS     r2,r2,#8              ;2679
001940  0200              LSLS     r0,r0,#8              ;2679
001942  4310              ORRS     r0,r0,r2              ;2679
001944  4301              ORRS     r1,r1,r0              ;2679
001946  980a              LDR      r0,[sp,#0x28]         ;2679
001948  f7fffffe          BL       clust2sect
00194c  0001              MOVS     r1,r0                 ;2679
00194e  2900              CMP      r1,#0                 ;2680
001950  d008              BEQ      |L1.6500|
001952  980a              LDR      r0,[sp,#0x28]         ;2683
001954  f7fffffe          BL       move_window
001958  0004              MOVS     r4,r0                 ;2683
00195a  990a              LDR      r1,[sp,#0x28]         ;2684
00195c  3150              ADDS     r1,r1,#0x50           ;2684
00195e  2c00              CMP      r4,#0                 ;2685
001960  d002              BEQ      |L1.6504|
001962  e019              B        |L1.6552|
                  |L1.6500|
001964  2402              MOVS     r4,#2                 ;2681
001966  e017              B        |L1.6552|
                  |L1.6504|
001968  7848              LDRB     r0,[r1,#1]            ;2685
00196a  282e              CMP      r0,#0x2e              ;2685
00196c  d114              BNE      |L1.6552|
00196e  980a              LDR      r0,[sp,#0x28]         ;2686
001970  7800              LDRB     r0,[r0,#0]            ;2686
001972  2803              CMP      r0,#3                 ;2686
001974  d106              BNE      |L1.6532|
001976  9a0a              LDR      r2,[sp,#0x28]         ;2686
001978  980c              LDR      r0,[sp,#0x30]         ;2686
00197a  6a52              LDR      r2,[r2,#0x24]         ;2686
00197c  4290              CMP      r0,r2                 ;2686
00197e  d101              BNE      |L1.6532|
001980  2000              MOVS     r0,#0                 ;2686
001982  e000              B        |L1.6534|
                  |L1.6532|
001984  980c              LDR      r0,[sp,#0x30]         ;2686
                  |L1.6534|
001986  7688              STRB     r0,[r1,#0x1a]         ;2687
001988  0a02              LSRS     r2,r0,#8              ;2687
00198a  76ca              STRB     r2,[r1,#0x1b]         ;2687
00198c  0c02              LSRS     r2,r0,#16             ;2688
00198e  750a              STRB     r2,[r1,#0x14]         ;2688
001990  0e00              LSRS     r0,r0,#24             ;2688
001992  7548              STRB     r0,[r1,#0x15]         ;2688
001994  980a              LDR      r0,[sp,#0x28]         ;2689
001996  7106              STRB     r6,[r0,#4]            ;2689
                  |L1.6552|
001998  2c00              CMP      r4,#0                 ;2693
00199a  d109              BNE      |L1.6576|
00199c  a811              ADD      r0,sp,#0x44           ;2694
00199e  f7fffffe          BL       dir_remove
0019a2  0004              MOVS     r4,r0                 ;2694
0019a4  2c00              CMP      r4,#0                 ;2695
0019a6  d103              BNE      |L1.6576|
0019a8  9811              LDR      r0,[sp,#0x44]         ;2696
0019aa  f7fffffe          BL       sync
0019ae  0004              MOVS     r4,r0                 ;2696
                  |L1.6576|
0019b0  0020              MOVS     r0,r4                 ;2701
0019b2  e7a1              B        |L1.6392|
;;;2703   
                          ENDP

                  f_mkfs PROC
;;;2780   
;;;2781   FRESULT f_mkfs (
0019b4  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;2782   	BYTE drv,			/* Logical drive number */
;;;2783   	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
;;;2784   	WORD allocsize		/* Allocation unit size [bytes] */
;;;2785   )
;;;2786   {
0019b6  0014              MOVS     r4,r2
0019b8  b08c              SUB      sp,sp,#0x30
;;;2787   	static const DWORD sstbl[] = { 2048000, 1024000, 512000, 256000, 128000, 64000, 32000, 16000, 8000, 4000,   0 };
;;;2788   	static const WORD cstbl[] =  {   32768,   16384,   8192,   4096,   2048, 16384,  8192,  4096, 2048, 1024, 512 };
;;;2789   	BYTE fmt, m, *tbl;
;;;2790   	DWORD b_part, b_fat, b_dir, b_data;		/* Area offset (LBA) */
;;;2791   	DWORD n_part, n_rsv, n_fat, n_dir;		/* Area size */
;;;2792   	DWORD n_clst, d, n;
;;;2793   	WORD as;
;;;2794   	FATFS *fs;
;;;2795   	DSTATUS stat;
;;;2796   
;;;2797   
;;;2798   	/* Check validity of the parameters */
;;;2799   	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
0019ba  980c              LDR      r0,[sp,#0x30]
0019bc  2800              CMP      r0,#0
0019be  d002              BEQ      |L1.6598|
0019c0  200b              MOVS     r0,#0xb
                  |L1.6594|
;;;2800   	if (partition >= 2) return FR_MKFS_ABORTED;
;;;2801   
;;;2802   	/* Check mounted drive and clear work area */
;;;2803   	fs = FatFs[drv];
;;;2804   	if (!fs) return FR_NOT_ENABLED;
;;;2805   	fs->fs_type = 0;
;;;2806   	drv = LD2PD(drv);
;;;2807   
;;;2808   	/* Get disk statics */
;;;2809   	stat = disk_initialize(drv);
;;;2810   	if (stat & STA_NOINIT) return FR_NOT_READY;
;;;2811   	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;2812   #if _MAX_SS != 512						/* Get disk sector size */
;;;2813   	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
;;;2814   		|| SS(fs) > _MAX_SS)
;;;2815   		return FR_MKFS_ABORTED;
;;;2816   #endif
;;;2817   	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
;;;2818   		return FR_MKFS_ABORTED;
;;;2819   	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
;;;2820   	b_part = (!partition) ? 63 : 0;		/* Boot sector */
;;;2821   	n_part -= b_part;
;;;2822   	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
;;;2823   	if (d != allocsize) allocsize = 0;
;;;2824   	if (!allocsize) {					/* Auto selection of cluster size */
;;;2825   		d = n_part;
;;;2826   		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
;;;2827   		for (n = 0; d < sstbl[n]; n++) ;
;;;2828   		allocsize = cstbl[n];
;;;2829   	}
;;;2830   	if (allocsize < SS(fs)) allocsize = SS(fs);
;;;2831   
;;;2832   	allocsize /= SS(fs);		/* Number of sectors per cluster */
;;;2833   
;;;2834   	/* Pre-compute number of clusters and FAT type */
;;;2835   	n_clst = n_part / allocsize;
;;;2836   	fmt = FS_FAT12;
;;;2837   	if (n_clst >= 0xFF5) fmt = FS_FAT16;
;;;2838   	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
;;;2839   
;;;2840   	/* Determine offset and size of FAT structure */
;;;2841   	switch (fmt) {
;;;2842   	case FS_FAT12:
;;;2843   		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
;;;2844   		n_rsv = 1 + partition;
;;;2845   		n_dir = N_ROOTDIR * 32 / SS(fs);
;;;2846   		break;
;;;2847   	case FS_FAT16:
;;;2848   		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
;;;2849   		n_rsv = 1 + partition;
;;;2850   		n_dir = N_ROOTDIR * 32 / SS(fs);
;;;2851   		break;
;;;2852   	default:
;;;2853   		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;2854   		n_rsv = 33 - partition;
;;;2855   		n_dir = 0;
;;;2856   	}
;;;2857   	b_fat = b_part + n_rsv;			/* FATs start sector */
;;;2858   	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
;;;2859   	b_data = b_dir + n_dir;			/* Data start sector */
;;;2860   
;;;2861   	/* Align data start sector to erase block boundary (for flash memory media) */
;;;2862   	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
;;;2863   	n = (b_data + n - 1) & ~(n - 1);
;;;2864   	n_fat += (n - b_data) / N_FATS;
;;;2865   	/* b_dir and b_data are no longer used below */
;;;2866   
;;;2867   	/* Determine number of cluster and final check of validity of the FAT type */
;;;2868   	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
;;;2869   	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
;;;2870   		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
;;;2871   		return FR_MKFS_ABORTED;
;;;2872   
;;;2873   	/* Create partition table if needed */
;;;2874   	if (!partition) {
;;;2875   		DWORD n_disk = b_part + n_part;
;;;2876   
;;;2877   		mem_set(fs->win, 0, SS(fs));
;;;2878   		tbl = fs->win+MBR_Table;
;;;2879   		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
;;;2880   		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
;;;2881   			n_disk = n_disk / 63 / 255;
;;;2882   			tbl[7] = (BYTE)n_disk;
;;;2883   			tbl[6] = (BYTE)((n_disk >> 2) | 63);
;;;2884   		} else {
;;;2885   			ST_WORD(&tbl[6], 0xFFFF);
;;;2886   		}
;;;2887   		tbl[5] = 254;
;;;2888   		if (fmt != FS_FAT32)			/* System ID */
;;;2889   			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
;;;2890   		else
;;;2891   			tbl[4] = 0x0c;
;;;2892   		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
;;;2893   		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
;;;2894   		ST_WORD(tbl+64, 0xAA55);		/* Signature */
;;;2895   		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
;;;2896   			return FR_DISK_ERR;
;;;2897   		partition = 0xF8;
;;;2898   	} else {
;;;2899   		partition = 0xF0;
;;;2900   	}
;;;2901   
;;;2902   	/* Create boot record */
;;;2903   	tbl = fs->win;								/* Clear buffer */
;;;2904   	mem_set(tbl, 0, SS(fs));
;;;2905   	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
;;;2906   	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
;;;2907   	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
;;;2908   	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
;;;2909   	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
;;;2910   	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
;;;2911   	if (n_part < 0x10000) {						/* Number of total sectors */
;;;2912   		ST_WORD(tbl+BPB_TotSec16, n_part);
;;;2913   	} else {
;;;2914   		ST_DWORD(tbl+BPB_TotSec32, n_part);
;;;2915   	}
;;;2916   	tbl[BPB_Media] = partition;					/* Media descripter */
;;;2917   	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
;;;2918   	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
;;;2919   	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
;;;2920   	n = get_fattime();							/* Use current time as a VSN */
;;;2921   	if (fmt != FS_FAT32) {
;;;2922   		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
;;;2923   		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
;;;2924   		tbl[BS_DrvNum] = 0x80;					/* Drive number */
;;;2925   		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
;;;2926   		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
;;;2927   	} else {
;;;2928   		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
;;;2929   		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
;;;2930   		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
;;;2931   		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
;;;2932   		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
;;;2933   		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
;;;2934   		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
;;;2935   		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
;;;2936   	}
;;;2937   	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
;;;2938   	if (SS(fs) > 512U) {
;;;2939   		ST_WORD(tbl+SS(fs)-2, 0xAA55);
;;;2940   	}
;;;2941   	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
;;;2942   		return FR_DISK_ERR;
;;;2943   	if (fmt == FS_FAT32)
;;;2944   		disk_write(drv, tbl, b_part+6, 1);
;;;2945   
;;;2946   	/* Initialize FAT area */
;;;2947   	for (m = 0; m < N_FATS; m++) {
;;;2948   		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
;;;2949   		if (fmt != FS_FAT32) {
;;;2950   			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;2951   			n |= partition;
;;;2952   			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
;;;2953   		} else {
;;;2954   			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
;;;2955   			ST_DWORD(tbl+4, 0xFFFFFFFF);
;;;2956   			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
;;;2957   		}
;;;2958   		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;2959   			return FR_DISK_ERR;
;;;2960   		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
;;;2961   		for (n = 1; n < n_fat; n++) {
;;;2962   			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;2963   				return FR_DISK_ERR;
;;;2964   		}
;;;2965   	}
;;;2966   
;;;2967   	/* Initialize Root directory */
;;;2968   	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
;;;2969   	do {
;;;2970   		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;2971   			return FR_DISK_ERR;
;;;2972   	} while (--m);
;;;2973   
;;;2974   	/* Create FSInfo record if needed */
;;;2975   	if (fmt == FS_FAT32) {
;;;2976   		ST_WORD(tbl+BS_55AA, 0xAA55);
;;;2977   		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
;;;2978   		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
;;;2979   		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
;;;2980   		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
;;;2981   		disk_write(drv, tbl, b_part+1, 1);
;;;2982   		disk_write(drv, tbl, b_part+7, 1);
;;;2983   	}
;;;2984   
;;;2985   	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;2986   }
0019c2  b00f              ADD      sp,sp,#0x3c
0019c4  bdf0              POP      {r4-r7,pc}
                  |L1.6598|
0019c6  980d              LDR      r0,[sp,#0x34]         ;2800
0019c8  2802              CMP      r0,#2                 ;2800
0019ca  d301              BCC      |L1.6608|
0019cc  200e              MOVS     r0,#0xe               ;2800
0019ce  e7f8              B        |L1.6594|
                  |L1.6608|
0019d0  48fd              LDR      r0,|L1.7624|
0019d2  6800              LDR      r0,[r0,#0]            ;2803
0019d4  9002              STR      r0,[sp,#8]            ;2803
0019d6  9802              LDR      r0,[sp,#8]            ;2804
0019d8  2800              CMP      r0,#0                 ;2804
0019da  d008              BEQ      |L1.6638|
0019dc  9902              LDR      r1,[sp,#8]            ;2805
0019de  2000              MOVS     r0,#0                 ;2805
0019e0  7008              STRB     r0,[r1,#0]            ;2805
0019e2  f7fffffe          BL       disk_initialize
0019e6  07c1              LSLS     r1,r0,#31             ;2810
0019e8  d003              BEQ      |L1.6642|
0019ea  2003              MOVS     r0,#3                 ;2810
0019ec  e7e9              B        |L1.6594|
                  |L1.6638|
0019ee  200c              MOVS     r0,#0xc               ;2804
0019f0  e7e7              B        |L1.6594|
                  |L1.6642|
0019f2  0740              LSLS     r0,r0,#29             ;2811
0019f4  d501              BPL      |L1.6650|
0019f6  200a              MOVS     r0,#0xa               ;2811
0019f8  e7e3              B        |L1.6594|
                  |L1.6650|
0019fa  980c              LDR      r0,[sp,#0x30]         ;2817
0019fc  2101              MOVS     r1,#1                 ;2817
0019fe  aa07              ADD      r2,sp,#0x1c           ;2817
001a00  f7fffffe          BL       disk_ioctl
001a04  2800              CMP      r0,#0                 ;2817
001a06  d104              BNE      |L1.6674|
001a08  9807              LDR      r0,[sp,#0x1c]         ;2817
001a0a  217d              MOVS     r1,#0x7d              ;2817
001a0c  0109              LSLS     r1,r1,#4              ;2817
001a0e  4288              CMP      r0,r1                 ;2817
001a10  d201              BCS      |L1.6678|
                  |L1.6674|
001a12  200e              MOVS     r0,#0xe               ;2818
001a14  e7d5              B        |L1.6594|
                  |L1.6678|
001a16  217d              MOVS     r1,#0x7d              ;2819
001a18  0509              LSLS     r1,r1,#20             ;2819
001a1a  4288              CMP      r0,r1                 ;2819
001a1c  d900              BLS      |L1.6688|
001a1e  9107              STR      r1,[sp,#0x1c]         ;2819
                  |L1.6688|
001a20  980d              LDR      r0,[sp,#0x34]         ;2820
001a22  2800              CMP      r0,#0                 ;2820
001a24  d00a              BEQ      |L1.6716|
001a26  2000              MOVS     r0,#0                 ;2820
                  |L1.6696|
001a28  9009              STR      r0,[sp,#0x24]         ;2820
001a2a  9907              LDR      r1,[sp,#0x1c]         ;2821
001a2c  9809              LDR      r0,[sp,#0x24]         ;2821
001a2e  1a0a              SUBS     r2,r1,r0              ;2821
001a30  9207              STR      r2,[sp,#0x1c]         ;2821
001a32  2501              MOVS     r5,#1                 ;2822
001a34  026d              LSLS     r5,r5,#9              ;2822
001a36  0028              MOVS     r0,r5                 ;2822
001a38  49e4              LDR      r1,|L1.7628|
001a3a  e002              B        |L1.6722|
                  |L1.6716|
001a3c  203f              MOVS     r0,#0x3f              ;2820
001a3e  e7f3              B        |L1.6696|
                  |L1.6720|
001a40  0040              LSLS     r0,r0,#1              ;2822
                  |L1.6722|
001a42  4288              CMP      r0,r1                 ;2822
001a44  d801              BHI      |L1.6730|
001a46  42a0              CMP      r0,r4                 ;2822
001a48  d1fa              BNE      |L1.6720|
                  |L1.6730|
001a4a  42a0              CMP      r0,r4                 ;2823
001a4c  d000              BEQ      |L1.6736|
001a4e  2400              MOVS     r4,#0                 ;2823
                  |L1.6736|
001a50  2c00              CMP      r4,#0                 ;2824
001a52  d116              BNE      |L1.6786|
001a54  0029              MOVS     r1,r5                 ;2826
001a56  0008              MOVS     r0,r1                 ;2822
001a58  e001              B        |L1.6750|
                  |L1.6746|
001a5a  0852              LSRS     r2,r2,#1              ;2826
001a5c  0849              LSRS     r1,r1,#1              ;2826
                  |L1.6750|
001a5e  4281              CMP      r1,r0                 ;2826
001a60  d8fb              BHI      |L1.6746|
001a62  2000              MOVS     r0,#0                 ;2827
001a64  9003              STR      r0,[sp,#0xc]          ;2827
001a66  48da              LDR      r0,|L1.7632|
001a68  e001              B        |L1.6766|
                  |L1.6762|
001a6a  1c5b              ADDS     r3,r3,#1              ;2827
001a6c  9303              STR      r3,[sp,#0xc]          ;2827
                  |L1.6766|
001a6e  9b03              LDR      r3,[sp,#0xc]          ;2827
001a70  0099              LSLS     r1,r3,#2              ;2827
001a72  5841              LDR      r1,[r0,r1]            ;2827
001a74  4291              CMP      r1,r2                 ;2827
001a76  d8f8              BHI      |L1.6762|
001a78  9803              LDR      r0,[sp,#0xc]          ;2828
001a7a  49d5              LDR      r1,|L1.7632|
001a7c  0040              LSLS     r0,r0,#1              ;2828
001a7e  312c              ADDS     r1,r1,#0x2c           ;2828
001a80  5a0c              LDRH     r4,[r1,r0]            ;2828
                  |L1.6786|
001a82  2001              MOVS     r0,#1                 ;2830
001a84  0240              LSLS     r0,r0,#9              ;2830
001a86  4284              CMP      r4,r0                 ;2830
001a88  d200              BCS      |L1.6796|
001a8a  4cd2              LDR      r4,|L1.7636|
                  |L1.6796|
001a8c  0a60              LSRS     r0,r4,#9              ;2832
001a8e  900e              STR      r0,[sp,#0x38]         ;2832
001a90  990e              LDR      r1,[sp,#0x38]         ;2835
001a92  9807              LDR      r0,[sp,#0x1c]         ;2835
001a94  f7fffffe          BL       __aeabi_uidivmod
001a98  2601              MOVS     r6,#1                 ;2836
001a9a  49cf              LDR      r1,|L1.7640|
001a9c  4288              CMP      r0,r1                 ;2837
001a9e  d300              BCC      |L1.6818|
001aa0  2602              MOVS     r6,#2                 ;2837
                  |L1.6818|
001aa2  49ce              LDR      r1,|L1.7644|
001aa4  4288              CMP      r0,r1                 ;2838
001aa6  d300              BCC      |L1.6826|
001aa8  2603              MOVS     r6,#3                 ;2838
                  |L1.6826|
001aaa  2e01              CMP      r6,#1                 ;2841
001aac  d01a              BEQ      |L1.6884|
001aae  2e02              CMP      r6,#2                 ;2841
001ab0  d025              BEQ      |L1.6910|
001ab2  49c8              LDR      r1,|L1.7636|
001ab4  0080              LSLS     r0,r0,#2              ;2853
001ab6  1dc9              ADDS     r1,r1,#7              ;2853
001ab8  1840              ADDS     r0,r0,r1              ;2853
001aba  0a44              LSRS     r4,r0,#9              ;2853
001abc  980d              LDR      r0,[sp,#0x34]         ;2854
001abe  2121              MOVS     r1,#0x21              ;2854
001ac0  1a0f              SUBS     r7,r1,r0              ;2854
001ac2  2000              MOVS     r0,#0                 ;2855
001ac4  9005              STR      r0,[sp,#0x14]         ;2855
                  |L1.6854|
001ac6  9809              LDR      r0,[sp,#0x24]         ;2857
001ac8  19c5              ADDS     r5,r0,r7              ;2857
001aca  1928              ADDS     r0,r5,r4              ;2858
001acc  9905              LDR      r1,[sp,#0x14]         ;2859
001ace  1840              ADDS     r0,r0,r1              ;2859
001ad0  9008              STR      r0,[sp,#0x20]         ;2859
001ad2  980c              LDR      r0,[sp,#0x30]         ;2862
001ad4  2103              MOVS     r1,#3                 ;2862
001ad6  aa03              ADD      r2,sp,#0xc            ;2862
001ad8  f7fffffe          BL       disk_ioctl
001adc  2800              CMP      r0,#0                 ;2862
001ade  d018              BEQ      |L1.6930|
001ae0  200e              MOVS     r0,#0xe               ;2862
001ae2  e76e              B        |L1.6594|
                  |L1.6884|
001ae4  0041              LSLS     r1,r0,#1              ;2843
001ae6  1840              ADDS     r0,r0,r1              ;2843
001ae8  1c40              ADDS     r0,r0,#1              ;2843
001aea  0840              LSRS     r0,r0,#1              ;2843
001aec  30ff              ADDS     r0,r0,#0xff           ;2843
001aee  30ff              ADDS     r0,r0,#0xff           ;2843
001af0  3004              ADDS     r0,#4                 ;2843
001af2  0a44              LSRS     r4,r0,#9              ;2843
001af4  9f0d              LDR      r7,[sp,#0x34]         ;2844
001af6  1c7f              ADDS     r7,r7,#1              ;2844
001af8  2020              MOVS     r0,#0x20              ;2845
001afa  9005              STR      r0,[sp,#0x14]         ;2845
001afc  e7e3              B        |L1.6854|
                  |L1.6910|
001afe  0040              LSLS     r0,r0,#1              ;2848
001b00  30ff              ADDS     r0,r0,#0xff           ;2848
001b02  30ff              ADDS     r0,r0,#0xff           ;2848
001b04  3005              ADDS     r0,#5                 ;2848
001b06  0a44              LSRS     r4,r0,#9              ;2848
001b08  9f0d              LDR      r7,[sp,#0x34]         ;2849
001b0a  1c7f              ADDS     r7,r7,#1              ;2849
001b0c  2020              MOVS     r0,#0x20              ;2850
001b0e  9005              STR      r0,[sp,#0x14]         ;2850
001b10  e7d9              B        |L1.6854|
                  |L1.6930|
001b12  9903              LDR      r1,[sp,#0xc]          ;2863
001b14  9808              LDR      r0,[sp,#0x20]         ;2863
001b16  1840              ADDS     r0,r0,r1              ;2863
001b18  1e40              SUBS     r0,r0,#1              ;2863
001b1a  1e49              SUBS     r1,r1,#1              ;2863
001b1c  4388              BICS     r0,r0,r1              ;2863
001b1e  9003              STR      r0,[sp,#0xc]          ;2863
001b20  9908              LDR      r1,[sp,#0x20]         ;2864
001b22  1a40              SUBS     r0,r0,r1              ;2864
001b24  1900              ADDS     r0,r0,r4              ;2864
001b26  9006              STR      r0,[sp,#0x18]         ;2864
001b28  9807              LDR      r0,[sp,#0x1c]         ;2868
001b2a  0004              MOVS     r4,r0                 ;2868
001b2c  1bc1              SUBS     r1,r0,r7              ;2868
001b2e  9806              LDR      r0,[sp,#0x18]         ;2868
001b30  1a09              SUBS     r1,r1,r0              ;2868
001b32  9805              LDR      r0,[sp,#0x14]         ;2868
001b34  1a08              SUBS     r0,r1,r0              ;2868
001b36  990e              LDR      r1,[sp,#0x38]         ;2868
001b38  f7fffffe          BL       __aeabi_uidivmod
001b3c  9004              STR      r0,[sp,#0x10]         ;2868
001b3e  2e02              CMP      r6,#2                 ;2869
001b40  d103              BNE      |L1.6986|
001b42  49a5              LDR      r1,|L1.7640|
001b44  9804              LDR      r0,[sp,#0x10]         ;2869
001b46  4288              CMP      r0,r1                 ;2869
001b48  d305              BCC      |L1.6998|
                  |L1.6986|
001b4a  2e03              CMP      r6,#3                 ;2870
001b4c  d105              BNE      |L1.7002|
001b4e  49a3              LDR      r1,|L1.7644|
001b50  9804              LDR      r0,[sp,#0x10]         ;2870
001b52  4288              CMP      r0,r1                 ;2870
001b54  d201              BCS      |L1.7002|
                  |L1.6998|
001b56  200e              MOVS     r0,#0xe               ;2871
001b58  e733              B        |L1.6594|
                  |L1.7002|
001b5a  980d              LDR      r0,[sp,#0x34]         ;2874
001b5c  2800              CMP      r0,#0                 ;2874
001b5e  d029              BEQ      |L1.7092|
001b60  20f0              MOVS     r0,#0xf0              ;2899
001b62  900d              STR      r0,[sp,#0x34]         ;2899
                  |L1.7012|
001b64  9c02              LDR      r4,[sp,#8]            ;2903
001b66  3430              ADDS     r4,r4,#0x30           ;2903
001b68  4a9a              LDR      r2,|L1.7636|
001b6a  2100              MOVS     r1,#0                 ;2904
001b6c  0020              MOVS     r0,r4                 ;2904
001b6e  f7fffffe          BL       mem_set
001b72  20eb              MOVS     r0,#0xeb              ;2905
001b74  7020              STRB     r0,[r4,#0]            ;2905
001b76  20fe              MOVS     r0,#0xfe              ;2905
001b78  7060              STRB     r0,[r4,#1]            ;2905
001b7a  2090              MOVS     r0,#0x90              ;2905
001b7c  70a0              STRB     r0,[r4,#2]            ;2905
001b7e  2300              MOVS     r3,#0                 ;2905
001b80  0018              MOVS     r0,r3                 ;2905
001b82  70e3              STRB     r3,[r4,#3]            ;2905
001b84  72e0              STRB     r0,[r4,#0xb]          ;2906
001b86  2002              MOVS     r0,#2                 ;2906
001b88  7320              STRB     r0,[r4,#0xc]          ;2906
001b8a  980e              LDR      r0,[sp,#0x38]         ;2907
001b8c  7360              STRB     r0,[r4,#0xd]          ;2907
001b8e  73a7              STRB     r7,[r4,#0xe]          ;2908
001b90  0a38              LSRS     r0,r7,#8              ;2908
001b92  73e0              STRB     r0,[r4,#0xf]          ;2908
001b94  2001              MOVS     r0,#1                 ;2909
001b96  7420              STRB     r0,[r4,#0x10]         ;2909
001b98  9805              LDR      r0,[sp,#0x14]         ;2910
001b9a  0100              LSLS     r0,r0,#4              ;2910
001b9c  7460              STRB     r0,[r4,#0x11]         ;2910
001b9e  0a00              LSRS     r0,r0,#8              ;2910
001ba0  74a0              STRB     r0,[r4,#0x12]         ;2910
001ba2  9807              LDR      r0,[sp,#0x1c]         ;2911
001ba4  2101              MOVS     r1,#1                 ;2911
001ba6  0409              LSLS     r1,r1,#16             ;2911
001ba8  4288              CMP      r0,r1                 ;2911
001baa  d258              BCS      |L1.7262|
001bac  74e0              STRB     r0,[r4,#0x13]         ;2912
001bae  0a00              LSRS     r0,r0,#8              ;2912
001bb0  7520              STRB     r0,[r4,#0x14]         ;2912
001bb2  e05d              B        |L1.7280|
                  |L1.7092|
001bb4  9809              LDR      r0,[sp,#0x24]         ;2875
001bb6  1900              ADDS     r0,r0,r4              ;2875
001bb8  9001              STR      r0,[sp,#4]            ;2875
001bba  9802              LDR      r0,[sp,#8]            ;2877
001bbc  4a85              LDR      r2,|L1.7636|
001bbe  3030              ADDS     r0,r0,#0x30           ;2877
001bc0  2100              MOVS     r1,#0                 ;2877
001bc2  900b              STR      r0,[sp,#0x2c]         ;2877
001bc4  f7fffffe          BL       mem_set
001bc8  9c02              LDR      r4,[sp,#8]            ;2878
001bca  34ff              ADDS     r4,r4,#0xff           ;2878
001bcc  34ef              ADDS     r4,r4,#0xef           ;2878
001bce  2080              MOVS     r0,#0x80              ;2879
001bd0  7020              STRB     r0,[r4,#0]            ;2879
001bd2  2001              MOVS     r0,#1                 ;2879
001bd4  7060              STRB     r0,[r4,#1]            ;2879
001bd6  70a0              STRB     r0,[r4,#2]            ;2879
001bd8  2000              MOVS     r0,#0                 ;2879
001bda  70e0              STRB     r0,[r4,#3]            ;2879
001bdc  4980              LDR      r1,|L1.7648|
001bde  9801              LDR      r0,[sp,#4]            ;2880
001be0  4288              CMP      r0,r1                 ;2880
001be2  d209              BCS      |L1.7160|
001be4  9801              LDR      r0,[sp,#4]            ;2881
001be6  1289              ASRS     r1,r1,#10             ;2881
001be8  f7fffffe          BL       __aeabi_uidivmod
001bec  71e0              STRB     r0,[r4,#7]            ;2882
001bee  0880              LSRS     r0,r0,#2              ;2883
001bf0  213f              MOVS     r1,#0x3f              ;2883
001bf2  4308              ORRS     r0,r0,r1              ;2883
001bf4  71a0              STRB     r0,[r4,#6]            ;2883
001bf6  e002              B        |L1.7166|
                  |L1.7160|
001bf8  20ff              MOVS     r0,#0xff              ;2885
001bfa  71a0              STRB     r0,[r4,#6]            ;2885
001bfc  71e0              STRB     r0,[r4,#7]            ;2885
                  |L1.7166|
001bfe  20fe              MOVS     r0,#0xfe              ;2887
001c00  7160              STRB     r0,[r4,#5]            ;2887
001c02  2e03              CMP      r6,#3                 ;2888
001c04  d009              BEQ      |L1.7194|
001c06  9907              LDR      r1,[sp,#0x1c]         ;2889
001c08  2001              MOVS     r0,#1                 ;2889
001c0a  0400              LSLS     r0,r0,#16             ;2889
001c0c  4281              CMP      r1,r0                 ;2889
001c0e  d201              BCS      |L1.7188|
001c10  2004              MOVS     r0,#4                 ;2889
001c12  e000              B        |L1.7190|
                  |L1.7188|
001c14  2006              MOVS     r0,#6                 ;2889
                  |L1.7190|
001c16  7120              STRB     r0,[r4,#4]            ;2889
001c18  e001              B        |L1.7198|
                  |L1.7194|
001c1a  200c              MOVS     r0,#0xc               ;2891
001c1c  7120              STRB     r0,[r4,#4]            ;2891
                  |L1.7198|
001c1e  203f              MOVS     r0,#0x3f              ;2892
001c20  7220              STRB     r0,[r4,#8]            ;2892
001c22  2000              MOVS     r0,#0                 ;2892
001c24  7260              STRB     r0,[r4,#9]            ;2892
001c26  72a0              STRB     r0,[r4,#0xa]          ;2892
001c28  72e0              STRB     r0,[r4,#0xb]          ;2892
001c2a  9807              LDR      r0,[sp,#0x1c]         ;2893
001c2c  7320              STRB     r0,[r4,#0xc]          ;2893
001c2e  0a01              LSRS     r1,r0,#8              ;2893
001c30  7361              STRB     r1,[r4,#0xd]          ;2893
001c32  0c01              LSRS     r1,r0,#16             ;2893
001c34  73a1              STRB     r1,[r4,#0xe]          ;2893
001c36  0e00              LSRS     r0,r0,#24             ;2893
001c38  73e0              STRB     r0,[r4,#0xf]          ;2893
001c3a  2055              MOVS     r0,#0x55              ;2894
001c3c  3440              ADDS     r4,r4,#0x40           ;2894
001c3e  7020              STRB     r0,[r4,#0]            ;2894
001c40  20aa              MOVS     r0,#0xaa              ;2894
001c42  7060              STRB     r0,[r4,#1]            ;2894
001c44  990b              LDR      r1,[sp,#0x2c]         ;2895
001c46  980c              LDR      r0,[sp,#0x30]         ;2895
001c48  2301              MOVS     r3,#1                 ;2895
001c4a  2200              MOVS     r2,#0                 ;2895
001c4c  f7fffffe          BL       disk_write
001c50  2800              CMP      r0,#0                 ;2895
001c52  d001              BEQ      |L1.7256|
001c54  2001              MOVS     r0,#1                 ;2896
001c56  e6b4              B        |L1.6594|
                  |L1.7256|
001c58  20f8              MOVS     r0,#0xf8              ;2897
001c5a  900d              STR      r0,[sp,#0x34]         ;2897
001c5c  e782              B        |L1.7012|
                  |L1.7262|
001c5e  0021              MOVS     r1,r4                 ;2914
001c60  3120              ADDS     r1,r1,#0x20           ;2914
001c62  7008              STRB     r0,[r1,#0]            ;2914
001c64  0a02              LSRS     r2,r0,#8              ;2914
001c66  704a              STRB     r2,[r1,#1]            ;2914
001c68  0c02              LSRS     r2,r0,#16             ;2914
001c6a  708a              STRB     r2,[r1,#2]            ;2914
001c6c  0e00              LSRS     r0,r0,#24             ;2914
001c6e  70c8              STRB     r0,[r1,#3]            ;2914
                  |L1.7280|
001c70  980d              LDR      r0,[sp,#0x34]         ;2916
001c72  7560              STRB     r0,[r4,#0x15]         ;2916
001c74  203f              MOVS     r0,#0x3f              ;2917
001c76  7620              STRB     r0,[r4,#0x18]         ;2917
001c78  001f              MOVS     r7,r3                 ;2917
001c7a  7663              STRB     r3,[r4,#0x19]         ;2917
001c7c  20ff              MOVS     r0,#0xff              ;2918
001c7e  76a0              STRB     r0,[r4,#0x1a]         ;2918
001c80  76e7              STRB     r7,[r4,#0x1b]         ;2918
001c82  9809              LDR      r0,[sp,#0x24]         ;2919
001c84  7720              STRB     r0,[r4,#0x1c]         ;2919
001c86  9809              LDR      r0,[sp,#0x24]         ;2919
001c88  0a00              LSRS     r0,r0,#8              ;2919
001c8a  7760              STRB     r0,[r4,#0x1d]         ;2919
001c8c  9809              LDR      r0,[sp,#0x24]         ;2919
001c8e  0c00              LSRS     r0,r0,#16             ;2919
001c90  77a0              STRB     r0,[r4,#0x1e]         ;2919
001c92  9809              LDR      r0,[sp,#0x24]         ;2919
001c94  0e00              LSRS     r0,r0,#24             ;2919
001c96  77e0              STRB     r0,[r4,#0x1f]         ;2919
001c98  f7fffffe          BL       get_fattime
001c9c  9003              STR      r0,[sp,#0xc]          ;2920
001c9e  2329              MOVS     r3,#0x29              ;2925
001ca0  2e03              CMP      r6,#3                 ;2921
001ca2  d017              BEQ      |L1.7380|
001ca4  0021              MOVS     r1,r4                 ;2922
001ca6  3120              ADDS     r1,r1,#0x20           ;2922
001ca8  71c8              STRB     r0,[r1,#7]            ;2922
001caa  0a02              LSRS     r2,r0,#8              ;2922
001cac  720a              STRB     r2,[r1,#8]            ;2922
001cae  0c02              LSRS     r2,r0,#16             ;2922
001cb0  724a              STRB     r2,[r1,#9]            ;2922
001cb2  0e00              LSRS     r0,r0,#24             ;2922
001cb4  7288              STRB     r0,[r1,#0xa]          ;2922
001cb6  9806              LDR      r0,[sp,#0x18]         ;2923
001cb8  75a0              STRB     r0,[r4,#0x16]         ;2923
001cba  9806              LDR      r0,[sp,#0x18]         ;2923
001cbc  0a00              LSRS     r0,r0,#8              ;2923
001cbe  75e0              STRB     r0,[r4,#0x17]         ;2923
001cc0  2080              MOVS     r0,#0x80              ;2924
001cc2  7108              STRB     r0,[r1,#4]            ;2924
001cc4  718b              STRB     r3,[r1,#6]            ;2925
001cc6  0020              MOVS     r0,r4                 ;2926
001cc8  2213              MOVS     r2,#0x13              ;2926
001cca  302b              ADDS     r0,r0,#0x2b           ;2926
001ccc  a145              ADR      r1,|L1.7652|
001cce  f7fffffe          BL       mem_cpy
001cd2  e029              B        |L1.7464|
                  |L1.7380|
001cd4  0021              MOVS     r1,r4                 ;2928
001cd6  3140              ADDS     r1,r1,#0x40           ;2928
001cd8  70c8              STRB     r0,[r1,#3]            ;2928
001cda  0a02              LSRS     r2,r0,#8              ;2928
001cdc  710a              STRB     r2,[r1,#4]            ;2928
001cde  0c02              LSRS     r2,r0,#16             ;2928
001ce0  714a              STRB     r2,[r1,#5]            ;2928
001ce2  0e00              LSRS     r0,r0,#24             ;2928
001ce4  7188              STRB     r0,[r1,#6]            ;2928
001ce6  9a06              LDR      r2,[sp,#0x18]         ;2929
001ce8  0020              MOVS     r0,r4                 ;2929
001cea  3020              ADDS     r0,r0,#0x20           ;2929
001cec  7102              STRB     r2,[r0,#4]            ;2929
001cee  9a06              LDR      r2,[sp,#0x18]         ;2929
001cf0  0a12              LSRS     r2,r2,#8              ;2929
001cf2  7142              STRB     r2,[r0,#5]            ;2929
001cf4  9a06              LDR      r2,[sp,#0x18]         ;2929
001cf6  0c12              LSRS     r2,r2,#16             ;2929
001cf8  7182              STRB     r2,[r0,#6]            ;2929
001cfa  9a06              LDR      r2,[sp,#0x18]         ;2929
001cfc  0e12              LSRS     r2,r2,#24             ;2929
001cfe  71c2              STRB     r2,[r0,#7]            ;2929
001d00  2202              MOVS     r2,#2                 ;2930
001d02  7302              STRB     r2,[r0,#0xc]          ;2930
001d04  7347              STRB     r7,[r0,#0xd]          ;2930
001d06  7387              STRB     r7,[r0,#0xe]          ;2930
001d08  73c7              STRB     r7,[r0,#0xf]          ;2930
001d0a  2201              MOVS     r2,#1                 ;2931
001d0c  7402              STRB     r2,[r0,#0x10]         ;2931
001d0e  7447              STRB     r7,[r0,#0x11]         ;2931
001d10  2206              MOVS     r2,#6                 ;2932
001d12  7482              STRB     r2,[r0,#0x12]         ;2932
001d14  74c7              STRB     r7,[r0,#0x13]         ;2932
001d16  2080              MOVS     r0,#0x80              ;2933
001d18  7008              STRB     r0,[r1,#0]            ;2933
001d1a  708b              STRB     r3,[r1,#2]            ;2934
001d1c  0020              MOVS     r0,r4                 ;2935
001d1e  2213              MOVS     r2,#0x13              ;2935
001d20  3047              ADDS     r0,r0,#0x47           ;2935
001d22  a135              ADR      r1,|L1.7672|
001d24  f7fffffe          BL       mem_cpy
                  |L1.7464|
001d28  0027              MOVS     r7,r4                 ;2937
001d2a  2055              MOVS     r0,#0x55              ;2937
001d2c  37ff              ADDS     r7,r7,#0xff           ;2937
001d2e  37e1              ADDS     r7,r7,#0xe1           ;2937
001d30  77b8              STRB     r0,[r7,#0x1e]         ;2937
001d32  20aa              MOVS     r0,#0xaa              ;2937
001d34  77f8              STRB     r0,[r7,#0x1f]         ;2937
001d36  9a09              LDR      r2,[sp,#0x24]         ;2941
001d38  980c              LDR      r0,[sp,#0x30]         ;2941
001d3a  2301              MOVS     r3,#1                 ;2941
001d3c  0021              MOVS     r1,r4                 ;2941
001d3e  f7fffffe          BL       disk_write
001d42  2800              CMP      r0,#0                 ;2941
001d44  d001              BEQ      |L1.7498|
001d46  2001              MOVS     r0,#1                 ;2942
001d48  e63b              B        |L1.6594|
                  |L1.7498|
001d4a  2e03              CMP      r6,#3                 ;2943
001d4c  d106              BNE      |L1.7516|
001d4e  9a09              LDR      r2,[sp,#0x24]         ;2944
001d50  980c              LDR      r0,[sp,#0x30]         ;2944
001d52  2301              MOVS     r3,#1                 ;2944
001d54  1d92              ADDS     r2,r2,#6              ;2944
001d56  0021              MOVS     r1,r4                 ;2944
001d58  f7fffffe          BL       disk_write
                  |L1.7516|
001d5c  2000              MOVS     r0,#0                 ;2947
001d5e  900a              STR      r0,[sp,#0x28]         ;2947
                  |L1.7520|
001d60  4a1c              LDR      r2,|L1.7636|
001d62  2100              MOVS     r1,#0                 ;2948
001d64  0020              MOVS     r0,r4                 ;2948
001d66  f7fffffe          BL       mem_set
001d6a  2e03              CMP      r6,#3                 ;2949
001d6c  d012              BEQ      |L1.7572|
001d6e  2e01              CMP      r6,#1                 ;2950
001d70  d00e              BEQ      |L1.7568|
001d72  4826              LDR      r0,|L1.7692|
                  |L1.7540|
001d74  990d              LDR      r1,[sp,#0x34]         ;2951
001d76  4308              ORRS     r0,r0,r1              ;2951
001d78  9003              STR      r0,[sp,#0xc]          ;2951
001d7a  7020              STRB     r0,[r4,#0]            ;2952
001d7c  9803              LDR      r0,[sp,#0xc]          ;2952
001d7e  0a00              LSRS     r0,r0,#8              ;2952
001d80  7060              STRB     r0,[r4,#1]            ;2952
001d82  9803              LDR      r0,[sp,#0xc]          ;2952
001d84  0c00              LSRS     r0,r0,#16             ;2952
001d86  70a0              STRB     r0,[r4,#2]            ;2952
001d88  9803              LDR      r0,[sp,#0xc]          ;2952
001d8a  0e00              LSRS     r0,r0,#24             ;2952
001d8c  70e0              STRB     r0,[r4,#3]            ;2952
001d8e  e010              B        |L1.7602|
                  |L1.7568|
001d90  481f              LDR      r0,|L1.7696|
001d92  e7ef              B        |L1.7540|
                  |L1.7572|
001d94  20f8              MOVS     r0,#0xf8              ;2954
001d96  7020              STRB     r0,[r4,#0]            ;2954
001d98  20ff              MOVS     r0,#0xff              ;2954
001d9a  7060              STRB     r0,[r4,#1]            ;2954
001d9c  70a0              STRB     r0,[r4,#2]            ;2954
001d9e  70e0              STRB     r0,[r4,#3]            ;2954
001da0  7120              STRB     r0,[r4,#4]            ;2955
001da2  7160              STRB     r0,[r4,#5]            ;2955
001da4  71a0              STRB     r0,[r4,#6]            ;2955
001da6  71e0              STRB     r0,[r4,#7]            ;2955
001da8  7220              STRB     r0,[r4,#8]            ;2956
001daa  7260              STRB     r0,[r4,#9]            ;2956
001dac  72a0              STRB     r0,[r4,#0xa]          ;2956
001dae  200f              MOVS     r0,#0xf               ;2956
001db0  72e0              STRB     r0,[r4,#0xb]          ;2956
                  |L1.7602|
001db2  002a              MOVS     r2,r5                 ;2958
001db4  980c              LDR      r0,[sp,#0x30]         ;2958
001db6  1c6d              ADDS     r5,r5,#1              ;2958
001db8  2301              MOVS     r3,#1                 ;2958
001dba  0021              MOVS     r1,r4                 ;2958
001dbc  f7fffffe          BL       disk_write
001dc0  2800              CMP      r0,#0                 ;2958
001dc2  d027              BEQ      |L1.7700|
001dc4  2001              MOVS     r0,#1                 ;2959
001dc6  e5fc              B        |L1.6594|
                  |L1.7624|
                          DCD      ||.data||+0x4
                  |L1.7628|
                          DCD      0x00008000
                  |L1.7632|
                          DCD      ||.constdata||+0x80
                  |L1.7636|
                          DCD      0x00000200
                  |L1.7640|
                          DCD      0x00000ff5
                  |L1.7644|
                          DCD      0x0000fff5
                  |L1.7648|
                          DCD      0x00fb0400
                  |L1.7652|
001de4  4e4f204e          DCB      "NO NAME    FAT     ",0
001de8  414d4520
001dec  20202046
001df0  41542020
001df4  20202000
                  |L1.7672|
001df8  4e4f204e          DCB      "NO NAME    FAT32   ",0
001dfc  414d4520
001e00  20202046
001e04  41543332
001e08  20202000
                  |L1.7692|
                          DCD      0xffffff00
                  |L1.7696|
                          DCD      0x00ffff00
                  |L1.7700|
001e14  2201              MOVS     r2,#1                 ;2960
001e16  0252              LSLS     r2,r2,#9              ;2960
001e18  2100              MOVS     r1,#0                 ;2960
001e1a  0020              MOVS     r0,r4                 ;2960
001e1c  f7fffffe          BL       mem_set
001e20  2001              MOVS     r0,#1                 ;2961
001e22  9003              STR      r0,[sp,#0xc]          ;2961
001e24  e00d              B        |L1.7746|
                  |L1.7718|
001e26  002a              MOVS     r2,r5                 ;2962
001e28  980c              LDR      r0,[sp,#0x30]         ;2962
001e2a  1c6d              ADDS     r5,r5,#1              ;2962
001e2c  2301              MOVS     r3,#1                 ;2962
001e2e  0021              MOVS     r1,r4                 ;2962
001e30  f7fffffe          BL       disk_write
001e34  2800              CMP      r0,#0                 ;2962
001e36  d001              BEQ      |L1.7740|
001e38  2001              MOVS     r0,#1                 ;2963
001e3a  e5c2              B        |L1.6594|
                  |L1.7740|
001e3c  9803              LDR      r0,[sp,#0xc]          ;2961
001e3e  1c40              ADDS     r0,r0,#1              ;2961
001e40  9003              STR      r0,[sp,#0xc]          ;2961
                  |L1.7746|
001e42  9903              LDR      r1,[sp,#0xc]          ;2961
001e44  9806              LDR      r0,[sp,#0x18]         ;2961
001e46  4281              CMP      r1,r0                 ;2961
001e48  d3ed              BCC      |L1.7718|
001e4a  980a              LDR      r0,[sp,#0x28]         ;2947
001e4c  1c40              ADDS     r0,r0,#1              ;2947
001e4e  0600              LSLS     r0,r0,#24             ;2947
001e50  0e00              LSRS     r0,r0,#24             ;2947
001e52  900a              STR      r0,[sp,#0x28]         ;2947
001e54  980a              LDR      r0,[sp,#0x28]         ;2947
001e56  2800              CMP      r0,#0                 ;2947
001e58  d082              BEQ      |L1.7520|
001e5a  2e03              CMP      r6,#3                 ;2968
001e5c  d00e              BEQ      |L1.7804|
001e5e  9805              LDR      r0,[sp,#0x14]         ;2968
                  |L1.7776|
001e60  0600              LSLS     r0,r0,#24             ;2968
001e62  0e00              LSRS     r0,r0,#24             ;2968
001e64  900a              STR      r0,[sp,#0x28]         ;2968
                  |L1.7782|
001e66  002a              MOVS     r2,r5                 ;2970
001e68  980c              LDR      r0,[sp,#0x30]         ;2970
001e6a  1c6d              ADDS     r5,r5,#1              ;2970
001e6c  2301              MOVS     r3,#1                 ;2970
001e6e  0021              MOVS     r1,r4                 ;2970
001e70  f7fffffe          BL       disk_write
001e74  2800              CMP      r0,#0                 ;2970
001e76  d003              BEQ      |L1.7808|
001e78  2001              MOVS     r0,#1                 ;2971
001e7a  e5a2              B        |L1.6594|
                  |L1.7804|
001e7c  980e              LDR      r0,[sp,#0x38]         ;2968
001e7e  e7ef              B        |L1.7776|
                  |L1.7808|
001e80  980a              LDR      r0,[sp,#0x28]         ;2972
001e82  1e40              SUBS     r0,r0,#1              ;2972
001e84  0600              LSLS     r0,r0,#24             ;2972
001e86  0e00              LSRS     r0,r0,#24             ;2972
001e88  900a              STR      r0,[sp,#0x28]         ;2972
001e8a  d1ec              BNE      |L1.7782|
001e8c  2e03              CMP      r6,#3                 ;2975
001e8e  d12b              BNE      |L1.7912|
001e90  2055              MOVS     r0,#0x55              ;2976
001e92  77b8              STRB     r0,[r7,#0x1e]         ;2976
001e94  20aa              MOVS     r0,#0xaa              ;2976
001e96  77f8              STRB     r0,[r7,#0x1f]         ;2976
001e98  2052              MOVS     r0,#0x52              ;2977
001e9a  7020              STRB     r0,[r4,#0]            ;2977
001e9c  7060              STRB     r0,[r4,#1]            ;2977
001e9e  2261              MOVS     r2,#0x61              ;2977
001ea0  70a2              STRB     r2,[r4,#2]            ;2977
001ea2  2141              MOVS     r1,#0x41              ;2977
001ea4  70e1              STRB     r1,[r4,#3]            ;2977
001ea6  2072              MOVS     r0,#0x72              ;2978
001ea8  7138              STRB     r0,[r7,#4]            ;2978
001eaa  7178              STRB     r0,[r7,#5]            ;2978
001eac  71b9              STRB     r1,[r7,#6]            ;2978
001eae  71fa              STRB     r2,[r7,#7]            ;2978
001eb0  9804              LDR      r0,[sp,#0x10]         ;2979
001eb2  1e40              SUBS     r0,r0,#1              ;2979
001eb4  7238              STRB     r0,[r7,#8]            ;2979
001eb6  0a01              LSRS     r1,r0,#8              ;2979
001eb8  7279              STRB     r1,[r7,#9]            ;2979
001eba  0c01              LSRS     r1,r0,#16             ;2979
001ebc  72b9              STRB     r1,[r7,#0xa]          ;2979
001ebe  0e00              LSRS     r0,r0,#24             ;2979
001ec0  72f8              STRB     r0,[r7,#0xb]          ;2979
001ec2  20ff              MOVS     r0,#0xff              ;2980
001ec4  7338              STRB     r0,[r7,#0xc]          ;2980
001ec6  7378              STRB     r0,[r7,#0xd]          ;2980
001ec8  73b8              STRB     r0,[r7,#0xe]          ;2980
001eca  73f8              STRB     r0,[r7,#0xf]          ;2980
001ecc  9a09              LDR      r2,[sp,#0x24]         ;2981
001ece  980c              LDR      r0,[sp,#0x30]         ;2981
001ed0  2301              MOVS     r3,#1                 ;2981
001ed2  1c52              ADDS     r2,r2,#1              ;2981
001ed4  0021              MOVS     r1,r4                 ;2981
001ed6  f7fffffe          BL       disk_write
001eda  9a09              LDR      r2,[sp,#0x24]         ;2982
001edc  980c              LDR      r0,[sp,#0x30]         ;2982
001ede  2301              MOVS     r3,#1                 ;2982
001ee0  1dd2              ADDS     r2,r2,#7              ;2982
001ee2  0021              MOVS     r1,r4                 ;2982
001ee4  f7fffffe          BL       disk_write
                  |L1.7912|
001ee8  2200              MOVS     r2,#0                 ;2985
001eea  980c              LDR      r0,[sp,#0x30]         ;2985
001eec  0011              MOVS     r1,r2                 ;2985
001eee  f7fffffe          BL       disk_ioctl
001ef2  2800              CMP      r0,#0                 ;2985
001ef4  d001              BEQ      |L1.7930|
001ef6  2001              MOVS     r0,#1                 ;2985
001ef8  e563              B        |L1.6594|
                  |L1.7930|
001efa  2000              MOVS     r0,#0                 ;2985
001efc  e561              B        |L1.6594|
;;;2987   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  ||cvt||
000000  809a90b6          DCB      0x80,0x9a,0x90,0xb6
000004  8eb78f80          DCB      0x8e,0xb7,0x8f,0x80
000008  d2d3d4d8          DCB      0xd2,0xd3,0xd4,0xd8
00000c  d7de8e8f          DCB      0xd7,0xde,0x8e,0x8f
000010  909292e2          DCB      0x90,0x92,0x92,0xe2
000014  99e3eaeb          DCB      0x99,0xe3,0xea,0xeb
000018  59999a9d          DCB      0x59,0x99,0x9a,0x9d
00001c  9c9d9e9f          DCB      0x9c,0x9d,0x9e,0x9f
000020  b5d6e0e9          DCB      0xb5,0xd6,0xe0,0xe9
000024  a5a5a6a7          DCB      0xa5,0xa5,0xa6,0xa7
000028  a8a9aaab          DCB      0xa8,0xa9,0xaa,0xab
00002c  ac21aeaf          DCB      0xac,0x21,0xae,0xaf
000030  b0b1b2b3          DCB      0xb0,0xb1,0xb2,0xb3
000034  b4b5b6b7          DCB      0xb4,0xb5,0xb6,0xb7
000038  b8b9babb          DCB      0xb8,0xb9,0xba,0xbb
00003c  bcbdbebf          DCB      0xbc,0xbd,0xbe,0xbf
000040  c0c1c2c3          DCB      0xc0,0xc1,0xc2,0xc3
000044  c4c5c7c7          DCB      0xc4,0xc5,0xc7,0xc7
000048  c8c9cacb          DCB      0xc8,0xc9,0xca,0xcb
00004c  cccdcecf          DCB      0xcc,0xcd,0xce,0xcf
000050  d0d1d2d3          DCB      0xd0,0xd1,0xd2,0xd3
000054  d4d5d6d7          DCB      0xd4,0xd5,0xd6,0xd7
000058  d8d9dadb          DCB      0xd8,0xd9,0xda,0xdb
00005c  dcdddedf          DCB      0xdc,0xdd,0xde,0xdf
000060  e0e1e2e3          DCB      0xe0,0xe1,0xe2,0xe3
000064  e5e5e6e7          DCB      0xe5,0xe5,0xe6,0xe7
000068  e7e9eaeb          DCB      0xe7,0xe9,0xea,0xeb
00006c  ededeeef          DCB      0xed,0xed,0xee,0xef
000070  f0f1f2f3          DCB      0xf0,0xf1,0xf2,0xf3
000074  f4f5f6f7          DCB      0xf4,0xf5,0xf6,0xf7
000078  f8f9fafb          DCB      0xf8,0xf9,0xfa,0xfb
00007c  fcfdfeff          DCB      0xfc,0xfd,0xfe,0xff
                  sstbl
                          DCD      0x001f4000
                          DCD      0x000fa000
                          DCD      0x0007d000
                          DCD      0x0003e800
                          DCD      0x0001f400
                          DCD      0x0000fa00
                          DCD      0x00007d00
                          DCD      0x00003e80
                          DCD      0x00001f40
                          DCD      0x00000fa0
                          DCD      0x00000000
                  cstbl
0000ac  80004000          DCW      0x8000,0x4000
0000b0  20001000          DCW      0x2000,0x1000
0000b4  08004000          DCW      0x0800,0x4000
0000b8  20001000          DCW      0x2000,0x1000
0000bc  08000400          DCW      0x0800,0x0400
0000c0  0200              DCW      0x0200

                          AREA ||.data||, DATA, ALIGN=2

                  Fsid
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  FatFs
                          DCD      0x00000000
