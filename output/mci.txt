; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave --gnu -o.\output\mci.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\mci.d --cpu=ARM926EJ-S --apcs=interwork -O0 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Atmel\SAM9M10 -Dat91sam9m10 -Dddram -DNOFPUT -DTRACE_LEVEL=4 --omf_browse=.\output\mci.crf mci.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  MCI_DrvInit PROC
;;;53     
;;;54     void MCI_DrvInit(Mci *pMci, U8 ch, U32 bPolling)
000000  b5f8              PUSH     {r3-r7,lr}
;;;55     {
000002  0005              MOVS     r5,r0
000004  000c              MOVS     r4,r1
000006  0017              MOVS     r7,r2
;;;56     	U32 mciId;
;;;57     
;;;58     	if(ch == 0) mciId = PERIF_ID_MCI0;
000008  2c00              CMP      r4,#0
00000a  d101              BNE      |L1.16|
00000c  260b              MOVS     r6,#0xb
00000e  e000              B        |L1.18|
                  |L1.16|
;;;59     	else mciId = PERIF_ID_MCI1;
000010  261d              MOVS     r6,#0x1d
                  |L1.18|
;;;60     	
;;;61         // Initialize the MCI driver structure
;;;62     	pMci->mciChan   = ch;
000012  702c              STRB     r4,[r5,#0]
;;;63     	pMci->mciId     = (U8)mciId;
000014  722e              STRB     r6,[r5,#8]
;;;64     	pMci->mciMode   = (0x0) | (0x2 << 6);
000016  2080              MOVS     r0,#0x80
000018  7268              STRB     r0,[r5,#9]
;;;65     	pMci->bPolling  = bPolling;
00001a  60ef              STR      r7,[r5,#0xc]
;;;66     	pMci->semaphore = 1;
00001c  2001              MOVS     r0,#1
00001e  72a8              STRB     r0,[r5,#0xa]
;;;67     	pMci->pCommand  = 0;
000020  2000              MOVS     r0,#0
000022  6068              STR      r0,[r5,#4]
;;;68     
;;;69     	PMC_PeriEn(mciId);
000024  0030              MOVS     r0,r6
000026  f7fffffe          BL       PMC_PeriEn
;;;70     	rHSMCI_CR(ch)	= (1 << 7);
00002a  2180              MOVS     r1,#0x80
00002c  48fe              LDR      r0,|L1.1064|
00002e  4360              MULS     r0,r4,r0
000030  030a              LSLS     r2,r1,#12
000032  1a80              SUBS     r0,r0,r2
000034  6001              STR      r1,[r0,#0]
;;;71     	rHSMCI_CR(ch)	= (1 << 1) | (1 << 3);
000036  210a              MOVS     r1,#0xa
000038  48fb              LDR      r0,|L1.1064|
00003a  4360              MULS     r0,r4,r0
00003c  1a80              SUBS     r0,r0,r2
00003e  6001              STR      r1,[r0,#0]
;;;72     	rHSMCI_IDR(ch)	= 0xFFFFFFFF;
000040  2100              MOVS     r1,#0
000042  43c9              MVNS     r1,r1
000044  48f8              LDR      r0,|L1.1064|
000046  4360              MULS     r0,r4,r0
000048  1a80              SUBS     r0,r0,r2
00004a  6481              STR      r1,[r0,#0x48]
;;;73     	rHSMCI_DTOR(ch)	= (0xF << 0) | (0x7 << 4);
00004c  217f              MOVS     r1,#0x7f
00004e  48f6              LDR      r0,|L1.1064|
000050  4360              MULS     r0,r4,r0
000052  1a80              SUBS     r0,r0,r2
000054  6081              STR      r1,[r0,#8]
;;;74     	rHSMCI_MR(ch)	= 0x000007A5; //(((((unsigned long)((12000000 / 3 / 2 / 3) * 200 )) / (400000 * 2)) - 1) | ((0x7 <<  8) & (0x7 << 8)));
000056  49f5              LDR      r1,|L1.1068|
000058  48f3              LDR      r0,|L1.1064|
00005a  4360              MULS     r0,r4,r0
00005c  1a80              SUBS     r0,r0,r2
00005e  6041              STR      r1,[r0,#4]
;;;75     	rHSMCI_SDCR(ch)	= (0x0) | (0x2 << 6);
000060  2180              MOVS     r1,#0x80
000062  48f1              LDR      r0,|L1.1064|
000064  4360              MULS     r0,r4,r0
000066  1a80              SUBS     r0,r0,r2
000068  60c1              STR      r1,[r0,#0xc]
;;;76     	rHSMCI_CR(ch)	= (0x1 << 0);
00006a  2101              MOVS     r1,#1
00006c  48ee              LDR      r0,|L1.1064|
00006e  4360              MULS     r0,r4,r0
000070  1a80              SUBS     r0,r0,r2
000072  6001              STR      r1,[r0,#0]
;;;77     	rHSMCI_DMA(ch)	= (0x0 << 8);
000074  2100              MOVS     r1,#0
000076  48ec              LDR      r0,|L1.1064|
000078  4360              MULS     r0,r4,r0
00007a  1a80              SUBS     r0,r0,r2
00007c  6501              STR      r1,[r0,#0x50]
;;;78     	rHSMCI_CFG(ch)	= (0x0) | (0x0 << 4);
00007e  48ea              LDR      r0,|L1.1064|
000080  4360              MULS     r0,r4,r0
000082  1a80              SUBS     r0,r0,r2
000084  6541              STR      r1,[r0,#0x54]
;;;79     	PMC_PeriDis(mciId);
000086  0030              MOVS     r0,r6
000088  f7fffffe          BL       PMC_PeriDis
;;;80     }
00008c  bdf8              POP      {r3-r7,pc}
;;;81     
                          ENDP

                  DMACH_EnableIt PROC
;;;847    
;;;848    static void DMACH_EnableIt(U8 ch, U32 channel)
00008e  b570              PUSH     {r4-r6,lr}
;;;849    {
000090  0006              MOVS     r6,r0
000092  000c              MOVS     r4,r1
;;;850        U32 intFlag;
;;;851    
;;;852        intFlag = DMA_GetInterruptMask();
000094  f7fffffe          BL       DMA_GetInterruptMask
000098  0005              MOVS     r5,r0
;;;853        intFlag |= (AT91C_HDMA_BTC0 << channel);
00009a  2001              MOVS     r0,#1
00009c  40a0              LSLS     r0,r0,r4
00009e  4305              ORRS     r5,r5,r0
;;;854        DMA_EnableIt(intFlag);
0000a0  0028              MOVS     r0,r5
0000a2  f7fffffe          BL       DMA_EnableIt
;;;855    }
0000a6  bd70              POP      {r4-r6,pc}
                          ENDP

                  AT91F_Prepare_Multiple_Transfer PROC
;;;598    
;;;599    static void AT91F_Prepare_Multiple_Transfer(U32 Channel, U32 LLI_rownumber, U32 LLI_Last_Row, U32 From_add, U32 To_add, U32 Ctrla, U32 Ctrlb)
0000a8  b5f0              PUSH     {r4-r7,lr}
;;;600    {
0000aa  9d06              LDR      r5,[sp,#0x18]
0000ac  9c05              LDR      r4,[sp,#0x14]
;;;601        LLI_MCI[LLI_rownumber].sourceAddress =  From_add;
0000ae  2014              MOVS     r0,#0x14
0000b0  4348              MULS     r0,r1,r0
0000b2  4edf              LDR      r6,|L1.1072|
0000b4  5033              STR      r3,[r6,r0]
;;;602        LLI_MCI[LLI_rownumber].destAddress =  To_add;
0000b6  2014              MOVS     r0,#0x14
0000b8  4348              MULS     r0,r1,r0
0000ba  1980              ADDS     r0,r0,r6
0000bc  6044              STR      r4,[r0,#4]
;;;603        LLI_MCI[LLI_rownumber].controlA =  Ctrla;
0000be  2014              MOVS     r0,#0x14
0000c0  4348              MULS     r0,r1,r0
0000c2  1980              ADDS     r0,r0,r6
0000c4  6085              STR      r5,[r0,#8]
;;;604        LLI_MCI[LLI_rownumber].controlB =  Ctrlb;
0000c6  2614              MOVS     r6,#0x14
0000c8  434e              MULS     r6,r1,r6
0000ca  4fd9              LDR      r7,|L1.1072|
0000cc  19f6              ADDS     r6,r6,r7
0000ce  9807              LDR      r0,[sp,#0x1c]
0000d0  60f0              STR      r0,[r6,#0xc]
;;;605        if (LLI_Last_Row != LAST_ROW)
0000d2  1fd0              SUBS     r0,r2,#7
0000d4  38f9              SUBS     r0,r0,#0xf9
0000d6  d009              BEQ      |L1.236|
;;;606            LLI_MCI[LLI_rownumber].descriptor =
0000d8  1c48              ADDS     r0,r1,#1
0000da  2614              MOVS     r6,#0x14
0000dc  4370              MULS     r0,r6,r0
0000de  003e              MOVS     r6,r7
0000e0  1980              ADDS     r0,r0,r6
0000e2  2614              MOVS     r6,#0x14
0000e4  434e              MULS     r6,r1,r6
0000e6  19f6              ADDS     r6,r6,r7
0000e8  6130              STR      r0,[r6,#0x10]
0000ea  e007              B        |L1.252|
                  |L1.236|
;;;607                 (U32)&LLI_MCI[LLI_rownumber + 1] + 0;
;;;608        else {
;;;609            dmaLastLliNdx = LLI_rownumber;
0000ec  4ed1              LDR      r6,|L1.1076|
0000ee  7031              STRB     r1,[r6,#0]
;;;610            LLI_MCI[LLI_rownumber].descriptor = 0;
0000f0  2600              MOVS     r6,#0
0000f2  2014              MOVS     r0,#0x14
0000f4  4348              MULS     r0,r1,r0
0000f6  4fce              LDR      r7,|L1.1072|
0000f8  19c0              ADDS     r0,r0,r7
0000fa  6106              STR      r6,[r0,#0x10]
                  |L1.252|
;;;611        }
;;;612    }
0000fc  bdf0              POP      {r4-r7,pc}
;;;613    
                          ENDP

                  DMACH_MCI_M2P PROC
;;;726    // forceByte: 1 - byte count, 0 - word count
;;;727    static U32 DMACH_MCI_M2P(U32 channel_index, U8* src_addr, U32 dest_addr, U32 trans_size, U8 addrIncMode, U8 forceByte)
0000fe  b5ff              PUSH     {r0-r7,lr}
;;;728    {
000100  b08b              SUB      sp,sp,#0x2c
000102  0004              MOVS     r4,r0
;;;729        U32 srcAddress;
;;;730        U32 destAddress;
;;;731        U32 buffSize;
;;;732        U32 LLI_rownumber = 0;
000104  2000              MOVS     r0,#0
000106  9009              STR      r0,[sp,#0x24]
;;;733        U32 dstAddressMode = addrIncMode ?
000108  9814              LDR      r0,[sp,#0x50]
00010a  2800              CMP      r0,#0
00010c  d001              BEQ      |L1.274|
;;;734                                      (AT91C_HDMA_DST_ADDRESS_MODE_INCR)
00010e  2000              MOVS     r0,#0
000110  e000              B        |L1.276|
                  |L1.274|
;;;735                                    : (AT91C_HDMA_DST_ADDRESS_MODE_FIXED);
000112  48c9              LDR      r0,|L1.1080|
                  |L1.276|
000114  9008              STR      r0,[sp,#0x20]
;;;736        U32 dcSize, scSize, mWidth, perWidth, addrInc;
;;;737    
;;;738        // Disable dma channel
;;;739        DMA_DisableChannel(channel_index);
000116  0020              MOVS     r0,r4
000118  f7fffffe          BL       DMA_DisableChannel
;;;740    
;;;741        buffSize = trans_size;
00011c  9e0e              LDR      r6,[sp,#0x38]
;;;742        if(buffSize >= DMA_TOTAL){
00011e  204b              MOVS     r0,#0x4b
000120  0200              LSLS     r0,r0,#8
000122  4286              CMP      r6,r0
000124  d314              BCC      |L1.336|
;;;743            TRACE_WRN("SD DMA, size too big %d\n\r", buffSize);
000126  201b              MOVS     r0,#0x1b
000128  f7fffffe          BL       ShellPutByte
00012c  a0c3              ADR      r0,|L1.1084|
00012e  f7fffffe          BL       ShellPrintf
000132  201b              MOVS     r0,#0x1b
000134  f7fffffe          BL       ShellPutByte
000138  a0c3              ADR      r0,|L1.1096|
00013a  f7fffffe          BL       ShellPrintf
00013e  0031              MOVS     r1,r6
000140  a0c2              ADR      r0,|L1.1100|
000142  f7fffffe          BL       ShellPrintf
000146  a0c8              ADR      r0,|L1.1128|
000148  f7fffffe          BL       ShellPrintf
;;;744            buffSize = DMA_TOTAL;
00014c  264b              MOVS     r6,#0x4b
00014e  0236              LSLS     r6,r6,#8
                  |L1.336|
;;;745        }
;;;746    
;;;747        // DMA channel configuration
;;;748        srcAddress  = (U32)src_addr;    // Set the data start address
000150  9d0c              LDR      r5,[sp,#0x30]
;;;749        destAddress = (U32)dest_addr;
000152  980d              LDR      r0,[sp,#0x34]
000154  900a              STR      r0,[sp,#0x28]
;;;750    
;;;751        // Memory width
;;;752        mWidth = ((srcAddress & 0x3) == 0) ? AT91C_HDMA_SRC_WIDTH_WORD
000156  07a8              LSLS     r0,r5,#30
000158  0f80              LSRS     r0,r0,#30
00015a  d101              BNE      |L1.352|
00015c  48c3              LDR      r0,|L1.1132|
00015e  e000              B        |L1.354|
                  |L1.352|
;;;753                                           : AT91C_HDMA_SRC_WIDTH_BYTE;
000160  2000              MOVS     r0,#0
                  |L1.354|
000162  9005              STR      r0,[sp,#0x14]
;;;754        // One Transfer size (1 or 4)
;;;755        perWidth = forceByte ? AT91C_HDMA_DST_WIDTH_BYTE
000164  9815              LDR      r0,[sp,#0x54]
000166  2800              CMP      r0,#0
000168  d001              BEQ      |L1.366|
00016a  2000              MOVS     r0,#0
00016c  e000              B        |L1.368|
                  |L1.366|
;;;756                             : AT91C_HDMA_DST_WIDTH_WORD;
00016e  48b2              LDR      r0,|L1.1080|
                  |L1.368|
000170  9004              STR      r0,[sp,#0x10]
;;;757        //addrInc = forceByte ? 1 : 4;
;;;758        if (mWidth == AT91C_HDMA_SRC_WIDTH_BYTE) {
000172  9805              LDR      r0,[sp,#0x14]
000174  2800              CMP      r0,#0
000176  d105              BNE      |L1.388|
;;;759            addrInc = 1;
000178  2701              MOVS     r7,#1
;;;760            if (!forceByte) buffSize *= 4;
00017a  9815              LDR      r0,[sp,#0x54]
00017c  2800              CMP      r0,#0
00017e  d102              BNE      |L1.390|
000180  00b6              LSLS     r6,r6,#2
000182  e000              B        |L1.390|
                  |L1.388|
;;;761        }
;;;762        else
;;;763            addrInc = 4;
000184  2704              MOVS     r7,#4
                  |L1.390|
;;;764    
;;;765        // Set DMA channel source address
;;;766        DMA_SetSourceAddr(channel_index, srcAddress);
000186  0620              LSLS     r0,r4,#24
000188  0e00              LSRS     r0,r0,#24
00018a  0029              MOVS     r1,r5
00018c  f7fffffe          BL       DMA_SetSourceAddr
;;;767    
;;;768        // Set DMA channel destination address
;;;769        DMA_SetDestinationAddr(channel_index,destAddress);
000190  0620              LSLS     r0,r4,#24
000192  0e00              LSRS     r0,r0,#24
000194  990a              LDR      r1,[sp,#0x28]
000196  f7fffffe          BL       DMA_SetDestinationAddr
;;;770    
;;;771        // Set DMA channel DSCR
;;;772        DMA_SetDescriptorAddr(channel_index, (U32)&LLI_MCI[0]);
00019a  0620              LSLS     r0,r4,#24
00019c  0e00              LSRS     r0,r0,#24
00019e  49a4              LDR      r1,|L1.1072|
0001a0  f7fffffe          BL       DMA_SetDescriptorAddr
;;;773    
;;;774        // Set DMA channel control A 
;;;775        DMA_SetSourceBufferSize(channel_index, buffSize,
0001a4  2000              MOVS     r0,#0
0001a6  9000              STR      r0,[sp,#0]
0001a8  9804              LDR      r0,[sp,#0x10]
0001aa  0f03              LSRS     r3,r0,#28
0001ac  9805              LDR      r0,[sp,#0x14]
0001ae  0e02              LSRS     r2,r0,#24
0001b0  0620              LSLS     r0,r4,#24
0001b2  0e00              LSRS     r0,r0,#24
0001b4  0031              MOVS     r1,r6
0001b6  9003              STR      r0,[sp,#0xc]
0001b8  f7fffffe          BL       DMA_SetSourceBufferSize
;;;776                                (mWidth   >> 24),
;;;777                                (perWidth >> 28), 0);
;;;778    
;;;779        //Set DMA channel control B
;;;780        DMA_SetSourceBufferMode(channel_index,
0001bc  0620              LSLS     r0,r4,#24
0001be  0e00              LSRS     r0,r0,#24
0001c0  2200              MOVS     r2,#0
0001c2  2101              MOVS     r1,#1
0001c4  f7fffffe          BL       DMA_SetSourceBufferMode
;;;781                                DMA_TRANSFER_LLI,
;;;782                                (AT91C_HDMA_SRC_ADDRESS_MODE_INCR >> 24));
;;;783        DMA_SetDestBufferMode(channel_index,
0001c8  9908              LDR      r1,[sp,#0x20]
0001ca  0f0a              LSRS     r2,r1,#28
0001cc  0620              LSLS     r0,r4,#24
0001ce  0e00              LSRS     r0,r0,#24
0001d0  2101              MOVS     r1,#1
0001d2  f7fffffe          BL       DMA_SetDestBufferMode
;;;784                              DMA_TRANSFER_LLI,
;;;785                              dstAddressMode >> 28);
;;;786    
;;;787        // Set DMA channel config
;;;788        DMA_SetConfiguration(channel_index, AT91C_HDMA_SRC_PER_0 \
0001d6  0620              LSLS     r0,r4,#24
0001d8  0e00              LSRS     r0,r0,#24
0001da  2101              MOVS     r1,#1
0001dc  0349              LSLS     r1,r1,#13
0001de  f7fffffe          BL       DMA_SetConfiguration
;;;789                                            | AT91C_HDMA_DST_PER_0 \
;;;790                                            | AT91C_HDMA_SRC_H2SEL_SW \
;;;791                                            | AT91C_HDMA_DST_H2SEL_HW \
;;;792                                            | AT91C_HDMA_SOD_DISABLE \
;;;793                                            | AT91C_HDMA_FIFOCFG_LARGESTBURST);
;;;794        //dcSize = (perChunkSize == 4) ? AT91C_HDMA_DCSIZE_4 : AT91C_HDMA_DCSIZE_1;
;;;795        //scSize = (memChunkSize == 4) ? AT91C_HDMA_SCSIZE_4 : AT91C_HDMA_SCSIZE_1;
;;;796        dcSize = AT91C_HDMA_DCSIZE_1;    scSize = AT91C_HDMA_SCSIZE_4;
0001e2  2000              MOVS     r0,#0
0001e4  9007              STR      r0,[sp,#0x1c]
0001e6  48a2              LDR      r0,|L1.1136|
0001e8  9006              STR      r0,[sp,#0x18]
;;;797    
;;;798        // Set link list
;;;799        buffSize *= addrInc; // convert to byte address
0001ea  0030              MOVS     r0,r6
0001ec  4378              MULS     r0,r7,r0
0001ee  0006              MOVS     r6,r0
;;;800        while(srcAddress < ((U32)(src_addr + buffSize)))
0001f0  e046              B        |L1.640|
                  |L1.498|
;;;801        {
;;;802            if(((U32)(src_addr + buffSize)) - srcAddress <= (DMA_XFR_SIZE*addrInc) )
0001f2  980c              LDR      r0,[sp,#0x30]
0001f4  1980              ADDS     r0,r0,r6
0001f6  1b41              SUBS     r1,r0,r5
0001f8  200f              MOVS     r0,#0xf
0001fa  0200              LSLS     r0,r0,#8
0001fc  4378              MULS     r0,r7,r0
0001fe  4281              CMP      r1,r0
000200  d81f              BHI      |L1.578|
;;;803            {
;;;804                AT91F_Prepare_Multiple_Transfer(channel_index, LLI_rownumber, LAST_ROW,
000202  990c              LDR      r1,[sp,#0x30]
000204  1989              ADDS     r1,r1,r6
000206  1b48              SUBS     r0,r1,r5
000208  0039              MOVS     r1,r7
00020a  f7fffffe          BL       __aeabi_uidivmod
00020e  9905              LDR      r1,[sp,#0x14]
000210  4308              ORRS     r0,r0,r1
000212  9904              LDR      r1,[sp,#0x10]
000214  4308              ORRS     r0,r0,r1
000216  9906              LDR      r1,[sp,#0x18]
000218  4308              ORRS     r0,r0,r1
00021a  9907              LDR      r1,[sp,#0x1c]
00021c  4308              ORRS     r0,r0,r1
00021e  9003              STR      r0,[sp,#0xc]
000220  2103              MOVS     r1,#3
000222  0509              LSLS     r1,r1,#20
000224  9808              LDR      r0,[sp,#0x20]
000226  4308              ORRS     r0,r0,r1
000228  9a03              LDR      r2,[sp,#0xc]
00022a  990a              LDR      r1,[sp,#0x28]
00022c  002b              MOVS     r3,r5
00022e  9201              STR      r2,[sp,#4]
000230  9100              STR      r1,[sp,#0]
000232  9002              STR      r0,[sp,#8]
000234  22ff              MOVS     r2,#0xff
000236  3201              ADDS     r2,#1
000238  0020              MOVS     r0,r4
00023a  9909              LDR      r1,[sp,#0x24]
00023c  f7fffffe          BL       AT91F_Prepare_Multiple_Transfer
000240  e017              B        |L1.626|
                  |L1.578|
;;;805                                            srcAddress,
;;;806                                            destAddress,
;;;807                                            (((((U32)(src_addr + buffSize))
;;;808                                                    - srcAddress)/addrInc)
;;;809                                                      | mWidth
;;;810                                                      | perWidth
;;;811                                                      | scSize
;;;812                                                      | dcSize
;;;813                                                          ),
;;;814                                            ( AT91C_HDMA_DST_DSCR_FETCH_DISABLE
;;;815                                            | dstAddressMode
;;;816                                            | AT91C_HDMA_SRC_DSCR_FETCH_FROM_MEM
;;;817                                            | AT91C_HDMA_SRC_ADDRESS_MODE_INCR
;;;818                                            | AT91C_HDMA_FC_MEM2PER));
;;;819            }
;;;820            else
;;;821            {
;;;822                AT91F_Prepare_Multiple_Transfer(channel_index, LLI_rownumber, 0,
000242  2103              MOVS     r1,#3
000244  0509              LSLS     r1,r1,#20
000246  9808              LDR      r0,[sp,#0x20]
000248  4301              ORRS     r1,r1,r0
00024a  220f              MOVS     r2,#0xf
00024c  0212              LSLS     r2,r2,#8
00024e  9805              LDR      r0,[sp,#0x14]
000250  4310              ORRS     r0,r0,r2
000252  9a04              LDR      r2,[sp,#0x10]
000254  4310              ORRS     r0,r0,r2
000256  9a06              LDR      r2,[sp,#0x18]
000258  4310              ORRS     r0,r0,r2
00025a  9a07              LDR      r2,[sp,#0x1c]
00025c  4310              ORRS     r0,r0,r2
00025e  9a0a              LDR      r2,[sp,#0x28]
000260  002b              MOVS     r3,r5
000262  9200              STR      r2,[sp,#0]
000264  9102              STR      r1,[sp,#8]
000266  9001              STR      r0,[sp,#4]
000268  2200              MOVS     r2,#0
00026a  0020              MOVS     r0,r4
00026c  9909              LDR      r1,[sp,#0x24]
00026e  f7fffffe          BL       AT91F_Prepare_Multiple_Transfer
                  |L1.626|
;;;823                                            srcAddress,
;;;824                                            destAddress,
;;;825                                            ( (DMA_XFR_SIZE)
;;;826                                                | mWidth
;;;827                                                | perWidth
;;;828                                                | scSize
;;;829                                                | dcSize
;;;830                                                    ),
;;;831                                            ( AT91C_HDMA_DST_DSCR_FETCH_DISABLE
;;;832                                            | dstAddressMode
;;;833                                            | AT91C_HDMA_SRC_DSCR_FETCH_FROM_MEM
;;;834                                            | AT91C_HDMA_SRC_ADDRESS_MODE_INCR
;;;835                                            | AT91C_HDMA_FC_MEM2PER));
;;;836    
;;;837            }
;;;838    
;;;839            srcAddress += DMA_XFR_SIZE*addrInc;
000272  200f              MOVS     r0,#0xf
000274  0200              LSLS     r0,r0,#8
000276  4378              MULS     r0,r7,r0
000278  1945              ADDS     r5,r0,r5
;;;840    
;;;841            
;;;842            LLI_rownumber++;
00027a  9809              LDR      r0,[sp,#0x24]
00027c  1c40              ADDS     r0,r0,#1
00027e  9009              STR      r0,[sp,#0x24]
                  |L1.640|
000280  980c              LDR      r0,[sp,#0x30]         ;800
000282  1980              ADDS     r0,r0,r6              ;800
000284  42a8              CMP      r0,r5                 ;800
000286  d8b4              BHI      |L1.498|
;;;843        }
;;;844        	TRACE_WRN("DMACH_MCI_M2P()");
000288  201b              MOVS     r0,#0x1b
00028a  f7fffffe          BL       ShellPutByte
00028e  a06b              ADR      r0,|L1.1084|
000290  f7fffffe          BL       ShellPrintf
000294  201b              MOVS     r0,#0x1b
000296  f7fffffe          BL       ShellPutByte
00029a  a06b              ADR      r0,|L1.1096|
00029c  f7fffffe          BL       ShellPrintf
0002a0  a074              ADR      r0,|L1.1140|
0002a2  f7fffffe          BL       ShellPrintf
0002a6  a070              ADR      r0,|L1.1128|
0002a8  f7fffffe          BL       ShellPrintf
;;;845        return 0;
0002ac  2000              MOVS     r0,#0
;;;846    }
0002ae  b00f              ADD      sp,sp,#0x3c
0002b0  bdf0              POP      {r4-r7,pc}
;;;847    
                          ENDP

                  DMACH_MCI_P2M PROC
;;;618    static U32
;;;619    DMACH_MCI_P2M(U32 channel_index, U32 src_addr, U8* dest_addr, U32 trans_size, U8  addrIncMode, U8 forceByte)
0002b2  b5ff              PUSH     {r0-r7,lr}
;;;620    {
0002b4  b08d              SUB      sp,sp,#0x34
0002b6  0005              MOVS     r5,r0
0002b8  0017              MOVS     r7,r2
;;;621        U32 srcAddress;
;;;622        U32 destAddress;
;;;623        U32 buffSize;
;;;624        U32 LLI_rownumber = 0;
0002ba  2000              MOVS     r0,#0
0002bc  900b              STR      r0,[sp,#0x2c]
;;;625        U32 srcAddressMode = addrIncMode ? (AT91C_HDMA_SRC_ADDRESS_MODE_INCR) : (AT91C_HDMA_SRC_ADDRESS_MODE_FIXED);
0002be  9816              LDR      r0,[sp,#0x58]
0002c0  2800              CMP      r0,#0
0002c2  d001              BEQ      |L1.712|
0002c4  2000              MOVS     r0,#0
0002c6  e000              B        |L1.714|
                  |L1.712|
0002c8  4868              LDR      r0,|L1.1132|
                  |L1.714|
0002ca  900a              STR      r0,[sp,#0x28]
;;;626        U32 scSize, dcSize, mWidth, perWidth, addrInc;
;;;627    
;;;628        // Disable dma channel
;;;629        DMA_DisableChannel(channel_index);
0002cc  0028              MOVS     r0,r5
0002ce  f7fffffe          BL       DMA_DisableChannel
;;;630    
;;;631        // DMA channel configuration
;;;632        srcAddress  = (U32)src_addr;    // Set the data start address
0002d2  980e              LDR      r0,[sp,#0x38]
0002d4  900c              STR      r0,[sp,#0x30]
;;;633        destAddress = (U32)dest_addr; //(U32)SSC_THR_ADD; 
0002d6  003c              MOVS     r4,r7
;;;634        buffSize    = trans_size;
0002d8  9e10              LDR      r6,[sp,#0x40]
;;;635    
;;;636        // Memory width can be WORD if address is aligned
;;;637        mWidth = ((destAddress & 0x3) == 0) ? AT91C_HDMA_DST_WIDTH_WORD : AT91C_HDMA_DST_WIDTH_BYTE;
0002da  07a0              LSLS     r0,r4,#30
0002dc  0f80              LSRS     r0,r0,#30
0002de  d101              BNE      |L1.740|
0002e0  4855              LDR      r0,|L1.1080|
0002e2  e000              B        |L1.742|
                  |L1.740|
0002e4  2000              MOVS     r0,#0
                  |L1.742|
0002e6  9007              STR      r0,[sp,#0x1c]
;;;638        // Peripheral width is byte if FBYTE mode
;;;639        perWidth = forceByte ? AT91C_HDMA_SRC_WIDTH_BYTE : AT91C_HDMA_SRC_WIDTH_WORD;
0002e8  9817              LDR      r0,[sp,#0x5c]
0002ea  2800              CMP      r0,#0
0002ec  d001              BEQ      |L1.754|
0002ee  2000              MOVS     r0,#0
0002f0  e000              B        |L1.756|
                  |L1.754|
0002f2  485e              LDR      r0,|L1.1132|
                  |L1.756|
0002f4  9006              STR      r0,[sp,#0x18]
;;;640        addrInc  = forceByte ? 1 : 4;
0002f6  9817              LDR      r0,[sp,#0x5c]
0002f8  2800              CMP      r0,#0
0002fa  d001              BEQ      |L1.768|
0002fc  2001              MOVS     r0,#1
0002fe  e000              B        |L1.770|
                  |L1.768|
000300  2004              MOVS     r0,#4
                  |L1.770|
000302  9005              STR      r0,[sp,#0x14]
;;;641    
;;;642        if(buffSize >= DMA_TOTAL){
000304  204b              MOVS     r0,#0x4b
000306  0200              LSLS     r0,r0,#8
000308  4286              CMP      r6,r0
00030a  d314              BCC      |L1.822|
;;;643            TRACE_WRN("SD DMA, size too big %d\n\r", buffSize);
00030c  201b              MOVS     r0,#0x1b
00030e  f7fffffe          BL       ShellPutByte
000312  a04a              ADR      r0,|L1.1084|
000314  f7fffffe          BL       ShellPrintf
000318  201b              MOVS     r0,#0x1b
00031a  f7fffffe          BL       ShellPutByte
00031e  a04a              ADR      r0,|L1.1096|
000320  f7fffffe          BL       ShellPrintf
000324  0031              MOVS     r1,r6
000326  a049              ADR      r0,|L1.1100|
000328  f7fffffe          BL       ShellPrintf
00032c  a04e              ADR      r0,|L1.1128|
00032e  f7fffffe          BL       ShellPrintf
;;;644            buffSize = DMA_TOTAL;
000332  264b              MOVS     r6,#0x4b
000334  0236              LSLS     r6,r6,#8
                  |L1.822|
;;;645        }
;;;646    
;;;647        // Set DMA channel source address
;;;648        DMA_SetSourceAddr(channel_index, srcAddress);
000336  0628              LSLS     r0,r5,#24
000338  0e00              LSRS     r0,r0,#24
00033a  990c              LDR      r1,[sp,#0x30]
00033c  f7fffffe          BL       DMA_SetSourceAddr
;;;649    
;;;650        // Set DMA channel destination address
;;;651        DMA_SetDestinationAddr(channel_index,destAddress);
000340  0628              LSLS     r0,r5,#24
000342  0e00              LSRS     r0,r0,#24
000344  0021              MOVS     r1,r4
000346  f7fffffe          BL       DMA_SetDestinationAddr
;;;652    
;;;653        // Set DMA channel DSCR
;;;654        DMA_SetDescriptorAddr(channel_index, (U32)&LLI_MCI[0]);
00034a  0628              LSLS     r0,r5,#24
00034c  0e00              LSRS     r0,r0,#24
00034e  4938              LDR      r1,|L1.1072|
000350  f7fffffe          BL       DMA_SetDescriptorAddr
;;;655    
;;;656        // Set DMA channel control A 
;;;657        DMA_SetSourceBufferSize(channel_index, buffSize, (perWidth >> 24), (mWidth >> 28), 0);
000354  2000              MOVS     r0,#0
000356  9000              STR      r0,[sp,#0]
000358  9807              LDR      r0,[sp,#0x1c]
00035a  0f03              LSRS     r3,r0,#28
00035c  9806              LDR      r0,[sp,#0x18]
00035e  0e02              LSRS     r2,r0,#24
000360  0628              LSLS     r0,r5,#24
000362  0e00              LSRS     r0,r0,#24
000364  0031              MOVS     r1,r6
000366  9004              STR      r0,[sp,#0x10]
000368  f7fffffe          BL       DMA_SetSourceBufferSize
;;;658    
;;;659    	//Set DMA channel control B
;;;660        DMA_SetSourceBufferMode(channel_index, DMA_TRANSFER_LLI, srcAddressMode >> 24);
00036c  990a              LDR      r1,[sp,#0x28]
00036e  0e0a              LSRS     r2,r1,#24
000370  0628              LSLS     r0,r5,#24
000372  0e00              LSRS     r0,r0,#24
000374  2101              MOVS     r1,#1
000376  f7fffffe          BL       DMA_SetSourceBufferMode
;;;661        DMA_SetDestBufferMode(channel_index, DMA_TRANSFER_LLI, (AT91C_HDMA_DST_ADDRESS_MODE_INCR >> 28));
00037a  0628              LSLS     r0,r5,#24
00037c  0e00              LSRS     r0,r0,#24
00037e  2200              MOVS     r2,#0
000380  2101              MOVS     r1,#1
000382  f7fffffe          BL       DMA_SetDestBufferMode
;;;662    
;;;663        // Set DMA channel config
;;;664        DMA_SetConfiguration(channel_index, AT91C_HDMA_SRC_PER_0 \
000386  0628              LSLS     r0,r5,#24
000388  0e00              LSRS     r0,r0,#24
00038a  493e              LDR      r1,|L1.1156|
00038c  f7fffffe          BL       DMA_SetConfiguration
;;;665                                            | AT91C_HDMA_DST_PER_0 \
;;;666                                            | AT91C_HDMA_SRC_H2SEL_HW \
;;;667                                            | AT91C_HDMA_DST_H2SEL_HW \
;;;668                                            | AT91C_HDMA_SOD_DISABLE \
;;;669                                            | AT91C_HDMA_FIFOCFG_ENOUGHSPACE);
;;;670    
;;;671        //scSize = (perChunkSize == 4) ? AT91C_HDMA_SCSIZE_4 : AT91C_HDMA_SCSIZE_1;
;;;672        //dcSize = (memChunkSize == 4) ? AT91C_HDMA_DCSIZE_4 : AT91C_HDMA_DCSIZE_1;
;;;673        scSize = AT91C_HDMA_SCSIZE_1; dcSize = AT91C_HDMA_DCSIZE_4;
000390  2000              MOVS     r0,#0
000392  9009              STR      r0,[sp,#0x24]
000394  483c              LDR      r0,|L1.1160|
000396  9008              STR      r0,[sp,#0x20]
;;;674    
;;;675        // Set link list
;;;676        buffSize *= addrInc;    // convert size to byte count
000398  9805              LDR      r0,[sp,#0x14]
00039a  4346              MULS     r6,r0,r6
;;;677        while(destAddress < ((U32)(dest_addr + buffSize))) {
00039c  e077              B        |L1.1166|
                  |L1.926|
;;;678            if(((U32)(dest_addr + buffSize)) - destAddress <= (DMA_XFR_SIZE*addrInc) )
00039e  19b8              ADDS     r0,r7,r6
0003a0  1b01              SUBS     r1,r0,r4
0003a2  220f              MOVS     r2,#0xf
0003a4  0212              LSLS     r2,r2,#8
0003a6  9805              LDR      r0,[sp,#0x14]
0003a8  4350              MULS     r0,r2,r0
0003aa  4281              CMP      r1,r0
0003ac  d81d              BHI      |L1.1002|
;;;679            {
;;;680                AT91F_Prepare_Multiple_Transfer(channel_index, LLI_rownumber, LAST_ROW,
0003ae  19b9              ADDS     r1,r7,r6
0003b0  1b08              SUBS     r0,r1,r4
0003b2  9905              LDR      r1,[sp,#0x14]
0003b4  f7fffffe          BL       __aeabi_uidivmod
0003b8  9906              LDR      r1,[sp,#0x18]
0003ba  4308              ORRS     r0,r0,r1
0003bc  9907              LDR      r1,[sp,#0x1c]
0003be  4308              ORRS     r0,r0,r1
0003c0  9909              LDR      r1,[sp,#0x24]
0003c2  4308              ORRS     r0,r0,r1
0003c4  9908              LDR      r1,[sp,#0x20]
0003c6  4308              ORRS     r0,r0,r1
0003c8  9004              STR      r0,[sp,#0x10]
0003ca  2141              MOVS     r1,#0x41
0003cc  0409              LSLS     r1,r1,#16
0003ce  980a              LDR      r0,[sp,#0x28]
0003d0  4308              ORRS     r0,r0,r1
0003d2  9904              LDR      r1,[sp,#0x10]
0003d4  9400              STR      r4,[sp,#0]
0003d6  9101              STR      r1,[sp,#4]
0003d8  9002              STR      r0,[sp,#8]
0003da  22ff              MOVS     r2,#0xff
0003dc  3201              ADDS     r2,#1
0003de  0028              MOVS     r0,r5
0003e0  9b0c              LDR      r3,[sp,#0x30]
0003e2  990b              LDR      r1,[sp,#0x2c]
0003e4  f7fffffe          BL       AT91F_Prepare_Multiple_Transfer
0003e8  e016              B        |L1.1048|
                  |L1.1002|
;;;681                                            srcAddress,
;;;682                                            destAddress,
;;;683                                            (((((U32)(dest_addr + buffSize))
;;;684                                                   - destAddress)/addrInc)
;;;685                                                    | perWidth
;;;686                                                    | mWidth
;;;687                                                    | scSize
;;;688                                                    | dcSize
;;;689                                                        ),
;;;690                                            ( AT91C_HDMA_DST_DSCR_FETCH_FROM_MEM
;;;691                                               | AT91C_HDMA_DST_ADDRESS_MODE_INCR
;;;692                                               | AT91C_HDMA_SRC_DSCR_FETCH_DISABLE
;;;693                                               | srcAddressMode
;;;694                                               | AT91C_HDMA_FC_PER2MEM));
;;;695            }
;;;696            else
;;;697            {
;;;698                AT91F_Prepare_Multiple_Transfer(channel_index, LLI_rownumber, 0,
0003ea  2141              MOVS     r1,#0x41
0003ec  0409              LSLS     r1,r1,#16
0003ee  980a              LDR      r0,[sp,#0x28]
0003f0  4301              ORRS     r1,r1,r0
0003f2  220f              MOVS     r2,#0xf
0003f4  0212              LSLS     r2,r2,#8
0003f6  9806              LDR      r0,[sp,#0x18]
0003f8  4310              ORRS     r0,r0,r2
0003fa  9a07              LDR      r2,[sp,#0x1c]
0003fc  4310              ORRS     r0,r0,r2
0003fe  9a09              LDR      r2,[sp,#0x24]
000400  4310              ORRS     r0,r0,r2
000402  9a08              LDR      r2,[sp,#0x20]
000404  4310              ORRS     r0,r0,r2
000406  9400              STR      r4,[sp,#0]
000408  9102              STR      r1,[sp,#8]
00040a  9001              STR      r0,[sp,#4]
00040c  2200              MOVS     r2,#0
00040e  0028              MOVS     r0,r5
000410  9b0c              LDR      r3,[sp,#0x30]
000412  990b              LDR      r1,[sp,#0x2c]
000414  f7fffffe          BL       AT91F_Prepare_Multiple_Transfer
                  |L1.1048|
;;;699                                            srcAddress,
;;;700                                            destAddress,
;;;701                                            ( (DMA_XFR_SIZE)
;;;702                                                | perWidth
;;;703                                                | mWidth
;;;704                                                | scSize
;;;705                                                | dcSize
;;;706                                                    ),
;;;707                                            (  AT91C_HDMA_DST_DSCR_FETCH_FROM_MEM
;;;708                                                | AT91C_HDMA_DST_ADDRESS_MODE_INCR
;;;709                                                | AT91C_HDMA_SRC_DSCR_FETCH_DISABLE
;;;710                                                | srcAddressMode
;;;711                                                | AT91C_HDMA_FC_PER2MEM));
;;;712    
;;;713            }
;;;714    
;;;715            destAddress += DMA_XFR_SIZE*addrInc;
000418  210f              MOVS     r1,#0xf
00041a  0209              LSLS     r1,r1,#8
00041c  9805              LDR      r0,[sp,#0x14]
00041e  4348              MULS     r0,r1,r0
000420  1904              ADDS     r4,r0,r4
;;;716    
;;;717            LLI_rownumber++;
000422  980b              LDR      r0,[sp,#0x2c]
000424  1c40              ADDS     r0,r0,#1
000426  e031              B        |L1.1164|
                  |L1.1064|
                          DCD      0x0000c350
                  |L1.1068|
                          DCD      0x000007a5
                  |L1.1072|
                          DCD      LLI_MCI
                  |L1.1076|
                          DCD      dmaLastLliNdx
                  |L1.1080|
                          DCD      0x20000000
                  |L1.1084|
00043c  5b313b31          DCB      "[1;1;33m!: ",0
000440  3b33336d
000444  213a2000
                  |L1.1096|
000448  5b6d00            DCB      "[m",0
00044b  00                DCB      0
                  |L1.1100|
00044c  53442044          DCB      "SD DMA, size too big %d\n\r",0
000450  4d412c20
000454  73697a65
000458  20746f6f
00045c  20626967
000460  2025640a
000464  0d00    
000466  00                DCB      0
000467  00                DCB      0
                  |L1.1128|
000468  0a0d00            DCB      "\n\r",0
00046b  00                DCB      0
                  |L1.1132|
                          DCD      0x02000000
                  |L1.1136|
                          DCD      0x00010000
                  |L1.1140|
000474  444d4143          DCB      "DMACH_MCI_M2P()",0
000478  485f4d43
00047c  495f4d32
000480  50282900
                  |L1.1156|
                          DCD      0x20002200
                  |L1.1160|
                          DCD      0x00100000
                  |L1.1164|
00048c  900b              STR      r0,[sp,#0x2c]
                  |L1.1166|
00048e  19b8              ADDS     r0,r7,r6              ;677
000490  42a0              CMP      r0,r4                 ;677
000492  d884              BHI      |L1.926|
;;;718        }
;;;719    
;;;720    	TRACE_WRN("DMACH_MCI_P2M()");
000494  201b              MOVS     r0,#0x1b
000496  f7fffffe          BL       ShellPutByte
00049a  48fe              LDR      r0,|L1.2196|
00049c  f7fffffe          BL       ShellPrintf
0004a0  201b              MOVS     r0,#0x1b
0004a2  f7fffffe          BL       ShellPutByte
0004a6  a0fc              ADR      r0,|L1.2200|
0004a8  f7fffffe          BL       ShellPrintf
0004ac  a0fb              ADR      r0,|L1.2204|
0004ae  f7fffffe          BL       ShellPrintf
0004b2  a0fe              ADR      r0,|L1.2220|
0004b4  f7fffffe          BL       ShellPrintf
;;;721    
;;;722        return 0;
0004b8  2000              MOVS     r0,#0
;;;723    }
0004ba  b011              ADD      sp,sp,#0x44
0004bc  bdf0              POP      {r4-r7,pc}
;;;724    
                          ENDP

                  MCI_SendCommand PROC
;;;90     U8 
;;;91     MCI_SendCommand(Mci *pMci, MciCmd *pCommand)
0004be  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;92     {
0004c0  b087              SUB      sp,sp,#0x1c
0004c2  000c              MOVS     r4,r1
;;;93     	U8 ch = pMci-> mciChan;
0004c4  9807              LDR      r0,[sp,#0x1c]
0004c6  7805              LDRB     r5,[r0,#0]
;;;94     	U32 mciIer, mciMr;
;;;95     	U32 transSize = 0x7100F0BC;
0004c8  4ef9              LDR      r6,|L1.2224|
;;;96     	U32 mciBlkr = 0x7100F014;
0004ca  48fa              LDR      r0,|L1.2228|
0004cc  9005              STR      r0,[sp,#0x14]
;;;97     	U32 mciDma = 0x7100F014;
0004ce  9004              STR      r0,[sp,#0x10]
;;;98     
;;;99     	// Try to acquire the MCI semaphore
;;;100    	if (pMci->semaphore == 0) return MCI_ERROR_LOCK;
0004d0  9807              LDR      r0,[sp,#0x1c]
0004d2  7a80              LDRB     r0,[r0,#0xa]
0004d4  2800              CMP      r0,#0
0004d6  d102              BNE      |L1.1246|
0004d8  2001              MOVS     r0,#1
                  |L1.1242|
;;;101    	pMci->semaphore--;
;;;102    
;;;103    	// Command is now being executed
;;;104    	pMci->pCommand = pCommand;
;;;105    	pCommand->status = MCI_STATUS_PENDING;
;;;106    
;;;107    	// Enable the MCI peripheral clock
;;;108    	if(ch == 0) PMC_PeriEn(PERIF_ID_MCI0);
;;;109    	else PMC_PeriEn(PERIF_ID_MCI1);
;;;110    
;;;111    	// Set Default Mode register value
;;;112    	mciMr = rHSMCI_MR(ch) & (~(HSMCI_WRPROOF|HSMCI_RDPROOF|HSMCI_BLKLEN));
;;;113    	
;;;114    	//TRACE_MSG("mciDma: 0x%08X", mciDma);
;;;115    	//TRACE_MSG("transSize: 0x%08X", transSize);
;;;116    	
;;;117    	// Command with DATA stage
;;;118    	if (pCommand->blockSize && pCommand->nbBlock)
;;;119    	{
;;;120    		// Enable dma		
;;;121    		mciDma = rHSMCI_DMA(ch) | HSMCI_DMAEN_ENABLE;
;;;122    		rHSMCI_DMA(ch) = mciDma;
;;;123    		transSize = (pCommand->nbBlock * pCommand->blockSize);
;;;124    		
;;;125    		//TRACE_MSG("data mciDma: 0x%08X", mciDma);
;;;126    		//TRACE_MSG("data transSize: 0x%08X", transSize);
;;;127    		
;;;128    		if (pCommand->isRead)
;;;129    		{
;;;130    			if (transSize > MCI_FIFO_SIZE)
;;;131    			{
;;;132    				xfredBlocks = MCI_FIFO_SIZE/pCommand->blockSize;
;;;133    				transSize = MCI_FIFO_SIZE;
;;;134    			}
;;;135    			else
;;;136    			{
;;;137    				xfredBlocks = pCommand->nbBlock;
;;;138    			}
;;;139    		}
;;;140    		else
;;;141    		{
;;;142    			xfredBlocks = pCommand->nbBlock;
;;;143    		}
;;;144    
;;;145    		if ((pCommand->blockSize & 0x3) != 0)
;;;146    		{
;;;147    			// Force byte, DataReg & DMA should be BYTE based
;;;148    			mciMr |= HSMCI_PDCFBYTE;
;;;149    		}
;;;150     		else transSize = toWCOUNT(transSize);
;;;151    
;;;152    		// New transfer
;;;153    		if(pCommand->tranType == MCI_NEW_TRANSFER)
;;;154    		{
;;;155    			// Set block size
;;;156    			rHSMCI_MR(ch) = mciMr | HSMCI_RDPROOF | HSMCI_WRPROOF |(pCommand->blockSize << 16);
;;;157    			mciBlkr = rHSMCI_BLKR(ch) & (~(U32)HSMCI_BCNT);
;;;158    			rHSMCI_BLKR(ch) = mciBlkr | (transSize/pCommand->blockSize);
;;;159    		}
;;;160    
;;;161    		// DATA transfer from card to host
;;;162    		if (pCommand->isRead)
;;;163    		{
;;;164    			DMACH_MCI_P2M(SDMMC_DMA_CHANNEL, HSMCI_FIFO(ch), (U8*) pCommand->pData, transSize, 0, (mciMr & HSMCI_PDCFBYTE) > 0);
;;;165    			DMACH_EnableIt(ch, SDMMC_DMA_CHANNEL);
;;;166    			DMA_EnableChannel(0);
;;;167    			mciIer = HSMCI_DMADONE | STATUS_ERRORS;
;;;168    		}
;;;169    		// DATA transfer from host to card
;;;170    		else
;;;171    		{
;;;172    			if ((mciMr & HSMCI_PDCFBYTE) > 0) DMACH_MCI_M2P(SDMMC_DMA_CHANNEL, (U8*) pCommand->pData, HSMCI_FIFO(ch), toWCOUNT(transSize), 0, 0); // Still using WORD mode to write FIFO
;;;173    			else DMACH_MCI_M2P(SDMMC_DMA_CHANNEL, (U8*) pCommand->pData, HSMCI_FIFO(ch), transSize, 0, 0);
;;;174    			DMACH_EnableIt(ch, SDMMC_DMA_CHANNEL);
;;;175    			DMA_EnableChannel(SDMMC_DMA_CHANNEL);
;;;176    			mciIer = HSMCI_DMADONE | STATUS_ERRORS;
;;;177    		}
;;;178    	}
;;;179    	// Start an infinite block transfer (but no data in current command)
;;;180    	else if (pCommand->dataTran)
;;;181    	{
;;;182    		// Set block size
;;;183    		rHSMCI_MR(ch) = mciMr | HSMCI_RDPROOF | HSMCI_WRPROOF |(pCommand->blockSize << 16);
;;;184    		// Set data length: 0
;;;185    		mciBlkr = rHSMCI_BLKR(ch) & (~(U32)HSMCI_BCNT);
;;;186    		rHSMCI_BLKR(ch) = mciBlkr;
;;;187    		mciIer = HSMCI_CMDRDY | STATUS_ERRORS;
;;;188    		
;;;189    		//TRACE_MSG("dataTran mciIer: 0x%08X", mciIer);
;;;190    		//TRACE_MSG("dataTran mciBlkr: 0x%08X", mciBlkr);
;;;191    	}
;;;192    	// No data transfer: stop at the end of the command
;;;193    	else
;;;194    	{
;;;195    		rHSMCI_MR(ch) = mciMr;
;;;196    		mciIer = HSMCI_CMDRDY | STATUS_ERRORS;
;;;197    		//TRACE_MSG("else mciMr: 0x%08X", mciMr);
;;;198    	}
;;;199    
;;;200    	// Enable MCI
;;;201    	rHSMCI_CR(ch) = HSMCI_MCIEN;
;;;202    
;;;203    
;;;204    	// Send the command
;;;205    	if((pCommand->tranType != MCI_CONTINUE_TRANSFER) || (pCommand->blockSize == 0))
;;;206    	{
;;;207    		rHSMCI_ARGR(ch) = pCommand->arg;
;;;208    		rHSMCI_CMDR(ch) = pCommand->cmd;
;;;209    		//TRACE_MSG("pCommand->cmd: 0x%08X", pCommand->cmd);
;;;210    		//TRACE_MSG("pCommand->cmd: 0x%08X", rHSMCI_CMDR(ch));
;;;211    	}
;;;212    
;;;213    	// Ignore CRC error for R3 & R4
;;;214    	if (pCommand->resType == 3 || pCommand->resType == 4) mciIer &= ~((U32)HSMCI_RCRCE);
;;;215    	
;;;216    	// Ignore errors for stop command :)
;;;217    	if (pCommand->tranType == MCI_STOP_TRANSFER) mciIer &= ~((U32)(HSMCI_DCRCE|HSMCI_BLKOVRE|HSMCI_DTOE|HSMCI_CSTOE));
;;;218    
;;;219    	// Ignore data error
;;;220    	mciIer &= ~( 0 | HSMCI_UNRE | HSMCI_OVRE | HSMCI_DTOE | HSMCI_DCRCE | HSMCI_BLKOVRE | HSMCI_CSTOE );
;;;221    
;;;222    	// Interrupt enable shall be done after PDC TXTEN and RXTEN
;;;223    	rHSMCI_IER(ch) = mciIer;
;;;224    
;;;225    	TRACE_WRN("MCI_SendCommand(): ch: 0x%08X, mciIer: 0x%08X, mciMr: 0x%08X, transSize: 0x%08X, mciBlkr: 0x%08X, mciDma: 0x%08X", ch, mciIer, mciMr, transSize, mciBlkr, mciDma);
;;;226    
;;;227    	
;;;228    	return 0;
;;;229    }
0004da  b009              ADD      sp,sp,#0x24
0004dc  bdf0              POP      {r4-r7,pc}
                  |L1.1246|
0004de  9807              LDR      r0,[sp,#0x1c]         ;101
0004e0  7a80              LDRB     r0,[r0,#0xa]          ;101
0004e2  1e40              SUBS     r0,r0,#1              ;101
0004e4  0601              LSLS     r1,r0,#24             ;101
0004e6  0e09              LSRS     r1,r1,#24             ;101
0004e8  9807              LDR      r0,[sp,#0x1c]         ;101
0004ea  7281              STRB     r1,[r0,#0xa]          ;101
0004ec  9807              LDR      r0,[sp,#0x1c]         ;104
0004ee  6044              STR      r4,[r0,#4]            ;104
0004f0  2001              MOVS     r0,#1                 ;105
0004f2  6220              STR      r0,[r4,#0x20]         ;105
0004f4  2d00              CMP      r5,#0                 ;108
0004f6  d103              BNE      |L1.1280|
0004f8  200b              MOVS     r0,#0xb               ;108
0004fa  f7fffffe          BL       PMC_PeriEn
0004fe  e002              B        |L1.1286|
                  |L1.1280|
000500  201d              MOVS     r0,#0x1d              ;109
000502  f7fffffe          BL       PMC_PeriEn
                  |L1.1286|
000506  48ec              LDR      r0,|L1.2232|
000508  4368              MULS     r0,r5,r0              ;112
00050a  2101              MOVS     r1,#1                 ;112
00050c  04c9              LSLS     r1,r1,#19             ;112
00050e  1a40              SUBS     r0,r0,r1              ;112
000510  6840              LDR      r0,[r0,#4]            ;112
000512  49ea              LDR      r1,|L1.2236|
000514  4008              ANDS     r0,r0,r1              ;112
000516  9006              STR      r0,[sp,#0x18]         ;112
000518  89a0              LDRH     r0,[r4,#0xc]          ;118
00051a  2800              CMP      r0,#0                 ;118
                  |L1.1308|
00051c  d07d              BEQ      |L1.1562|
00051e  89e0              LDRH     r0,[r4,#0xe]          ;118
000520  2800              CMP      r0,#0                 ;118
000522  d0fb              BEQ      |L1.1308|
000524  48e4              LDR      r0,|L1.2232|
000526  4368              MULS     r0,r5,r0              ;121
000528  2101              MOVS     r1,#1                 ;121
00052a  04c9              LSLS     r1,r1,#19             ;121
00052c  1a40              SUBS     r0,r0,r1              ;121
00052e  6d00              LDR      r0,[r0,#0x50]         ;121
000530  12c9              ASRS     r1,r1,#11             ;121
000532  4308              ORRS     r0,r0,r1              ;121
000534  9004              STR      r0,[sp,#0x10]         ;121
000536  49e0              LDR      r1,|L1.2232|
000538  4369              MULS     r1,r5,r1              ;122
00053a  2201              MOVS     r2,#1                 ;122
00053c  04d2              LSLS     r2,r2,#19             ;122
00053e  1a89              SUBS     r1,r1,r2              ;122
000540  9804              LDR      r0,[sp,#0x10]         ;122
000542  6508              STR      r0,[r1,#0x50]         ;122
000544  89e6              LDRH     r6,[r4,#0xe]          ;123
000546  89a1              LDRH     r1,[r4,#0xc]          ;123
000548  434e              MULS     r6,r1,r6              ;123
00054a  7fe0              LDRB     r0,[r4,#0x1f]         ;128
00054c  2800              CMP      r0,#0                 ;128
00054e  d00f              BEQ      |L1.1392|
000550  200f              MOVS     r0,#0xf               ;130
000552  0280              LSLS     r0,r0,#10             ;130
000554  4286              CMP      r6,r0                 ;130
000556  d907              BLS      |L1.1384|
000558  89a1              LDRH     r1,[r4,#0xc]          ;132
00055a  f7fffffe          BL       __aeabi_idivmod
00055e  49d8              LDR      r1,|L1.2240|
000560  8008              STRH     r0,[r1,#0]            ;132
000562  260f              MOVS     r6,#0xf               ;133
000564  02b6              LSLS     r6,r6,#10             ;133
000566  e006              B        |L1.1398|
                  |L1.1384|
000568  89e0              LDRH     r0,[r4,#0xe]          ;137
00056a  49d5              LDR      r1,|L1.2240|
00056c  8008              STRH     r0,[r1,#0]            ;137
00056e  e002              B        |L1.1398|
                  |L1.1392|
000570  89e0              LDRH     r0,[r4,#0xe]          ;142
000572  49d3              LDR      r1,|L1.2240|
000574  8008              STRH     r0,[r1,#0]            ;142
                  |L1.1398|
000576  89a0              LDRH     r0,[r4,#0xc]          ;145
000578  0780              LSLS     r0,r0,#30             ;145
00057a  0f80              LSRS     r0,r0,#30             ;145
00057c  d005              BEQ      |L1.1418|
00057e  2101              MOVS     r1,#1                 ;148
000580  0349              LSLS     r1,r1,#13             ;148
000582  9806              LDR      r0,[sp,#0x18]         ;148
000584  4308              ORRS     r0,r0,r1              ;148
000586  9006              STR      r0,[sp,#0x18]         ;148
000588  e007              B        |L1.1434|
                  |L1.1418|
00058a  07b0              LSLS     r0,r6,#30             ;150
00058c  0f80              LSRS     r0,r0,#30             ;150
00058e  d002              BEQ      |L1.1430|
000590  08b0              LSRS     r0,r6,#2              ;150
000592  1c40              ADDS     r0,r0,#1              ;150
000594  e000              B        |L1.1432|
                  |L1.1430|
000596  08b0              LSRS     r0,r6,#2              ;150
                  |L1.1432|
000598  0006              MOVS     r6,r0                 ;150
                  |L1.1434|
00059a  7fa0              LDRB     r0,[r4,#0x1e]         ;153
00059c  2800              CMP      r0,#0                 ;153
00059e  d120              BNE      |L1.1506|
0005a0  2103              MOVS     r1,#3                 ;156
0005a2  02c9              LSLS     r1,r1,#11             ;156
0005a4  9806              LDR      r0,[sp,#0x18]         ;156
0005a6  4308              ORRS     r0,r0,r1              ;156
0005a8  89a1              LDRH     r1,[r4,#0xc]          ;156
0005aa  0409              LSLS     r1,r1,#16             ;156
0005ac  4308              ORRS     r0,r0,r1              ;156
0005ae  49c2              LDR      r1,|L1.2232|
0005b0  4369              MULS     r1,r5,r1              ;156
0005b2  2201              MOVS     r2,#1                 ;156
0005b4  04d2              LSLS     r2,r2,#19             ;156
0005b6  1a89              SUBS     r1,r1,r2              ;156
0005b8  6048              STR      r0,[r1,#4]            ;156
0005ba  48bf              LDR      r0,|L1.2232|
0005bc  4368              MULS     r0,r5,r0              ;157
0005be  0011              MOVS     r1,r2                 ;157
0005c0  1a40              SUBS     r0,r0,r1              ;157
0005c2  6980              LDR      r0,[r0,#0x18]         ;157
0005c4  0c01              LSRS     r1,r0,#16             ;157
0005c6  0409              LSLS     r1,r1,#16             ;157
0005c8  9105              STR      r1,[sp,#0x14]         ;157
0005ca  89a1              LDRH     r1,[r4,#0xc]          ;158
0005cc  0030              MOVS     r0,r6                 ;158
0005ce  f7fffffe          BL       __aeabi_uidivmod
0005d2  9905              LDR      r1,[sp,#0x14]         ;158
0005d4  4308              ORRS     r0,r0,r1              ;158
0005d6  49b8              LDR      r1,|L1.2232|
0005d8  4369              MULS     r1,r5,r1              ;158
0005da  2201              MOVS     r2,#1                 ;158
0005dc  04d2              LSLS     r2,r2,#19             ;158
0005de  1a89              SUBS     r1,r1,r2              ;158
0005e0  6188              STR      r0,[r1,#0x18]         ;158
                  |L1.1506|
0005e2  7fe0              LDRB     r0,[r4,#0x1f]         ;162
0005e4  2800              CMP      r0,#0                 ;162
0005e6  d020              BEQ      |L1.1578|
0005e8  2101              MOVS     r1,#1                 ;164
0005ea  0349              LSLS     r1,r1,#13             ;164
0005ec  9806              LDR      r0,[sp,#0x18]         ;164
0005ee  4008              ANDS     r0,r0,r1              ;164
0005f0  0b40              LSRS     r0,r0,#13             ;164
0005f2  2100              MOVS     r1,#0                 ;164
0005f4  9100              STR      r1,[sp,#0]            ;164
0005f6  9001              STR      r0,[sp,#4]            ;164
0005f8  48af              LDR      r0,|L1.2232|
0005fa  4368              MULS     r0,r5,r0              ;164
0005fc  2101              MOVS     r1,#1                 ;164
0005fe  04c9              LSLS     r1,r1,#19             ;164
000600  1a40              SUBS     r0,r0,r1              ;164
000602  1dc1              ADDS     r1,r0,#7              ;164
000604  31ff              ADDS     r1,r1,#0xff           ;164
000606  31fa              ADDS     r1,r1,#0xfa           ;164
000608  68a2              LDR      r2,[r4,#8]            ;164
00060a  0033              MOVS     r3,r6                 ;164
00060c  2000              MOVS     r0,#0                 ;164
00060e  9103              STR      r1,[sp,#0xc]          ;164
000610  f7fffffe          BL       DMACH_MCI_P2M
000614  2100              MOVS     r1,#0                 ;165
000616  0028              MOVS     r0,r5                 ;165
000618  e000              B        |L1.1564|
                  |L1.1562|
00061a  e03e              B        |L1.1690|
                  |L1.1564|
00061c  f7fffffe          BL       DMACH_EnableIt
000620  2000              MOVS     r0,#0                 ;166
000622  f7fffffe          BL       DMA_EnableChannel
000626  4fa7              LDR      r7,|L1.2244|
000628  e05e              B        |L1.1768|
                  |L1.1578|
00062a  2101              MOVS     r1,#1                 ;172
00062c  0349              LSLS     r1,r1,#13             ;172
00062e  9806              LDR      r0,[sp,#0x18]         ;172
000630  4208              TST      r0,r1                 ;172
000632  d018              BEQ      |L1.1638|
000634  2000              MOVS     r0,#0                 ;172
000636  9000              STR      r0,[sp,#0]            ;172
000638  9001              STR      r0,[sp,#4]            ;172
00063a  07b0              LSLS     r0,r6,#30             ;172
00063c  0f80              LSRS     r0,r0,#30             ;172
00063e  d002              BEQ      |L1.1606|
000640  08b0              LSRS     r0,r6,#2              ;172
000642  1c40              ADDS     r0,r0,#1              ;172
000644  e000              B        |L1.1608|
                  |L1.1606|
000646  08b0              LSRS     r0,r6,#2              ;172
                  |L1.1608|
000648  0003              MOVS     r3,r0                 ;172
00064a  489b              LDR      r0,|L1.2232|
00064c  4368              MULS     r0,r5,r0              ;172
00064e  2101              MOVS     r1,#1                 ;172
000650  04c9              LSLS     r1,r1,#19             ;172
000652  1a40              SUBS     r0,r0,r1              ;172
000654  1dc2              ADDS     r2,r0,#7              ;172
000656  32ff              ADDS     r2,r2,#0xff           ;172
000658  32fa              ADDS     r2,r2,#0xfa           ;172
00065a  68a1              LDR      r1,[r4,#8]            ;172
00065c  2000              MOVS     r0,#0                 ;172
00065e  9103              STR      r1,[sp,#0xc]          ;172
000660  f7fffffe          BL       DMACH_MCI_M2P
000664  e010              B        |L1.1672|
                  |L1.1638|
000666  2000              MOVS     r0,#0                 ;173
000668  9000              STR      r0,[sp,#0]            ;173
00066a  9001              STR      r0,[sp,#4]            ;173
00066c  4892              LDR      r0,|L1.2232|
00066e  4368              MULS     r0,r5,r0              ;173
000670  2101              MOVS     r1,#1                 ;173
000672  04c9              LSLS     r1,r1,#19             ;173
000674  1a40              SUBS     r0,r0,r1              ;173
000676  1dc2              ADDS     r2,r0,#7              ;173
000678  32ff              ADDS     r2,r2,#0xff           ;173
00067a  32fa              ADDS     r2,r2,#0xfa           ;173
00067c  68a1              LDR      r1,[r4,#8]            ;173
00067e  0033              MOVS     r3,r6                 ;173
000680  2000              MOVS     r0,#0                 ;173
000682  9103              STR      r1,[sp,#0xc]          ;173
000684  f7fffffe          BL       DMACH_MCI_M2P
                  |L1.1672|
000688  2100              MOVS     r1,#0                 ;174
00068a  0028              MOVS     r0,r5                 ;174
00068c  f7fffffe          BL       DMACH_EnableIt
000690  2000              MOVS     r0,#0                 ;175
000692  f7fffffe          BL       DMA_EnableChannel
000696  4f8b              LDR      r7,|L1.2244|
000698  e026              B        |L1.1768|
                  |L1.1690|
00069a  7f60              LDRB     r0,[r4,#0x1d]         ;180
00069c  2800              CMP      r0,#0                 ;180
00069e  d01b              BEQ      |L1.1752|
0006a0  2103              MOVS     r1,#3                 ;183
0006a2  02c9              LSLS     r1,r1,#11             ;183
0006a4  9806              LDR      r0,[sp,#0x18]         ;183
0006a6  4308              ORRS     r0,r0,r1              ;183
0006a8  89a1              LDRH     r1,[r4,#0xc]          ;183
0006aa  0409              LSLS     r1,r1,#16             ;183
0006ac  4308              ORRS     r0,r0,r1              ;183
0006ae  4982              LDR      r1,|L1.2232|
0006b0  4369              MULS     r1,r5,r1              ;183
0006b2  2201              MOVS     r2,#1                 ;183
0006b4  04d2              LSLS     r2,r2,#19             ;183
0006b6  1a89              SUBS     r1,r1,r2              ;183
0006b8  6048              STR      r0,[r1,#4]            ;183
0006ba  487f              LDR      r0,|L1.2232|
0006bc  4368              MULS     r0,r5,r0              ;185
0006be  0011              MOVS     r1,r2                 ;185
0006c0  1a40              SUBS     r0,r0,r1              ;185
0006c2  6980              LDR      r0,[r0,#0x18]         ;185
0006c4  0c00              LSRS     r0,r0,#16             ;185
0006c6  0400              LSLS     r0,r0,#16             ;185
0006c8  9005              STR      r0,[sp,#0x14]         ;185
0006ca  497b              LDR      r1,|L1.2232|
0006cc  4369              MULS     r1,r5,r1              ;186
0006ce  1a89              SUBS     r1,r1,r2              ;186
0006d0  9805              LDR      r0,[sp,#0x14]         ;186
0006d2  6188              STR      r0,[r1,#0x18]         ;186
0006d4  4f7c              LDR      r7,|L1.2248|
0006d6  e007              B        |L1.1768|
                  |L1.1752|
0006d8  4977              LDR      r1,|L1.2232|
0006da  4369              MULS     r1,r5,r1              ;195
0006dc  2201              MOVS     r2,#1                 ;195
0006de  04d2              LSLS     r2,r2,#19             ;195
0006e0  1a89              SUBS     r1,r1,r2              ;195
0006e2  9806              LDR      r0,[sp,#0x18]         ;195
0006e4  6048              STR      r0,[r1,#4]            ;195
0006e6  4f78              LDR      r7,|L1.2248|
                  |L1.1768|
0006e8  2101              MOVS     r1,#1                 ;201
0006ea  4873              LDR      r0,|L1.2232|
0006ec  4368              MULS     r0,r5,r0              ;201
0006ee  04ca              LSLS     r2,r1,#19             ;201
0006f0  1a80              SUBS     r0,r0,r2              ;201
0006f2  6001              STR      r1,[r0,#0]            ;201
0006f4  7fa0              LDRB     r0,[r4,#0x1e]         ;205
0006f6  2801              CMP      r0,#1                 ;205
0006f8  d102              BNE      |L1.1792|
0006fa  89a0              LDRH     r0,[r4,#0xc]          ;205
0006fc  2800              CMP      r0,#0                 ;205
0006fe  d10b              BNE      |L1.1816|
                  |L1.1792|
000700  486d              LDR      r0,|L1.2232|
000702  4368              MULS     r0,r5,r0              ;207
000704  2201              MOVS     r2,#1                 ;207
000706  04d2              LSLS     r2,r2,#19             ;207
000708  1a80              SUBS     r0,r0,r2              ;207
00070a  6861              LDR      r1,[r4,#4]            ;207
00070c  6101              STR      r1,[r0,#0x10]         ;207
00070e  486a              LDR      r0,|L1.2232|
000710  4368              MULS     r0,r5,r0              ;208
000712  1a80              SUBS     r0,r0,r2              ;208
000714  6821              LDR      r1,[r4,#0]            ;208
000716  6141              STR      r1,[r0,#0x14]         ;208
                  |L1.1816|
000718  7f20              LDRB     r0,[r4,#0x1c]         ;214
00071a  2803              CMP      r0,#3                 ;214
00071c  d002              BEQ      |L1.1828|
00071e  7f20              LDRB     r0,[r4,#0x1c]         ;214
000720  2804              CMP      r0,#4                 ;214
000722  d104              BNE      |L1.1838|
                  |L1.1828|
000724  2101              MOVS     r1,#1                 ;214
000726  0489              LSLS     r1,r1,#18             ;214
000728  0038              MOVS     r0,r7                 ;214
00072a  4388              BICS     r0,r0,r1              ;214
00072c  0007              MOVS     r7,r0                 ;214
                  |L1.1838|
00072e  7fa0              LDRB     r0,[r4,#0x1e]         ;217
000730  2802              CMP      r0,#2                 ;217
000732  d104              BNE      |L1.1854|
000734  210f              MOVS     r1,#0xf               ;217
000736  0549              LSLS     r1,r1,#21             ;217
000738  0038              MOVS     r0,r7                 ;217
00073a  4388              BICS     r0,r0,r1              ;217
00073c  0007              MOVS     r7,r0                 ;217
                  |L1.1854|
00073e  4863              LDR      r0,|L1.2252|
000740  4007              ANDS     r7,r7,r0              ;220
000742  485d              LDR      r0,|L1.2232|
000744  4368              MULS     r0,r5,r0              ;223
000746  2101              MOVS     r1,#1                 ;223
000748  04c9              LSLS     r1,r1,#19             ;223
00074a  1a40              SUBS     r0,r0,r1              ;223
00074c  6447              STR      r7,[r0,#0x44]         ;223
00074e  201b              MOVS     r0,#0x1b              ;225
000750  f7fffffe          BL       ShellPutByte
000754  484f              LDR      r0,|L1.2196|
000756  f7fffffe          BL       ShellPrintf
00075a  201b              MOVS     r0,#0x1b              ;225
00075c  f7fffffe          BL       ShellPutByte
000760  a04d              ADR      r0,|L1.2200|
000762  f7fffffe          BL       ShellPrintf
000766  9905              LDR      r1,[sp,#0x14]         ;225
000768  9804              LDR      r0,[sp,#0x10]         ;225
00076a  9600              STR      r6,[sp,#0]            ;225
00076c  9101              STR      r1,[sp,#4]            ;225
00076e  9002              STR      r0,[sp,#8]            ;225
000770  003a              MOVS     r2,r7                 ;225
000772  0029              MOVS     r1,r5                 ;225
000774  4856              LDR      r0,|L1.2256|
000776  9b06              LDR      r3,[sp,#0x18]         ;225
000778  f7fffffe          BL       ShellPrintf
00077c  a04b              ADR      r0,|L1.2220|
00077e  f7fffffe          BL       ShellPrintf
000782  2000              MOVS     r0,#0                 ;228
000784  e6a9              B        |L1.1242|
;;;230    
                          ENDP

                  MCI_Reset PROC
;;;564    
;;;565    void MCI_Reset(U8 ch, U32 keepSettings)
000786  b5fe              PUSH     {r1-r7,lr}
;;;566    {
;;;567        if (keepSettings) {
000788  2900              CMP      r1,#0
00078a  d044              BEQ      |L1.2070|
;;;568    
;;;569            U32 mciMr, mciSdcr, mciDtor, mciCstor;
;;;570            U32 mciDma, mciCfg;
;;;571    
;;;572            mciMr    = rHSMCI_MR(ch);
00078c  4d4a              LDR      r5,|L1.2232|
00078e  4345              MULS     r5,r0,r5
000790  2601              MOVS     r6,#1
000792  04f6              LSLS     r6,r6,#19
000794  1bad              SUBS     r5,r5,r6
000796  686a              LDR      r2,[r5,#4]
;;;573            mciSdcr  = rHSMCI_SDCR(ch);
000798  4d47              LDR      r5,|L1.2232|
00079a  4345              MULS     r5,r0,r5
00079c  1bad              SUBS     r5,r5,r6
00079e  68eb              LDR      r3,[r5,#0xc]
;;;574            mciDtor  = rHSMCI_DTOR(ch);
0007a0  4d45              LDR      r5,|L1.2232|
0007a2  4345              MULS     r5,r0,r5
0007a4  1bad              SUBS     r5,r5,r6
0007a6  68ac              LDR      r4,[r5,#8]
;;;575            mciCstor = rHSMCI_CSTOR(ch);
0007a8  4d43              LDR      r5,|L1.2232|
0007aa  4345              MULS     r5,r0,r5
0007ac  1bad              SUBS     r5,r5,r6
0007ae  69ed              LDR      r5,[r5,#0x1c]
0007b0  9502              STR      r5,[sp,#8]
;;;576    
;;;577            mciDma = rHSMCI_DMA(ch);
0007b2  4d41              LDR      r5,|L1.2232|
0007b4  4345              MULS     r5,r0,r5
0007b6  1bad              SUBS     r5,r5,r6
0007b8  6d2d              LDR      r5,[r5,#0x50]
0007ba  9501              STR      r5,[sp,#4]
;;;578            mciCfg = rHSMCI_CFG(ch);
0007bc  4d3e              LDR      r5,|L1.2232|
0007be  4345              MULS     r5,r0,r5
0007c0  1bad              SUBS     r5,r5,r6
0007c2  6d6d              LDR      r5,[r5,#0x54]
0007c4  9500              STR      r5,[sp,#0]
;;;579    		
;;;580    		rHSMCI_CR(ch)		= HSMCI_SWRST;
0007c6  2680              MOVS     r6,#0x80
0007c8  4d3b              LDR      r5,|L1.2232|
0007ca  4345              MULS     r5,r0,r5
0007cc  0337              LSLS     r7,r6,#12
0007ce  1bed              SUBS     r5,r5,r7
0007d0  602e              STR      r6,[r5,#0]
;;;581    		rHSMCI_CR(ch)		= HSMCI_MCIDIS | HSMCI_PWSDIS;
0007d2  260a              MOVS     r6,#0xa
0007d4  4d38              LDR      r5,|L1.2232|
0007d6  4345              MULS     r5,r0,r5
0007d8  1bed              SUBS     r5,r5,r7
0007da  602e              STR      r6,[r5,#0]
;;;582    		rHSMCI_MR(ch)		= mciMr;
0007dc  4d36              LDR      r5,|L1.2232|
0007de  4345              MULS     r5,r0,r5
0007e0  003e              MOVS     r6,r7
0007e2  1bad              SUBS     r5,r5,r6
0007e4  606a              STR      r2,[r5,#4]
;;;583    		rHSMCI_SDCR(ch)		= mciSdcr;
0007e6  4d34              LDR      r5,|L1.2232|
0007e8  4345              MULS     r5,r0,r5
0007ea  1bad              SUBS     r5,r5,r6
0007ec  60eb              STR      r3,[r5,#0xc]
;;;584    		rHSMCI_DTOR(ch)		= mciDtor;
0007ee  4d32              LDR      r5,|L1.2232|
0007f0  4345              MULS     r5,r0,r5
0007f2  1bad              SUBS     r5,r5,r6
0007f4  60ac              STR      r4,[r5,#8]
;;;585    		rHSMCI_CSTOR(ch)	= mciCstor;
0007f6  4e30              LDR      r6,|L1.2232|
0007f8  4346              MULS     r6,r0,r6
0007fa  1bf6              SUBS     r6,r6,r7
0007fc  9d02              LDR      r5,[sp,#8]
0007fe  61f5              STR      r5,[r6,#0x1c]
;;;586    		
;;;587    		rHSMCI_DMA(ch)		= mciDma;
000800  4e2d              LDR      r6,|L1.2232|
000802  4346              MULS     r6,r0,r6
000804  1bf6              SUBS     r6,r6,r7
000806  9d01              LDR      r5,[sp,#4]
000808  6535              STR      r5,[r6,#0x50]
;;;588    		rHSMCI_CFG(ch)		= mciCfg;
00080a  4e2b              LDR      r6,|L1.2232|
00080c  4346              MULS     r6,r0,r6
00080e  1bf6              SUBS     r6,r6,r7
000810  9d00              LDR      r5,[sp,#0]
000812  6575              STR      r5,[r6,#0x54]
;;;589        }
000814  e00a              B        |L1.2092|
                  |L1.2070|
;;;590        else
;;;591    	{
;;;592    		rHSMCI_CR(ch)		= HSMCI_SWRST;
000816  2380              MOVS     r3,#0x80
000818  4a27              LDR      r2,|L1.2232|
00081a  4342              MULS     r2,r0,r2
00081c  031c              LSLS     r4,r3,#12
00081e  1b12              SUBS     r2,r2,r4
000820  6013              STR      r3,[r2,#0]
;;;593    		rHSMCI_CR(ch)		= HSMCI_MCIDIS | HSMCI_PWSDIS;
000822  230a              MOVS     r3,#0xa
000824  4a24              LDR      r2,|L1.2232|
000826  4342              MULS     r2,r0,r2
000828  1b12              SUBS     r2,r2,r4
00082a  6013              STR      r3,[r2,#0]
                  |L1.2092|
;;;594        }
;;;595    }
00082c  bdfe              POP      {r1-r7,pc}
;;;596    
                          ENDP

                  MCI_Handler PROC
;;;377    //------------------------------------------------------------------------------
;;;378    void MCI_Handler(Mci *pMci)
00082e  b5f1              PUSH     {r0,r4-r7,lr}
;;;379    {
000830  b088              SUB      sp,sp,#0x20
;;;380        U8 ch;
;;;381        MciCmd *pCommand = pMci->pCommand;
000832  9808              LDR      r0,[sp,#0x20]
000834  6844              LDR      r4,[r0,#4]
;;;382        volatile U32 status;
;;;383        U32 status0, mask;
;;;384        U8 i;
;;;385    
;;;386    	U32 transSize;
;;;387    	U8* p;
;;;388    
;;;389    	ch = pMci-> mciChan;
000836  9808              LDR      r0,[sp,#0x20]
000838  7805              LDRB     r5,[r0,#0]
;;;390    
;;;391        // Read the status register
;;;392        status0 = rHSMCI_SR(ch);
00083a  481f              LDR      r0,|L1.2232|
00083c  4368              MULS     r0,r5,r0
00083e  2101              MOVS     r1,#1
000840  04c9              LSLS     r1,r1,#19
000842  1a40              SUBS     r0,r0,r1
000844  6c00              LDR      r0,[r0,#0x40]
000846  9007              STR      r0,[sp,#0x1c]
;;;393        mask    = rHSMCI_IMR(ch);
000848  481b              LDR      r0,|L1.2232|
00084a  4368              MULS     r0,r5,r0
00084c  1a40              SUBS     r0,r0,r1
00084e  6cc7              LDR      r7,[r0,#0x4c]
;;;394        status  = status0 & mask;
000850  9807              LDR      r0,[sp,#0x1c]
000852  4038              ANDS     r0,r0,r7
000854  0006              MOVS     r6,r0
;;;395    	
;;;396    //	TRACE_WRN("iST 0x%08X", status0);
;;;397    //	TRACE_WRN("iMK 0x%08X", mask);
;;;398    //	TRACE_WRN("iSM 0x%08X", status);
;;;399    
;;;400        // Check if an error has occured
;;;401        if ((status & STATUS_ERRORS) != 0) {
000856  481c              LDR      r0,|L1.2248|
000858  1e40              SUBS     r0,r0,#1
00085a  4206              TST      r6,r0
00085c  d045              BEQ      |L1.2282|
;;;402            // Check error code
;;;403            if ((status & STATUS_ERRORS) == HSMCI_RTOE) pCommand->status = MCI_STATUS_NORESPONSE;
00085e  4030              ANDS     r0,r0,r6
000860  0049              LSLS     r1,r1,#1
000862  4288              CMP      r0,r1
000864  d102              BNE      |L1.2156|
000866  2003              MOVS     r0,#3
000868  6220              STR      r0,[r4,#0x20]
00086a  e001              B        |L1.2160|
                  |L1.2156|
;;;404            else pCommand->status = MCI_STATUS_ERROR;
00086c  2002              MOVS     r0,#2
00086e  6220              STR      r0,[r4,#0x20]
                  |L1.2160|
;;;405            TRACE_WRN("iErr 0x%x", (status & STATUS_ERRORS));
000870  201b              MOVS     r0,#0x1b
000872  f7fffffe          BL       ShellPutByte
000876  4807              LDR      r0,|L1.2196|
000878  f7fffffe          BL       ShellPrintf
00087c  201b              MOVS     r0,#0x1b
00087e  f7fffffe          BL       ShellPutByte
000882  a005              ADR      r0,|L1.2200|
000884  f7fffffe          BL       ShellPrintf
000888  480f              LDR      r0,|L1.2248|
00088a  1e40              SUBS     r0,r0,#1
00088c  4030              ANDS     r0,r0,r6
00088e  0001              MOVS     r1,r0
000890  a010              ADR      r0,|L1.2260|
000892  e025              B        |L1.2272|
                  |L1.2196|
                          DCD      ||.text||+0x43c
                  |L1.2200|
000898  5b6d00            DCB      "[m",0
00089b  00                DCB      0
                  |L1.2204|
00089c  444d4143          DCB      "DMACH_MCI_P2M()",0
0008a0  485f4d43
0008a4  495f5032
0008a8  4d282900
                  |L1.2220|
0008ac  0a0d00            DCB      "\n\r",0
0008af  00                DCB      0
                  |L1.2224|
                          DCD      0x7100f0bc
                  |L1.2228|
                          DCD      0x7100f014
                  |L1.2232|
                          DCD      0x0000c350
                  |L1.2236|
                          DCD      0x0000e7ff
                  |L1.2240|
                          DCD      xfredBlocks
                  |L1.2244|
                          DCD      0xc3ff0000
                  |L1.2248|
                          DCD      0xc1ff0001
                  |L1.2252|
                          DCD      0x3e1fffff
                  |L1.2256|
                          DCD      ||.constdata||
                  |L1.2260|
0008d4  69457272          DCB      "iErr 0x%x",0
0008d8  20307825
0008dc  7800    
0008de  00                DCB      0
0008df  00                DCB      0
                  |L1.2272|
0008e0  f7fffffe          BL       ShellPrintf
0008e4  a0fe              ADR      r0,|L1.3296|
0008e6  f7fffffe          BL       ShellPrintf
                  |L1.2282|
;;;406        }
;;;407        mask &= ~STATUS_ERRORS;
0008ea  48fe              LDR      r0,|L1.3300|
0008ec  4007              ANDS     r7,r7,r0
;;;408    
;;;409    //	TRACE_ERR("MCI_Handler Step 0");
;;;410    
;;;411        // Check if a command has been completed
;;;412        if (status & HSMCI_CMDRDY)
0008ee  07f0              LSLS     r0,r6,#31
0008f0  0fc0              LSRS     r0,r0,#31
0008f2  d028              BEQ      |L1.2374|
;;;413    	{
;;;414    		rHSMCI_IDR(ch) = HSMCI_CMDRDY;
0008f4  2101              MOVS     r1,#1
0008f6  48fc              LDR      r0,|L1.3304|
0008f8  4368              MULS     r0,r5,r0
0008fa  04ca              LSLS     r2,r1,#19
0008fc  1a80              SUBS     r0,r0,r2
0008fe  6481              STR      r1,[r0,#0x48]
;;;415            if (pCommand->isRead == 0 && pCommand->tranType == MCI_STOP_TRANSFER)
000900  7fe0              LDRB     r0,[r4,#0x1f]
000902  2800              CMP      r0,#0
000904  d114              BNE      |L1.2352|
000906  7fa0              LDRB     r0,[r4,#0x1e]
000908  2802              CMP      r0,#2
00090a  d111              BNE      |L1.2352|
;;;416    		{
;;;417                if (status0 & HSMCI_XFRDONE) rHSMCI_CR(ch) = HSMCI_MCIDIS;
00090c  06c9              LSLS     r1,r1,#27
00090e  9807              LDR      r0,[sp,#0x1c]
000910  4208              TST      r0,r1
000912  d005              BEQ      |L1.2336|
000914  2102              MOVS     r1,#2
000916  48f4              LDR      r0,|L1.3304|
000918  4368              MULS     r0,r5,r0
00091a  1a80              SUBS     r0,r0,r2
00091c  6001              STR      r1,[r0,#0]
00091e  e012              B        |L1.2374|
                  |L1.2336|
;;;418                else rHSMCI_IER(ch) = HSMCI_XFRDONE;
000920  2101              MOVS     r1,#1
000922  06c9              LSLS     r1,r1,#27
000924  48f0              LDR      r0,|L1.3304|
000926  4368              MULS     r0,r5,r0
000928  120a              ASRS     r2,r1,#8
00092a  1a80              SUBS     r0,r0,r2
00092c  6441              STR      r1,[r0,#0x44]
00092e  e00a              B        |L1.2374|
                  |L1.2352|
;;;419            }
;;;420            else
;;;421    		{
;;;422                mask &= ~(U32)HSMCI_CMDRDY;
000930  087f              LSRS     r7,r7,#1
000932  007f              LSLS     r7,r7,#1
;;;423                if (pCommand->dataTran == 0) rHSMCI_CR(ch) = HSMCI_MCIDIS;
000934  7f60              LDRB     r0,[r4,#0x1d]
000936  2800              CMP      r0,#0
000938  d105              BNE      |L1.2374|
00093a  2102              MOVS     r1,#2
00093c  48ea              LDR      r0,|L1.3304|
00093e  4368              MULS     r0,r5,r0
000940  048a              LSLS     r2,r1,#18
000942  1a80              SUBS     r0,r0,r2
000944  6001              STR      r1,[r0,#0]
                  |L1.2374|
;;;424            }
;;;425        }
;;;426    
;;;427    //	TRACE_ERR("MCI_Handler Step 1");
;;;428    
;;;429    
;;;430        // Check if transfer stopped
;;;431        if (status & HSMCI_XFRDONE)
000946  2001              MOVS     r0,#1
000948  06c0              LSLS     r0,r0,#27
00094a  4206              TST      r6,r0
00094c  d009              BEQ      |L1.2402|
;;;432    	{
;;;433            mask &= ~(U32)HSMCI_XFRDONE;
00094e  0001              MOVS     r1,r0
000950  0038              MOVS     r0,r7
000952  4388              BICS     r0,r0,r1
000954  0007              MOVS     r7,r0
;;;434            rHSMCI_CR(ch) = HSMCI_MCIDIS;
000956  2102              MOVS     r1,#2
000958  48e3              LDR      r0,|L1.3304|
00095a  4368              MULS     r0,r5,r0
00095c  048a              LSLS     r2,r1,#18
00095e  1a80              SUBS     r0,r0,r2
000960  6001              STR      r1,[r0,#0]
                  |L1.2402|
;;;435        }
;;;436    
;;;437    //#if defined(MCI_DMA_ENABLE)
;;;438    
;;;439        // Check FIFOEMPTY
;;;440        if (status & HSMCI_FIFOEMPTY)
000962  2001              MOVS     r0,#1
000964  0680              LSLS     r0,r0,#26
000966  4206              TST      r6,r0
000968  d01c              BEQ      |L1.2468|
;;;441    	{
;;;442            rHSMCI_IDR(ch) = HSMCI_FIFOEMPTY;
00096a  0001              MOVS     r1,r0
00096c  48de              LDR      r0,|L1.3304|
00096e  4368              MULS     r0,r5,r0
000970  11ca              ASRS     r2,r1,#7
000972  1a80              SUBS     r0,r0,r2
000974  6481              STR      r1,[r0,#0x48]
;;;443            if ( pCommand->isRead == 0 && (status0 & HSMCI_BLKE) == 0 ) rHSMCI_IER(ch) = HSMCI_BLKE;
000976  7fe0              LDRB     r0,[r4,#0x1f]
000978  2800              CMP      r0,#0
00097a  d108              BNE      |L1.2446|
00097c  2108              MOVS     r1,#8
00097e  9807              LDR      r0,[sp,#0x1c]
000980  4208              TST      r0,r1
000982  d104              BNE      |L1.2446|
000984  48d8              LDR      r0,|L1.3304|
000986  4368              MULS     r0,r5,r0
000988  1a80              SUBS     r0,r0,r2
00098a  6441              STR      r1,[r0,#0x44]
00098c  e00a              B        |L1.2468|
                  |L1.2446|
;;;444            else
;;;445    		{
;;;446                mask &= ~(U32)HSMCI_FIFOEMPTY;
00098e  2101              MOVS     r1,#1
000990  0689              LSLS     r1,r1,#26
000992  0038              MOVS     r0,r7
000994  4388              BICS     r0,r0,r1
000996  0007              MOVS     r7,r0
;;;447                rHSMCI_CR(ch) = HSMCI_MCIDIS;
000998  2102              MOVS     r1,#2
00099a  48d3              LDR      r0,|L1.3304|
00099c  4368              MULS     r0,r5,r0
00099e  048a              LSLS     r2,r1,#18
0009a0  1a80              SUBS     r0,r0,r2
0009a2  6001              STR      r1,[r0,#0]
                  |L1.2468|
;;;448            }
;;;449        }
;;;450    	
;;;451    //	TRACE_ERR("MCI_Handler Step 2");
;;;452    	
;;;453        if (status & HSMCI_BLKE) {
0009a4  2008              MOVS     r0,#8
0009a6  4206              TST      r6,r0
0009a8  d009              BEQ      |L1.2494|
;;;454            mask &= ~(U32)HSMCI_BLKE;
0009aa  2108              MOVS     r1,#8
0009ac  0038              MOVS     r0,r7
0009ae  4388              BICS     r0,r0,r1
0009b0  0007              MOVS     r7,r0
;;;455            rHSMCI_CR(ch) = HSMCI_MCIDIS;
0009b2  2102              MOVS     r1,#2
0009b4  48cc              LDR      r0,|L1.3304|
0009b6  4368              MULS     r0,r5,r0
0009b8  048a              LSLS     r2,r1,#18
0009ba  1a80              SUBS     r0,r0,r2
0009bc  6001              STR      r1,[r0,#0]
                  |L1.2494|
;;;456        }
;;;457    
;;;458    //	TRACE_ERR("MCI_Handler Step 3");
;;;459    
;;;460        // Check if a DMA transfer has been completed
;;;461        if ((status & HSMCI_DMADONE) && (LLI_MCI[dmaLastLliNdx].controlA & AT91C_HDMA_DONE))
0009be  2001              MOVS     r0,#1
0009c0  0640              LSLS     r0,r0,#25
0009c2  4206              TST      r6,r0
0009c4  d070              BEQ      |L1.2728|
0009c6  48c9              LDR      r0,|L1.3308|
0009c8  7800              LDRB     r0,[r0,#0]  ; dmaLastLliNdx
0009ca  2114              MOVS     r1,#0x14
0009cc  4348              MULS     r0,r1,r0
0009ce  49c8              LDR      r1,|L1.3312|
0009d0  1840              ADDS     r0,r0,r1
0009d2  6880              LDR      r0,[r0,#8]
0009d4  0fc0              LSRS     r0,r0,#31
0009d6  07c0              LSLS     r0,r0,#31
0009d8  d07d              BEQ      |L1.2774|
;;;462    	{
;;;463    
;;;464            U32 intFlag;
;;;465            intFlag = DMA_GetInterruptMask();
0009da  f7fffffe          BL       DMA_GetInterruptMask
0009de  9003              STR      r0,[sp,#0xc]
;;;466            intFlag = ~intFlag;
0009e0  9803              LDR      r0,[sp,#0xc]
0009e2  43c0              MVNS     r0,r0
0009e4  9003              STR      r0,[sp,#0xc]
;;;467            intFlag |= (AT91C_HDMA_BTC0 << SDMMC_DMA_CHANNEL);
0009e6  2101              MOVS     r1,#1
0009e8  9803              LDR      r0,[sp,#0xc]
0009ea  4308              ORRS     r0,r0,r1
0009ec  9003              STR      r0,[sp,#0xc]
;;;468            DMA_DisableIt(intFlag);
0009ee  9803              LDR      r0,[sp,#0xc]
0009f0  f7fffffe          BL       DMA_DisableIt
;;;469    
;;;470    //		TRACE_ERR("MCI_Handler Step 4");
;;;471    
;;;472            // All data transferred
;;;473            if (xfredBlocks >= pCommand->nbBlock)
0009f4  89e0              LDRH     r0,[r4,#0xe]
0009f6  49bf              LDR      r1,|L1.3316|
0009f8  8809              LDRH     r1,[r1,#0]  ; xfredBlocks
0009fa  4288              CMP      r0,r1
0009fc  dc1d              BGT      |L1.2618|
;;;474    		{
;;;475    			rHSMCI_IDR(ch) = HSMCI_DMADONE;
0009fe  2101              MOVS     r1,#1
000a00  0649              LSLS     r1,r1,#25
000a02  48b9              LDR      r0,|L1.3304|
000a04  4368              MULS     r0,r5,r0
000a06  118a              ASRS     r2,r1,#6
000a08  1a80              SUBS     r0,r0,r2
000a0a  6481              STR      r1,[r0,#0x48]
;;;476                if ( pCommand->isRead == 0 && (status0 & HSMCI_FIFOEMPTY) == 0 ) rHSMCI_IER(ch) = HSMCI_FIFOEMPTY;
000a0c  7fe0              LDRB     r0,[r4,#0x1f]
000a0e  2800              CMP      r0,#0
000a10  d108              BNE      |L1.2596|
000a12  0049              LSLS     r1,r1,#1
000a14  9807              LDR      r0,[sp,#0x1c]
000a16  4208              TST      r0,r1
000a18  d104              BNE      |L1.2596|
000a1a  48b3              LDR      r0,|L1.3304|
000a1c  4368              MULS     r0,r5,r0
000a1e  1a80              SUBS     r0,r0,r2
000a20  6441              STR      r1,[r0,#0x44]
000a22  e057              B        |L1.2772|
                  |L1.2596|
;;;477                else
;;;478    			{
;;;479                    rHSMCI_CR(ch) = HSMCI_MCIDIS;
000a24  2102              MOVS     r1,#2
000a26  48b0              LDR      r0,|L1.3304|
000a28  4368              MULS     r0,r5,r0
000a2a  048a              LSLS     r2,r1,#18
000a2c  1a80              SUBS     r0,r0,r2
000a2e  6001              STR      r1,[r0,#0]
;;;480                    mask &= ~(U32)HSMCI_DMADONE;
000a30  0609              LSLS     r1,r1,#24
000a32  0038              MOVS     r0,r7
000a34  4388              BICS     r0,r0,r1
000a36  0007              MOVS     r7,r0
000a38  e04c              B        |L1.2772|
                  |L1.2618|
;;;481                }
;;;482            }
;;;483            // Start later part of DMA
;;;484            else
;;;485    		{
;;;486                p = &pCommand->pData[xfredBlocks*pCommand->blockSize];
000a3a  89a0              LDRH     r0,[r4,#0xc]
000a3c  4aad              LDR      r2,|L1.3316|
000a3e  8812              LDRH     r2,[r2,#0]  ; xfredBlocks
000a40  4350              MULS     r0,r2,r0
000a42  68a1              LDR      r1,[r4,#8]
000a44  1808              ADDS     r0,r1,r0
000a46  9004              STR      r0,[sp,#0x10]
;;;487                transSize = ((pCommand->nbBlock - xfredBlocks)*pCommand->blockSize);
000a48  89e0              LDRH     r0,[r4,#0xe]
000a4a  49aa              LDR      r1,|L1.3316|
000a4c  8809              LDRH     r1,[r1,#0]  ; xfredBlocks
000a4e  1a40              SUBS     r0,r0,r1
000a50  89a1              LDRH     r1,[r4,#0xc]
000a52  4348              MULS     r0,r1,r0
000a54  9005              STR      r0,[sp,#0x14]
;;;488                if (transSize > MCI_FIFO_SIZE)
000a56  210f              MOVS     r1,#0xf
000a58  0289              LSLS     r1,r1,#10
000a5a  9805              LDR      r0,[sp,#0x14]
000a5c  4288              CMP      r0,r1
000a5e  d90a              BLS      |L1.2678|
;;;489    			{
;;;490                    transSize = MCI_FIFO_SIZE;
000a60  48a5              LDR      r0,|L1.3320|
000a62  9005              STR      r0,[sp,#0x14]
;;;491                    xfredBlocks += MCI_FIFO_SIZE/pCommand->blockSize;
000a64  89a1              LDRH     r1,[r4,#0xc]
000a66  f7fffffe          BL       __aeabi_idivmod
000a6a  49a2              LDR      r1,|L1.3316|
000a6c  8809              LDRH     r1,[r1,#0]  ; xfredBlocks
000a6e  1840              ADDS     r0,r0,r1
000a70  49a0              LDR      r1,|L1.3316|
000a72  8008              STRH     r0,[r1,#0]
000a74  e002              B        |L1.2684|
                  |L1.2678|
;;;492                }
;;;493                else
;;;494    			{
;;;495                    xfredBlocks  = pCommand->nbBlock;
000a76  89e0              LDRH     r0,[r4,#0xe]
000a78  499e              LDR      r1,|L1.3316|
000a7a  8008              STRH     r0,[r1,#0]
                  |L1.2684|
;;;496                }
;;;497                #if 0
;;;498                WRITE_MCI(pMciHw, MCI_BLKR, (READ_MCI(pMciHw, MCI_BLKR)
;;;499                                             & (~(U32)HSMCI_BCNT))
;;;500                                               | (transSize/pCommand->blockSize));
;;;501                #endif
;;;502                if ((pCommand->blockSize & 0x3) == 0) {
000a7c  89a0              LDRH     r0,[r4,#0xc]
000a7e  0780              LSLS     r0,r0,#30
000a80  0f80              LSRS     r0,r0,#30
000a82  d10a              BNE      |L1.2714|
;;;503                    transSize = toWCOUNT(transSize);
000a84  9805              LDR      r0,[sp,#0x14]
000a86  0780              LSLS     r0,r0,#30
000a88  0f80              LSRS     r0,r0,#30
000a8a  d003              BEQ      |L1.2708|
000a8c  9805              LDR      r0,[sp,#0x14]
000a8e  0880              LSRS     r0,r0,#2
000a90  1c40              ADDS     r0,r0,#1
000a92  e001              B        |L1.2712|
                  |L1.2708|
000a94  9805              LDR      r0,[sp,#0x14]
000a96  0880              LSRS     r0,r0,#2
                  |L1.2712|
000a98  9005              STR      r0,[sp,#0x14]
                  |L1.2714|
;;;504                }
;;;505                DMACH_MCI_P2M(SDMMC_DMA_CHANNEL, HSMCI_FIFO(ch), (U8*) p, transSize, 0, (pCommand->blockSize & 0x3) > 0);
000a9a  89a0              LDRH     r0,[r4,#0xc]
000a9c  0780              LSLS     r0,r0,#30
000a9e  0f80              LSRS     r0,r0,#30
000aa0  2800              CMP      r0,#0
000aa2  dd02              BLE      |L1.2730|
000aa4  2001              MOVS     r0,#1
000aa6  e001              B        |L1.2732|
                  |L1.2728|
000aa8  e015              B        |L1.2774|
                  |L1.2730|
000aaa  2000              MOVS     r0,#0
                  |L1.2732|
000aac  2100              MOVS     r1,#0
000aae  9100              STR      r1,[sp,#0]
000ab0  9001              STR      r0,[sp,#4]
000ab2  488d              LDR      r0,|L1.3304|
000ab4  4368              MULS     r0,r5,r0
000ab6  2101              MOVS     r1,#1
000ab8  04c9              LSLS     r1,r1,#19
000aba  1a40              SUBS     r0,r0,r1
000abc  1dc1              ADDS     r1,r0,#7
000abe  31ff              ADDS     r1,r1,#0xff
000ac0  31fa              ADDS     r1,r1,#0xfa
000ac2  9102              STR      r1,[sp,#8]
000ac4  2000              MOVS     r0,#0
000ac6  9b05              LDR      r3,[sp,#0x14]
000ac8  9a04              LDR      r2,[sp,#0x10]
000aca  f7fffffe          BL       DMACH_MCI_P2M
;;;506                DMA_EnableChannel(SDMMC_DMA_CHANNEL);
000ace  2000              MOVS     r0,#0
000ad0  f7fffffe          BL       DMA_EnableChannel
                  |L1.2772|
;;;507    			
;;;508    //			TRACE_ERR("MCI_Handler Step 5");
;;;509            }
;;;510        }
000ad4  46c0              MOV      r8,r8
                  |L1.2774|
;;;511    //#endif
;;;512    	
;;;513    //	TRACE_ERR("MCI_Handler Step 6");
;;;514    	
;;;515        // All non-error mask done, complete the command
;;;516        if (!mask || pCommand->status != MCI_STATUS_PENDING)
000ad6  2f00              CMP      r7,#0
000ad8  d002              BEQ      |L1.2784|
000ada  6a20              LDR      r0,[r4,#0x20]
000adc  2801              CMP      r0,#1
000ade  d063              BEQ      |L1.2984|
                  |L1.2784|
;;;517    	{
;;;518            // Store the card response in the provided buffer
;;;519            if (pCommand->pResp)
000ae0  6920              LDR      r0,[r4,#0x10]
000ae2  2800              CMP      r0,#0
000ae4  d02e              BEQ      |L1.2884|
;;;520    		{
;;;521                U8 resSize;
;;;522                switch (pCommand->resType)
000ae6  7f20              LDRB     r0,[r4,#0x1c]
000ae8  0003              MOVS     r3,r0
000aea  f7fffffe          BL       __ARM_common_switch8
000aee  0810              DCB      0x08,0x10
000af0  050d0607          DCB      0x05,0x0d,0x06,0x07
000af4  08090a10          DCB      0x08,0x09,0x0a,0x10
;;;523    			{
;;;524    	            case 1: case 3: case 4: case 5: case 6: case 7:
000af8  46c0              MOV      r8,r8
000afa  46c0              MOV      r8,r8
000afc  46c0              MOV      r8,r8
000afe  46c0              MOV      r8,r8
000b00  46c0              MOV      r8,r8
;;;525    	                     resSize = 1;           break;
000b02  2001              MOVS     r0,#1
000b04  9003              STR      r0,[sp,#0xc]
000b06  e005              B        |L1.2836|
;;;526    	            case 2:  resSize = 4;           break;
000b08  2004              MOVS     r0,#4
000b0a  9003              STR      r0,[sp,#0xc]
000b0c  e002              B        |L1.2836|
;;;527    	            default: resSize = 0;           break;
000b0e  2000              MOVS     r0,#0
000b10  9003              STR      r0,[sp,#0xc]
000b12  46c0              MOV      r8,r8
                  |L1.2836|
000b14  46c0              MOV      r8,r8                 ;525
;;;528                }
;;;529                for (i=0; i < resSize; i++) pCommand->pResp[i] = rHSMCI_RSPR0(ch);
000b16  2000              MOVS     r0,#0
000b18  9006              STR      r0,[sp,#0x18]
000b1a  e00e              B        |L1.2874|
                  |L1.2844|
000b1c  4872              LDR      r0,|L1.3304|
000b1e  4368              MULS     r0,r5,r0
000b20  2101              MOVS     r1,#1
000b22  04c9              LSLS     r1,r1,#19
000b24  1a40              SUBS     r0,r0,r1
000b26  6a01              LDR      r1,[r0,#0x20]
000b28  6922              LDR      r2,[r4,#0x10]
000b2a  9806              LDR      r0,[sp,#0x18]
000b2c  0080              LSLS     r0,r0,#2
000b2e  5011              STR      r1,[r2,r0]
000b30  9806              LDR      r0,[sp,#0x18]
000b32  1c40              ADDS     r0,r0,#1
000b34  0600              LSLS     r0,r0,#24
000b36  0e00              LSRS     r0,r0,#24
000b38  9006              STR      r0,[sp,#0x18]
                  |L1.2874|
000b3a  9903              LDR      r1,[sp,#0xc]
000b3c  9806              LDR      r0,[sp,#0x18]
000b3e  4288              CMP      r0,r1
000b40  dbec              BLT      |L1.2844|
;;;530            }
000b42  46c0              MOV      r8,r8
                  |L1.2884|
;;;531    
;;;532            // If no error occured, the transfer is successful
;;;533            if (pCommand->status == MCI_STATUS_PENDING) pCommand->status = 0;
000b44  6a20              LDR      r0,[r4,#0x20]
000b46  2801              CMP      r0,#1
000b48  d102              BNE      |L1.2896|
000b4a  2000              MOVS     r0,#0
000b4c  6220              STR      r0,[r4,#0x20]
000b4e  e003              B        |L1.2904|
                  |L1.2896|
;;;534            // Any error, reset registers
;;;535            else MCI_Reset(ch, 1);
000b50  2101              MOVS     r1,#1
000b52  0028              MOVS     r0,r5
000b54  f7fffffe          BL       MCI_Reset
                  |L1.2904|
;;;536    
;;;537            // Disable interrupts
;;;538    		rHSMCI_IDR(ch) = rHSMCI_IMR(ch);
000b58  4863              LDR      r0,|L1.3304|
000b5a  4368              MULS     r0,r5,r0
000b5c  2101              MOVS     r1,#1
000b5e  04c9              LSLS     r1,r1,#19
000b60  1a40              SUBS     r0,r0,r1
000b62  6cc1              LDR      r1,[r0,#0x4c]
000b64  4860              LDR      r0,|L1.3304|
000b66  4368              MULS     r0,r5,r0
000b68  2201              MOVS     r2,#1
000b6a  04d2              LSLS     r2,r2,#19
000b6c  1a80              SUBS     r0,r0,r2
000b6e  6481              STR      r1,[r0,#0x48]
;;;539    		
;;;540    //      #if defined(MCI_DMA_ENABLE)
;;;541            DMA_DisableChannel(SDMMC_DMA_CHANNEL);
000b70  2000              MOVS     r0,#0
000b72  f7fffffe          BL       DMA_DisableChannel
;;;542    //      #endif
;;;543    
;;;544    //		TRACE_ERR("MCI_Handler Step 7");
;;;545    
;;;546    		// Disable the MCI peripheral clock.
;;;547    		if(ch == 0) PMC_PeriDis(PERIF_ID_MCI0);
000b76  2d00              CMP      r5,#0
000b78  d103              BNE      |L1.2946|
000b7a  200b              MOVS     r0,#0xb
000b7c  f7fffffe          BL       PMC_PeriDis
000b80  e002              B        |L1.2952|
                  |L1.2946|
;;;548    		else PMC_PeriDis(PERIF_ID_MCI1);
000b82  201d              MOVS     r0,#0x1d
000b84  f7fffffe          BL       PMC_PeriDis
                  |L1.2952|
;;;549            
;;;550            // Release the semaphore
;;;551            pMci->semaphore++;
000b88  9808              LDR      r0,[sp,#0x20]
000b8a  7a80              LDRB     r0,[r0,#0xa]
000b8c  1c40              ADDS     r0,r0,#1
000b8e  0601              LSLS     r1,r0,#24
000b90  0e09              LSRS     r1,r1,#24
000b92  9808              LDR      r0,[sp,#0x20]
000b94  7281              STRB     r1,[r0,#0xa]
;;;552    
;;;553    //		TRACE_ERR("MCI_Handler Step 8");
;;;554    
;;;555            // Invoke the callback associated with the current command (if any)
;;;556    		if (pCommand->callback)
000b96  6960              LDR      r0,[r4,#0x14]
000b98  2800              CMP      r0,#0
000b9a  d005              BEQ      |L1.2984|
;;;557    		{
;;;558    			(pCommand->callback)(pCommand->status, (void*)pCommand);
000b9c  6a21              LDR      r1,[r4,#0x20]
000b9e  0608              LSLS     r0,r1,#24
000ba0  0e00              LSRS     r0,r0,#24
000ba2  0021              MOVS     r1,r4
000ba4  6962              LDR      r2,[r4,#0x14]
000ba6  4790              BLX      r2
                  |L1.2984|
;;;559    		}
;;;560        }
;;;561    	
;;;562    //	TRACE_ERR("MCI_Handler Step 9");
;;;563    }
000ba8  b009              ADD      sp,sp,#0x24
000baa  bdf0              POP      {r4-r7,pc}
;;;564    
                          ENDP

                  MCI_IsTxComplete PROC
;;;234    //------------------------------------------------------------------------------
;;;235    U8 MCI_IsTxComplete(Mci *pMci)
000bac  b570              PUSH     {r4-r6,lr}
;;;236    {
000bae  0004              MOVS     r4,r0
;;;237        MciCmd *pCommand = pMci->pCommand;		
000bb0  6865              LDR      r5,[r4,#4]
;;;238    	
;;;239        if(pMci->bPolling == MCI_POLLING_MODE) {
000bb2  68e0              LDR      r0,[r4,#0xc]
000bb4  2801              CMP      r0,#1
000bb6  d102              BNE      |L1.3006|
;;;240            MCI_Handler(pMci);
000bb8  0020              MOVS     r0,r4
000bba  f7fffffe          BL       MCI_Handler
                  |L1.3006|
;;;241        }
;;;242      
;;;243        if (pCommand->status != MCI_STATUS_PENDING) {
000bbe  6a28              LDR      r0,[r5,#0x20]
000bc0  2801              CMP      r0,#1
000bc2  d002              BEQ      |L1.3018|
;;;244            if (pCommand->status != 0) {
000bc4  6a28              LDR      r0,[r5,#0x20]
;;;245                DEBUG_MSG("MCI_IsTxComplete %d", pCommand->status);
;;;246            }
;;;247            return 1;
000bc6  2001              MOVS     r0,#1
                  |L1.3016|
;;;248        }
;;;249        else {
;;;250            return 0;
;;;251        }
;;;252    }
000bc8  bd70              POP      {r4-r6,pc}
                  |L1.3018|
000bca  2000              MOVS     r0,#0                 ;250
000bcc  e7fc              B        |L1.3016|
;;;253    
                          ENDP

                  MCI_GetSpeed PROC
;;;259    //------------------------------------------------------------------------------
;;;260    U32 MCI_GetSpeed(Mci *pMci, U32 *mciDiv)
000bce  b5f8              PUSH     {r3-r7,lr}
;;;261    {
000bd0  0006              MOVS     r6,r0
000bd2  000c              MOVS     r4,r1
;;;262    	U8 ch = pMci-> mciChan;
000bd4  7837              LDRB     r7,[r6,#0]
;;;263        U32 mciMr;
;;;264    
;;;265        // Get the Mode Register
;;;266    	
;;;267        mciMr  = rHSMCI_MR(ch);
000bd6  4844              LDR      r0,|L1.3304|
000bd8  4378              MULS     r0,r7,r0
000bda  2101              MOVS     r1,#1
000bdc  04c9              LSLS     r1,r1,#19
000bde  1a40              SUBS     r0,r0,r1
000be0  6845              LDR      r5,[r0,#4]
;;;268        mciMr &= HSMCI_CLKDIV;
000be2  062d              LSLS     r5,r5,#24
000be4  0e2d              LSRS     r5,r5,#24
;;;269        if (mciDiv) *mciDiv = mciMr;
000be6  2c00              CMP      r4,#0
000be8  d000              BEQ      |L1.3052|
000bea  6025              STR      r5,[r4,#0]
                  |L1.3052|
;;;270        return (BOARD_MCK / 2 / (mciMr + 1));
000bec  1c69              ADDS     r1,r5,#1
000bee  4843              LDR      r0,|L1.3324|
000bf0  f7fffffe          BL       __aeabi_uidivmod
;;;271    }
000bf4  bdf8              POP      {r3-r7,pc}
;;;272    
                          ENDP

                  MCI_SetSpeed PROC
;;;281    //------------------------------------------------------------------------------
;;;282    U32 MCI_SetSpeed(Mci *pMci, U32 mciSpeed, U32 mciLimit, U32 mck)
000bf6  b5ff              PUSH     {r0-r7,lr}
;;;283    {
000bf8  b083              SUB      sp,sp,#0xc
000bfa  000e              MOVS     r6,r1
000bfc  0017              MOVS     r7,r2
000bfe  001d              MOVS     r5,r3
;;;284    	U8 ch = pMci-> mciChan;
000c00  9803              LDR      r0,[sp,#0xc]
000c02  7800              LDRB     r0,[r0,#0]
000c04  9002              STR      r0,[sp,#8]
;;;285        U32 mciMr;
;;;286        U32 clkdiv;
;;;287        U32 divLimit = 0;
000c06  2000              MOVS     r0,#0
000c08  9000              STR      r0,[sp,#0]
;;;288    
;;;289        mciMr = rHSMCI_MR(ch) & (~(U32)HSMCI_CLKDIV);
000c0a  4937              LDR      r1,|L1.3304|
000c0c  9802              LDR      r0,[sp,#8]
000c0e  4348              MULS     r0,r1,r0
000c10  2101              MOVS     r1,#1
000c12  04c9              LSLS     r1,r1,#19
000c14  1a40              SUBS     r0,r0,r1
000c16  6840              LDR      r0,[r0,#4]
000c18  0a00              LSRS     r0,r0,#8
000c1a  0200              LSLS     r0,r0,#8
000c1c  9001              STR      r0,[sp,#4]
;;;290    
;;;291        // Multimedia Card Interface clock (MCCK or MCI_CK) is Master Clock (MCK)
;;;292        // divided by (2*(CLKDIV+1))
;;;293        // mciSpeed = MCK / (2*(CLKDIV+1))
;;;294        if (mciLimit) {
000c1e  2f00              CMP      r7,#0
000c20  d00d              BEQ      |L1.3134|
;;;295            divLimit = (mck / 2 / mciLimit);
000c22  0868              LSRS     r0,r5,#1
000c24  0039              MOVS     r1,r7
000c26  f7fffffe          BL       __aeabi_uidivmod
000c2a  9000              STR      r0,[sp,#0]
;;;296            if ((mck / 2) % mciLimit) divLimit ++;
000c2c  0868              LSRS     r0,r5,#1
000c2e  0039              MOVS     r1,r7
000c30  f7fffffe          BL       __aeabi_uidivmod
000c34  2900              CMP      r1,#0
000c36  d002              BEQ      |L1.3134|
000c38  9800              LDR      r0,[sp,#0]
000c3a  1c40              ADDS     r0,r0,#1
000c3c  9000              STR      r0,[sp,#0]
                  |L1.3134|
;;;297        }
;;;298        if (mciSpeed > 0) {
000c3e  2e00              CMP      r6,#0
000c40  d00e              BEQ      |L1.3168|
;;;299            clkdiv = (mck / 2 / mciSpeed);
000c42  0868              LSRS     r0,r5,#1
000c44  0031              MOVS     r1,r6
000c46  f7fffffe          BL       __aeabi_uidivmod
000c4a  0004              MOVS     r4,r0
;;;300            if (mciLimit && clkdiv < divLimit)
000c4c  2f00              CMP      r7,#0
000c4e  d003              BEQ      |L1.3160|
000c50  9800              LDR      r0,[sp,#0]
000c52  4284              CMP      r4,r0
000c54  d200              BCS      |L1.3160|
;;;301                clkdiv = divLimit;
000c56  9c00              LDR      r4,[sp,#0]
                  |L1.3160|
;;;302            if (clkdiv > 0) 
000c58  2c00              CMP      r4,#0
000c5a  d002              BEQ      |L1.3170|
;;;303                clkdiv -= 1;
000c5c  1e64              SUBS     r4,r4,#1
000c5e  e000              B        |L1.3170|
                  |L1.3168|
;;;304        }
;;;305        else    clkdiv = 0;
000c60  2400              MOVS     r4,#0
                  |L1.3170|
;;;306    
;;;307        // Actual MCI speed
;;;308        mciSpeed = mck / 2 / (clkdiv + 1);
000c62  0868              LSRS     r0,r5,#1
000c64  1c61              ADDS     r1,r4,#1
000c66  f7fffffe          BL       __aeabi_uidivmod
000c6a  0006              MOVS     r6,r0
;;;309    
;;;310        // Set the Data Timeout Register & Completion Timeout
;;;311        // Data timeout is 500ms, completion timeout 1s.
;;;312        //MCI_SetTimeout(pMciHw, mciSpeed / 2, mciSpeed);
;;;313    
;;;314    	rHSMCI_MR(ch) = (mciMr | clkdiv);
000c6c  9901              LDR      r1,[sp,#4]
000c6e  4321              ORRS     r1,r1,r4
000c70  4a1d              LDR      r2,|L1.3304|
000c72  9802              LDR      r0,[sp,#8]
000c74  4350              MULS     r0,r2,r0
000c76  2201              MOVS     r2,#1
000c78  04d2              LSLS     r2,r2,#19
000c7a  1a80              SUBS     r0,r0,r2
000c7c  6041              STR      r1,[r0,#4]
;;;315    
;;;316        return (mciSpeed);
000c7e  0030              MOVS     r0,r6
;;;317    }
000c80  b007              ADD      sp,sp,#0x1c
000c82  bdf0              POP      {r4-r7,pc}
;;;318    
                          ENDP

                  MCI_EnableHsMode PROC
;;;323    //------------------------------------------------------------------------------
;;;324    void MCI_EnableHsMode(Mci *pMci, U8 hsEnable)
000c84  b530              PUSH     {r4,r5,lr}
;;;325    {
000c86  0002              MOVS     r2,r0
;;;326    	U8 ch = pMci-> mciChan;
000c88  7813              LDRB     r3,[r2,#0]
;;;327        U32 cfgr;
;;;328    
;;;329        cfgr = rHSMCI_CFG(ch);
000c8a  4c17              LDR      r4,|L1.3304|
000c8c  435c              MULS     r4,r3,r4
000c8e  2501              MOVS     r5,#1
000c90  04ed              LSLS     r5,r5,#19
000c92  1b64              SUBS     r4,r4,r5
000c94  6d60              LDR      r0,[r4,#0x54]
;;;330    
;;;331        if (hsEnable)   cfgr |=  HSMCI_HSMODE_ENABLE;
000c96  2900              CMP      r1,#0
000c98  d002              BEQ      |L1.3232|
000c9a  12ec              ASRS     r4,r5,#11
000c9c  4320              ORRS     r0,r0,r4
000c9e  e004              B        |L1.3242|
                  |L1.3232|
;;;332        else            cfgr &= ~(U32)HSMCI_HSMODE_ENABLE;
000ca0  25ff              MOVS     r5,#0xff
000ca2  3501              ADDS     r5,#1
000ca4  0004              MOVS     r4,r0
000ca6  43ac              BICS     r4,r4,r5
000ca8  0020              MOVS     r0,r4
                  |L1.3242|
;;;333    	
;;;334    	rHSMCI_CFG(ch) = cfgr;
000caa  4c0f              LDR      r4,|L1.3304|
000cac  435c              MULS     r4,r3,r4
000cae  2501              MOVS     r5,#1
000cb0  04ed              LSLS     r5,r5,#19
000cb2  1b64              SUBS     r4,r4,r5
000cb4  6560              STR      r0,[r4,#0x54]
;;;335    }
000cb6  bd30              POP      {r4,r5,pc}
;;;336    
                          ENDP

                  MCI_SetBusWidth PROC
;;;342    //------------------------------------------------------------------------------
;;;343    void MCI_SetBusWidth(Mci *pMci, U8 busWidth)
000cb8  b570              PUSH     {r4-r6,lr}
;;;344    {
;;;345    	U8 ch = pMci-> mciChan;
000cba  7802              LDRB     r2,[r0,#0]
;;;346        U32 mciSdcr;
;;;347    
;;;348        mciSdcr = (rHSMCI_SDCR(ch) & ~((U32)HSMCI_SCDBUS));
000cbc  4c0a              LDR      r4,|L1.3304|
000cbe  4354              MULS     r4,r2,r4
000cc0  2501              MOVS     r5,#1
000cc2  04ed              LSLS     r5,r5,#19
000cc4  1b64              SUBS     r4,r4,r5
000cc6  68e4              LDR      r4,[r4,#0xc]
000cc8  25c0              MOVS     r5,#0xc0
000cca  43ac              BICS     r4,r4,r5
000ccc  0023              MOVS     r3,r4
;;;349    	rHSMCI_SDCR(ch) = (mciSdcr | busWidth);
000cce  001c              MOVS     r4,r3
000cd0  430c              ORRS     r4,r4,r1
000cd2  4d05              LDR      r5,|L1.3304|
000cd4  4355              MULS     r5,r2,r5
000cd6  2601              MOVS     r6,#1
000cd8  04f6              LSLS     r6,r6,#19
000cda  1bad              SUBS     r5,r5,r6
000cdc  60ec              STR      r4,[r5,#0xc]
;;;350    }
000cde  bd70              POP      {r4-r6,pc}
                  |L1.3296|
000ce0  0a0d00            DCB      "\n\r",0
000ce3  00                DCB      0
                  |L1.3300|
                          DCD      0x3e00ffff
                  |L1.3304|
                          DCD      0x0000c350
                  |L1.3308|
                          DCD      dmaLastLliNdx
                  |L1.3312|
                          DCD      LLI_MCI
                  |L1.3316|
                          DCD      xfredBlocks
                  |L1.3320|
                          DCD      0x00003c00
                  |L1.3324|
                          DCD      0x03f94068
                          ENDP

                  MCI_Close PROC
;;;357    //------------------------------------------------------------------------------
;;;358    void MCI_Close(Mci *pMci)
000d00  b570              PUSH     {r4-r6,lr}
;;;359    {
000d02  0004              MOVS     r4,r0
;;;360    	U8 ch = pMci-> mciChan;
000d04  7825              LDRB     r5,[r4,#0]
;;;361    	
;;;362    	rHSMCI_IDR(ch) = 0xFFFFFFFF;
000d06  2100              MOVS     r1,#0
000d08  43c9              MVNS     r1,r1
000d0a  480c              LDR      r0,|L1.3388|
000d0c  4368              MULS     r0,r5,r0
000d0e  2201              MOVS     r2,#1
000d10  04d2              LSLS     r2,r2,#19
000d12  1a80              SUBS     r0,r0,r2
000d14  6481              STR      r1,[r0,#0x48]
;;;363    	rHSMCI_CR(ch) = HSMCI_MCIDIS;
000d16  2102              MOVS     r1,#2
000d18  4808              LDR      r0,|L1.3388|
000d1a  4368              MULS     r0,r5,r0
000d1c  1a80              SUBS     r0,r0,r2
000d1e  6001              STR      r1,[r0,#0]
;;;364    	
;;;365    	// Disable the MCI peripheral clock.
;;;366    	if(ch == 0) PMC_PeriDis(PERIF_ID_MCI0);
000d20  2d00              CMP      r5,#0
000d22  d103              BNE      |L1.3372|
000d24  200b              MOVS     r0,#0xb
000d26  f7fffffe          BL       PMC_PeriDis
000d2a  e002              B        |L1.3378|
                  |L1.3372|
;;;367    	else PMC_PeriDis(PERIF_ID_MCI1);
000d2c  201d              MOVS     r0,#0x1d
000d2e  f7fffffe          BL       PMC_PeriDis
                  |L1.3378|
;;;368    
;;;369        // Initialize the MCI driver structure
;;;370        pMci->semaphore = 1;
000d32  2001              MOVS     r0,#1
000d34  72a0              STRB     r0,[r4,#0xa]
;;;371        pMci->pCommand = 0;
000d36  2000              MOVS     r0,#0
000d38  6060              STR      r0,[r4,#4]
;;;372    }
000d3a  bd70              POP      {r4-r6,pc}
;;;373    
                          ENDP

                  |L1.3388|
                          DCD      0x0000c350

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  LLI_MCI
                          %        100

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4d43495f          DCB      0x4d,0x43,0x49,0x5f
000004  53656e64          DCB      0x53,0x65,0x6e,0x64
000008  436f6d6d          DCB      0x43,0x6f,0x6d,0x6d
00000c  616e6428          DCB      0x61,0x6e,0x64,0x28
000010  293a2063          DCB      0x29,0x3a,0x20,0x63
000014  683a2030          DCB      0x68,0x3a,0x20,0x30
000018  78253038          DCB      0x78,0x25,0x30,0x38
00001c  582c206d          DCB      0x58,0x2c,0x20,0x6d
000020  63694965          DCB      0x63,0x69,0x49,0x65
000024  723a2030          DCB      0x72,0x3a,0x20,0x30
000028  78253038          DCB      0x78,0x25,0x30,0x38
00002c  582c206d          DCB      0x58,0x2c,0x20,0x6d
000030  63694d72          DCB      0x63,0x69,0x4d,0x72
000034  3a203078          DCB      0x3a,0x20,0x30,0x78
000038  25303858          DCB      0x25,0x30,0x38,0x58
00003c  2c207472          DCB      0x2c,0x20,0x74,0x72
000040  616e7353          DCB      0x61,0x6e,0x73,0x53
000044  697a653a          DCB      0x69,0x7a,0x65,0x3a
000048  20307825          DCB      0x20,0x30,0x78,0x25
00004c  3038582c          DCB      0x30,0x38,0x58,0x2c
000050  206d6369          DCB      0x20,0x6d,0x63,0x69
000054  426c6b72          DCB      0x42,0x6c,0x6b,0x72
000058  3a203078          DCB      0x3a,0x20,0x30,0x78
00005c  25303858          DCB      0x25,0x30,0x38,0x58
000060  2c206d63          DCB      0x2c,0x20,0x6d,0x63
000064  69446d61          DCB      0x69,0x44,0x6d,0x61
000068  3a203078          DCB      0x3a,0x20,0x30,0x78
00006c  25303858          DCB      0x25,0x30,0x38,0x58
000070  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  xfredBlocks
000000  ffff              DCW      0xffff
                  dmaLastLliNdx
000002  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=2

                          ARM
                  __ARM_common_switch8 PROC
000000  e55ec001          LDRB     r12,[lr,#-1]
000004  e153000c          CMP      r3,r12
000008  3a000001          BCC      |L17.20|
00000c  e7de300c          LDRB     r3,[lr,r12]
000010  ea000000          B        |L17.24|
                  |L17.20|
000014  e7de3003          LDRB     r3,[lr,r3]
                  |L17.24|
000018  e08ec083          ADD      r12,lr,r3,LSL #1
00001c  e12fff1c          BX       r12
                          ENDP

