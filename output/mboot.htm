<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\mboot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\mboot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 791]: Last Updated: Tue May 22 12:07:54 2012
<BR><P>
<H3>Maximum Stack Usage =       1952 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; LoadImage &rArr; MEDSdcard_Initialize &rArr; SD_Init &rArr; SdMmcEnum &rArr; SdMmcUpdateInformation &rArr; SdGetExtInformation &rArr; Acmd51 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[60]">BootmSet_ParamAddr</a>
 <LI><a href="#[61]">BootmSet_MachineID</a>
 <LI><a href="#[18f]">CP15_ReadID</a>
 <LI><a href="#[190]">CP15_ReaDcacheType</a>
 <LI><a href="#[191]">CP15_ReadTCMStatus</a>
 <LI><a href="#[6f]">CP15_ReadControl</a>
 <LI><a href="#[71]">CP15_WriteControl</a>
 <LI><a href="#[192]">CP15_ReadTTB</a>
 <LI><a href="#[193]">CP15_WriteTTB</a>
 <LI><a href="#[194]">CP15_ReadDomainAccessControl</a>
 <LI><a href="#[195]">CP15_WriteDomainAccessControl</a>
 <LI><a href="#[196]">CP15_InvalidateIDcache</a>
 <LI><a href="#[5d]">CP15_InvalidateIcache</a>
 <LI><a href="#[7a]">CP15_InvalidateDcache</a>
 <LI><a href="#[197]">CP15_PrefetchIcacheLine</a>
 <LI><a href="#[7e]">CP15_TestCleanInvalidateDcache</a>
 <LI><a href="#[5a]">CP15_CleanInvalidateDcacheIndex</a>
 <LI><a href="#[7f]">CP15_DrainWriteBuffer</a>
 <LI><a href="#[198]">CP15_WaitForInterrupt</a>
 <LI><a href="#[5f]">CP15_InvalidateTLB</a>
 <LI><a href="#[199]">CP15_InvalidateTLBMVA</a>
 <LI><a href="#[19a]">CP15_InvalidateITLB</a>
 <LI><a href="#[19b]">CP15_InvalidateITLBMVA</a>
 <LI><a href="#[19c]">CP15_InvalidateDTLB</a>
 <LI><a href="#[19d]">CP15_InvalidateDTLBMVA</a>
 <LI><a href="#[7b]">CP15_ReadDcacheLockdown</a>
 <LI><a href="#[7c]">CP15_WriteDcacheLockdown</a>
 <LI><a href="#[77]">CP15_ReadIcacheLockdown</a>
 <LI><a href="#[78]">CP15_WriteIcacheLockdown</a>
 <LI><a href="#[19e]">CP15_ReadTLBLockdown</a>
 <LI><a href="#[19f]">CP15_WriteTLBLockdown</a>
 <LI><a href="#[1a0]">CP15_ReadFCSE_PID</a>
 <LI><a href="#[1a1]">CP15_WriteFCSE_PID</a>
 <LI><a href="#[15]">HandlerReset</a>
 <LI><a href="#[12]">JumpStart</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4d]">scan_files</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">scan_files</a><BR>
 <LI><a href="#[6]">defaultIrqHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">defaultIrqHandler</a><BR>
 <LI><a href="#[5]">defaultFiqHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">defaultFiqHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">DMAD_Handler</a> from dmad.o(.text) referenced from dmad.o(.text)
 <LI><a href="#[13]">InitHW</a> from init_hw.o(.text) referenced from init_boot.o(STARTUP)
 <LI><a href="#[12]">JumpStart</a> from init_boot.o(STARTUP) referenced from init_boot.o(STARTUP)
 <LI><a href="#[a]">MCI0_IrqHandler</a> from medsdcard.o(.text) referenced 2 times from medsdcard.o(.text)
 <LI><a href="#[c]">MEDSdcard_Read</a> from medsdcard.o(.text) referenced from medsdcard.o(.text)
 <LI><a href="#[b]">MEDSdcard_Write</a> from medsdcard.o(.text) referenced from medsdcard.o(.text)
 <LI><a href="#[e]">MEDSdusb_Read</a> from medsdcard.o(.text) referenced from medsdcard.o(.text)
 <LI><a href="#[d]">MEDSdusb_Write</a> from medsdcard.o(.text) referenced from medsdcard.o(.text)
 <LI><a href="#[9]">SdMmcCallback</a> from medsdcard.o(.text) referenced from medsdcard.o(.text)
 <LI><a href="#[16]">__main</a> from __main.o(!!!main) referenced from init_boot.o(STARTUP)
 <LI><a href="#[f]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[11]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[10]">_sputc</a> from _sputc.o(.text) referenced from c89vsprintf.o(.text)
 <LI><a href="#[5]">defaultFiqHandler</a> from init_hw.o(.text) referenced from init_hw.o(.text)
 <LI><a href="#[6]">defaultIrqHandler</a> from init_hw.o(.text) referenced from init_hw.o(.text)
 <LI><a href="#[7]">defaultSpuriousHandler</a> from init_hw.o(.text) referenced from init_hw.o(.text)
 <LI><a href="#[4]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[16]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[19]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[146]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[147]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1a]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[129]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via BLX)
</UL>

<P><STRONG><a name="[1c]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[1e]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[20]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[21]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[22]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>

<P><STRONG><a name="[148]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[24]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[26]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[27]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[28]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[2a]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[2c]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[2e]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[2f]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[30]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[32]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[149]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[34]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[36]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[38]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[3a]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[14a]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[3c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[14b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[3e]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via BLX)
</UL>

<P><STRONG><a name="[14c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[40]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via BLX)
</UL>

<P><STRONG><a name="[14f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[150]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[41]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (via BLX)
</UL>

<P><STRONG><a name="[151]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[152]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[153]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[154]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[155]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[156]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[157]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[158]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[159]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[47]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[15e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[15f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[160]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[161]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[162]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[163]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[18]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[164]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[165]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[43]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[166]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[44]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[167]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[13a]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[46]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[168]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[48]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>

<P><STRONG><a name="[4a]"></a>Config_FPGA_PS_SPI</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_PeriEn
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_PeriDis
</UL>

<P><STRONG><a name="[62]"></a>mbootBanner</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = mbootBanner &rArr; ShellAllClear &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellAllClear
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952 + Unknown Stack Size
<LI>Call Chain = main &rArr; LoadImage &rArr; MEDSdcard_Initialize &rArr; SD_Init &rArr; SdMmcEnum &rArr; SdMmcUpdateInformation &rArr; SdGetExtInformation &rArr; Acmd51 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbootBanner
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[7]"></a>defaultSpuriousHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_hw.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> init_hw.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>defaultIrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_hw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_hw.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>defaultFiqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_hw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultFiqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultFiqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_hw.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>InitHW</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, init_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitHW &rArr; InitHW_DDRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW_Basic
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW_Clock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW_AIC
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW_GPIO
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW_DDRAM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW_RTC
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW_EMIF
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW_LED
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW_DBGU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_boot.o(STARTUP)
</UL>
<P><STRONG><a name="[80]"></a>DBGU_PutByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dbgu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTransferState
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
</UL>

<P><STRONG><a name="[84]"></a>DBGU_GetByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dbgu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellGetByte
</UL>

<P><STRONG><a name="[8a]"></a>DBGU_GetKey</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dbgu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellGetKey
</UL>

<P><STRONG><a name="[6e]"></a>CP15_IsIcacheEnabled</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl (via BLX)
</UL>

<P><STRONG><a name="[70]"></a>CP15_EnableIcache</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl (via BLX)
</UL>

<P><STRONG><a name="[5c]"></a>CP15_DisableIcache</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cp15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CP15_DisableIcache
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
</UL>

<P><STRONG><a name="[72]"></a>CP15_IsMMUEnabled</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableDcache
</UL>

<P><STRONG><a name="[73]"></a>CP15_EnableMMU</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl (via BLX)
</UL>

<P><STRONG><a name="[5e]"></a>CP15_DisableMMU</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cp15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CP15_DisableMMU
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
</UL>

<P><STRONG><a name="[74]"></a>CP15_IsDcacheEnabled</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl (via BLX)
</UL>

<P><STRONG><a name="[75]"></a>CP15_EnableDcache</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl (via BLX)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_IsMMUEnabled
</UL>

<P><STRONG><a name="[5b]"></a>CP15_DisableDcache</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cp15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CP15_DisableDcache
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ShutdownDcache
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
</UL>

<P><STRONG><a name="[76]"></a>CP15_LockIcache</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteIcacheLockdown (via BLX)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadIcacheLockdown (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_InvalidateIcache (via BLX)
</UL>

<P><STRONG><a name="[79]"></a>CP15_LockDcache</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteDcacheLockdown (via BLX)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadDcacheLockdown (via BLX)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_InvalidateDcache (via BLX)
</UL>

<P><STRONG><a name="[7d]"></a>CP15_ShutdownDcache</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_TestCleanInvalidateDcache (via BLX)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DrainWriteBuffer (via BLX)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_InvalidateTLB (via BLX)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableDcache
</UL>

<P><STRONG><a name="[4b]"></a>PMC_PeriEn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_FPGA_PS_SPI
</UL>

<P><STRONG><a name="[4c]"></a>PMC_PeriDis</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_FPGA_PS_SPI
</UL>

<P><STRONG><a name="[169]"></a>IRQ_PeriConf</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>IRQ_PeriEn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>IRQ_PeriDis</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>ResetOut</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>SFR_WR32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>SFR_RD32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>SFR_WR16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>SFR_RD16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>SFR_WR8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>SFR_RD8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
</UL>

<P><STRONG><a name="[51]"></a>ShellPutByte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ShellPutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_PutByte
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisplaySdStatus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisplayRegisterSCR
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisplayRegisterECSD
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisplayRegisterCSD
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisplayRegisterCID
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeedMode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcIdentify
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcUpdateInformation
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdGetExtInformation
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MmcGetExtInformation
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MmcSelectCard
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcSwitchHsMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTransferState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTranState
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd51
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd13
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd6
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_EraseAll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Write
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Read
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcCallback
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Write
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Read
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_BufferTransfer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_TransferController
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_Buffer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellGetString
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellSendString
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellAllClear
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
</UL>

<P><STRONG><a name="[52]"></a>ShellPrintf</STRONG> (Thumb, 52 bytes, Stack size 296 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisplaySdStatus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisplayRegisterSCR
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisplayRegisterECSD
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisplayRegisterCSD
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisplayRegisterCID
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeedMode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcIdentify
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcUpdateInformation
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdGetExtInformation
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MmcGetExtInformation
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MmcSelectCard
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcSwitchHsMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTransferState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTranState
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousRead
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd51
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd13
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd6
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_EraseAll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Write
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Read
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcCallback
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Write
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Read
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_BufferTransfer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_TransferController
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_Buffer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellGetString
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellAllClear
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbootBanner
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
</UL>

<P><STRONG><a name="[63]"></a>ShellAllClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ShellAllClear &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbootBanner
</UL>

<P><STRONG><a name="[82]"></a>ShellSendString</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
</UL>

<P><STRONG><a name="[83]"></a>ShellGetByte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_GetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellGetString
</UL>

<P><STRONG><a name="[85]"></a>ShellGetString</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellGetByte
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellGetIntNum
</UL>

<P><STRONG><a name="[86]"></a>ShellGetIntNum</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via BLX)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellGetString
</UL>

<P><STRONG><a name="[89]"></a>ShellGetKey</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_GetKey
</UL>

<P><STRONG><a name="[97]"></a>IRQ_ConfigureIT</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IRQ_ConfigureIT
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Initialize
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
</UL>

<P><STRONG><a name="[98]"></a>IRQ_EnableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Initialize
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
</UL>

<P><STRONG><a name="[172]"></a>IRQ_DisableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aic.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>disk_initialize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[bc]"></a>disk_status</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[8b]"></a>disk_read</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[8d]"></a>disk_write</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = disk_write &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[8e]"></a>disk_ioctl</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, diskio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[bf]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[173]"></a>DMA_Config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>DMA_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Initialize
</UL>

<P><STRONG><a name="[174]"></a>DMA_Disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>DMA_EnableIt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_EnableIt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_BufferTransfer
</UL>

<P><STRONG><a name="[92]"></a>DMA_DisableIt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Initialize
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Handler
</UL>

<P><STRONG><a name="[8f]"></a>DMA_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Initialize
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Handler
</UL>

<P><STRONG><a name="[d7]"></a>DMA_GetInterruptMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_EnableIt
</UL>

<P><STRONG><a name="[175]"></a>DMA_GetMaskedStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>DMA_EnableChannel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCommand
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_BufferTransfer
</UL>

<P><STRONG><a name="[176]"></a>DMA_EnableChannels</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>DMA_DisableChannel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_IsFinished
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_BufferTransfer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Initialize
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Handler
</UL>

<P><STRONG><a name="[177]"></a>DMA_DisableChannels</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>DMA_KeeponChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Handler
</UL>

<P><STRONG><a name="[90]"></a>DMA_ClearAutoMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Handler
</UL>

<P><STRONG><a name="[95]"></a>DMA_GetChannelStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_BufferTransfer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Initialize
</UL>

<P><STRONG><a name="[a1]"></a>DMA_SetSourceAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_TransferController
</UL>

<P><STRONG><a name="[a2]"></a>DMA_SetDestinationAddr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_TransferController
</UL>

<P><STRONG><a name="[9c]"></a>DMA_SetDescriptorAddr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_Buffer
</UL>

<P><STRONG><a name="[a0]"></a>DMA_SetSourceBufferSize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetSourceBufferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_TransferController
</UL>

<P><STRONG><a name="[9a]"></a>DMA_SetSourceBufferMode</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetSourceBufferMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_Buffer
</UL>

<P><STRONG><a name="[9b]"></a>DMA_SetDestBufferMode</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetDestBufferMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_Buffer
</UL>

<P><STRONG><a name="[cf]"></a>DMA_SetConfiguration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
</UL>

<P><STRONG><a name="[9d]"></a>DMA_SPIPconfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_Buffer
</UL>

<P><STRONG><a name="[9e]"></a>DMA_DPIPconfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Configure_Buffer
</UL>

<P><STRONG><a name="[178]"></a>DMA_SetFlowControl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>DMAD_Handler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dmad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMAD_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearAutoMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_KeeponChannel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableChannel
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableIt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmad.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>DMAD_Initialize</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dmad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMAD_Initialize &rArr; IRQ_ConfigureIT
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableChannel
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableIt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableIT
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ConfigureIT
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
</UL>

<P><STRONG><a name="[99]"></a>DMAD_Configure_Buffer</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dmad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DPIPconfiguration
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SPIPconfiguration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDestBufferMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSourceBufferMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDescriptorAddr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[9f]"></a>DMAD_Configure_TransferController</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, dmad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSourceBufferSize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDestinationAddr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSourceAddr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[a3]"></a>DMAD_BufferTransfer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dmad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableChannel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableIt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[a6]"></a>DMAD_IsFinished</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dmad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableChannel
</UL>

<P><STRONG><a name="[aa]"></a>get_fat</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[ab]"></a>put_fat</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[af]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[bb]"></a>chk_mounted</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = chk_mounted &rArr; check_fs &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[56]"></a>f_mount</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
</UL>

<P><STRONG><a name="[57]"></a>f_open</STRONG> (Thumb, 376 bytes, Stack size 80 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
</UL>

<P><STRONG><a name="[58]"></a>f_read</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
</UL>

<P><STRONG><a name="[c0]"></a>f_write</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[c1]"></a>f_sync</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[c2]"></a>f_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[c3]"></a>f_lseek</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[4e]"></a>f_opendir</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
</UL>

<P><STRONG><a name="[50]"></a>f_readdir</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
</UL>

<P><STRONG><a name="[c5]"></a>f_stat</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[c6]"></a>f_getfree</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[c7]"></a>f_truncate</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[c8]"></a>f_unlink</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[c9]"></a>f_mkdir</STRONG> (Thumb, 376 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[ca]"></a>f_chmod</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[cb]"></a>f_utime</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[cc]"></a>f_rename</STRONG> (Thumb, 284 bytes, Stack size 120 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[cd]"></a>f_mkfs</STRONG> (Thumb, 1354 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[d9]"></a>MCI_Reset</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, mci_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MCI_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler
</UL>

<P><STRONG><a name="[179]"></a>MCI_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mci_hs.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>MCI_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mci_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
</UL>

<P><STRONG><a name="[111]"></a>MCI_Close</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mci_hs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Stop
</UL>

<P><STRONG><a name="[d2]"></a>MCI_GetSpeed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mci_hs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>

<P><STRONG><a name="[d3]"></a>MCI_SetSpeed</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, mci_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = MCI_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
</UL>

<P><STRONG><a name="[10d]"></a>MCI_EnableHsMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mci_hs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcIdentify
</UL>

<P><STRONG><a name="[10e]"></a>MCI_SetBusWidth</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mci_hs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcIdentify
</UL>

<P><STRONG><a name="[d4]"></a>MCI_SendCommand</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, mci_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = MCI_SendCommand &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_EnableIt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
</UL>

<P><STRONG><a name="[17a]"></a>MCI_CheckBusy</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, mci_hs.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>MCI_Handler</STRONG> (Thumb, 474 bytes, Stack size 48 bytes, mci_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableChannel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInterruptMask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableIt
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI0_IrqHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IsTxComplete
</UL>

<P><STRONG><a name="[da]"></a>MCI_IsTxComplete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mci_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>

<P><STRONG><a name="[17b]"></a>MCI_FifoTransfer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mci_hs.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>MCI0_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, medsdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = MCI0_IrqHandler &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> medsdcard.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>MEDSdcard_Detect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, medsdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardIsConnected
</UL>

<P><STRONG><a name="[54]"></a>MEDSdcard_Initialize</STRONG> (Thumb, 626 bytes, Stack size 24 bytes, medsdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = MEDSdcard_Initialize &rArr; SD_Init &rArr; SdMmcEnum &rArr; SdMmcUpdateInformation &rArr; SdGetExtInformation &rArr; Acmd51 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePIO
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardIsProtected
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardIsConnected
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetSpeed
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Initialize
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableIT
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ConfigureIT
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
</UL>

<P><STRONG><a name="[e5]"></a>MEDSdusb_Initialize</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, medsdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_GetTotalSizeKB
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePIO
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardIsProtected
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardIsConnected
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetSpeed
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAD_Initialize
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableIT
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ConfigureIT
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[e7]"></a>MEDSdcard_EraseAll</STRONG> (Thumb, 98 bytes, Stack size 536 bytes, medsdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[e8]"></a>MEDSdcard_EraseBlock</STRONG> (Thumb, 36 bytes, Stack size 528 bytes, medsdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[17c]"></a>MEDSdcard_GetDriver</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, medsdcard.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>DecodeR1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdmmc_mci.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>DecodeR2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdmmc_mci.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>GetTransSpeedValue</STRONG> (Thumb, 122 bytes, Stack size 160 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GetTransSpeedValue &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via BLX)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MmcGetTranSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcUpdateInformation
</UL>

<P><STRONG><a name="[dd]"></a>SD_Read</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = SD_Read &rArr; MoveToTransferState &rArr; Cmd25 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTransferState
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousRead
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IsTxComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Read
</UL>

<P><STRONG><a name="[de]"></a>SD_Write</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = SD_Write &rArr; MoveToTransferState &rArr; Cmd25 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTransferState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousWrite
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IsTxComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Write
</UL>

<P><STRONG><a name="[db]"></a>SD_ReadBlock</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = SD_ReadBlock &rArr; MoveToTransferState &rArr; Cmd25 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTransferState
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Read
</UL>

<P><STRONG><a name="[dc]"></a>SD_WriteBlock</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = SD_WriteBlock &rArr; MoveToTransferState &rArr; Cmd25 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTransferState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_EraseBlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_EraseAll
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Write
</UL>

<P><STRONG><a name="[e3]"></a>SD_Init</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = SD_Init &rArr; SdMmcEnum &rArr; SdMmcUpdateInformation &rArr; SdGetExtInformation &rArr; Acmd51 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcIdentify
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd16
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pon
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
</UL>

<P><STRONG><a name="[110]"></a>SD_Stop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sdmmc_mci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd12
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Close
</UL>

<P><STRONG><a name="[112]"></a>SD_HighSpeedMode</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, sdmmc_mci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcUpdateInformation
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcSwitchHsMode
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTranState
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[17f]"></a>SD_BusWidth</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdmmc_mci.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>MMC_GetTotalSizeKB</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdmmc_mci.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
</UL>

<P><STRONG><a name="[180]"></a>MMC_GetBootSizeKB</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sdmmc_mci.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>SD_DisplayRegisterCID</STRONG> (Thumb, 624 bytes, Stack size 16 bytes, sdmmc_mci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[114]"></a>SD_DisplayRegisterCSD</STRONG> (Thumb, 3216 bytes, Stack size 16 bytes, sdmmc_mci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[115]"></a>SD_DisplayRegisterECSD</STRONG> (Thumb, 2208 bytes, Stack size 16 bytes, sdmmc_mci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[116]"></a>SD_DisplayRegisterSCR</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, sdmmc_mci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[117]"></a>SD_DisplaySdStatus</STRONG> (Thumb, 1298 bytes, Stack size 8 bytes, sdmmc_mci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[88]"></a>__rt_ctype_table</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellGetIntNum (via BLX)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via BLX)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via BLX)
</UL>

<P><STRONG><a name="[81]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>

<P><STRONG><a name="[87]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellGetIntNum
</UL>

<P><STRONG><a name="[4f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellGetIntNum
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransSpeedValue (via BLX)
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_EraseBlock (via BLX)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_EraseAll (via BLX)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage (via BLX)
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
</UL>

<P><STRONG><a name="[3f]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common (via BLX)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via BLX)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul (via BLX)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via BLX)
</UL>

<P><STRONG><a name="[188]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[11d]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[11e]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11f]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[25]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
</UL>

<P><STRONG><a name="[1b]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[118]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[10]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[2d]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[126]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[29]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[31]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[127]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[2b]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[33]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[1d]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[122]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via BLX)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[11a]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via BLX)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[125]"></a>_ll_udiv10</STRONG> (ARM, 152 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via BLX)
</UL>

<P><STRONG><a name="[121]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[18a]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>_printf_fp_dec_real</STRONG> (Thumb, 618 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via BLX)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[133]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[35]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[37]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[135]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[39]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[3b]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[12a]"></a>_strtoul</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, _strtoul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[124]"></a>_wcrtomb</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[144]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[120]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via BLX)
</UL>

<P><STRONG><a name="[132]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[137]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[12c]"></a>_btod_etento</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via BLX)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[45]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[49]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via BLX)
</UL>

<P><STRONG><a name="[18b]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>__rt_fp_status_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[18d]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler (via BLX)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCommand (via BLX)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetSpeed (via BLX)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSpeed (via BLX)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P (via BLX)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M (via BLX)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs (via BLX)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek (via BLX)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted (via BLX)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read (via BLX)
</UL>

<P><STRONG><a name="[12d]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[140]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[13f]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[141]"></a>__btod_div_common</STRONG> (ARM, 712 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[142]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[12e]"></a>_btod_ediv</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[12f]"></a>_btod_emul</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[143]"></a>__btod_mult_common</STRONG> (ARM, 612 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[60]"></a>BootmSet_ParamAddr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init_boot.o(bootm_init))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage (via BLX)
</UL>

<P><STRONG><a name="[61]"></a>BootmSet_MachineID</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init_boot.o(bootm_init))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage (via BLX)
</UL>

<P><STRONG><a name="[18f]"></a>CP15_ReadID</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[190]"></a>CP15_ReaDcacheType</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[191]"></a>CP15_ReadTCMStatus</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[6f]"></a>CP15_ReadControl</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableDcache (via BLX)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_IsDcacheEnabled (via BLX)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableMMU (via BLX)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_IsMMUEnabled (via BLX)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableIcache (via BLX)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_IsIcacheEnabled (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableMMU (via BLX)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableIcache (via BLX)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableDcache (via BLX)
</UL>

<P><STRONG><a name="[71]"></a>CP15_WriteControl</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableDcache (via BLX)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableMMU (via BLX)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableIcache (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableMMU (via BLX)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableIcache (via BLX)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableDcache (via BLX)
</UL>

<P><STRONG><a name="[192]"></a>CP15_ReadTTB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[193]"></a>CP15_WriteTTB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[194]"></a>CP15_ReadDomainAccessControl</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[195]"></a>CP15_WriteDomainAccessControl</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[196]"></a>CP15_InvalidateIDcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[5d]"></a>CP15_InvalidateIcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockIcache (via BLX)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage (via BLX)
</UL>

<P><STRONG><a name="[7a]"></a>CP15_InvalidateDcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockDcache (via BLX)
</UL>

<P><STRONG><a name="[197]"></a>CP15_PrefetchIcacheLine</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[7e]"></a>CP15_TestCleanInvalidateDcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_TestCleanInvalidateDcache
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_TestCleanInvalidateDcache
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ShutdownDcache (via BLX)
</UL>

<P><STRONG><a name="[5a]"></a>CP15_CleanInvalidateDcacheIndex</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage (via BLX)
</UL>

<P><STRONG><a name="[7f]"></a>CP15_DrainWriteBuffer</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ShutdownDcache (via BLX)
</UL>

<P><STRONG><a name="[198]"></a>CP15_WaitForInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[5f]"></a>CP15_InvalidateTLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ShutdownDcache (via BLX)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage (via BLX)
</UL>

<P><STRONG><a name="[199]"></a>CP15_InvalidateTLBMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[19a]"></a>CP15_InvalidateITLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[19b]"></a>CP15_InvalidateITLBMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[19c]"></a>CP15_InvalidateDTLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[19d]"></a>CP15_InvalidateDTLBMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[7b]"></a>CP15_ReadDcacheLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockDcache (via BLX)
</UL>

<P><STRONG><a name="[7c]"></a>CP15_WriteDcacheLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockDcache (via BLX)
</UL>

<P><STRONG><a name="[77]"></a>CP15_ReadIcacheLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockIcache (via BLX)
</UL>

<P><STRONG><a name="[78]"></a>CP15_WriteIcacheLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockIcache (via BLX)
</UL>

<P><STRONG><a name="[19e]"></a>CP15_ReadTLBLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[19f]"></a>CP15_WriteTLBLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[1a0]"></a>CP15_ReadFCSE_PID</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[1a1]"></a>CP15_WriteFCSE_PID</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_init.o(cp15), UNUSED)

<P><STRONG><a name="[d8]"></a>__ARM_common_switch8</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mci_hs.o(i.__ARM_common_switch8))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler (via BLX)
</UL>

<P><STRONG><a name="[131]"></a>__ARM_fpclassify</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
</UL>

<P><STRONG><a name="[128]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f]"></a>_get_lc_ctype</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>_get_lc_numeric</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2 (via BLX)
</UL>

<P><STRONG><a name="[3d]"></a>_fp_init</STRONG> (ARM, 20 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[1a2]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[1f]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1a3]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)

<P><STRONG><a name="[15]"></a>HandlerReset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init_boot.o(STARTUP))
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4d]"></a>scan_files</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = scan_files &rArr;  scan_files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImage
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
</UL>

<P><STRONG><a name="[53]"></a>LoadImage</STRONG> (Thumb, 556 bytes, Stack size 1160 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952 + Unknown Stack Size
<LI>Call Chain = LoadImage &rArr; MEDSdcard_Initialize &rArr; SD_Init &rArr; SdMmcEnum &rArr; SdMmcUpdateInformation &rArr; SdGetExtInformation &rArr; Acmd51 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFR_RD8
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_InvalidateTLB (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_InvalidateIcache (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableMMU
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableIcache
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableDcache
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_CleanInvalidateDcacheIndex (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootmSet_ParamAddr (via BLX)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootmSet_MachineID (via BLX)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>SFR_DELAY</STRONG> (ARM, 48 bytes, Stack size 0 bytes, init_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW_Clock (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW_DDRAM (via BLX)
</UL>

<P><STRONG><a name="[6d]"></a>InitHW_DBGU</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, init_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW
</UL>

<P><STRONG><a name="[6c]"></a>InitHW_LED</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, init_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitHW_LED
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW
</UL>

<P><STRONG><a name="[6b]"></a>InitHW_EMIF</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW
</UL>

<P><STRONG><a name="[6a]"></a>InitHW_RTC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW
</UL>

<P><STRONG><a name="[64]"></a>InitHW_DDRAM</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, init_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitHW_DDRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFR_DELAY (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW
</UL>

<P><STRONG><a name="[69]"></a>InitHW_GPIO</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, init_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitHW_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW
</UL>

<P><STRONG><a name="[68]"></a>InitHW_AIC</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, init_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitHW_AIC
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW
</UL>

<P><STRONG><a name="[66]"></a>InitHW_Clock</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, init_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitHW_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFR_DELAY (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW
</UL>

<P><STRONG><a name="[67]"></a>InitHW_Basic</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, init_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHW
</UL>

<P><STRONG><a name="[12]"></a>JumpStart</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init_boot.o(STARTUP))
<BR>[Address Reference Count : 1]<UL><LI> init_boot.o(STARTUP)
</UL>
<P><STRONG><a name="[b5]"></a>mem_cpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[a9]"></a>mem_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[b2]"></a>mem_cmp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[b8]"></a>chk_chr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[a7]"></a>move_window</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[a8]"></a>sync</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[ac]"></a>remove_chain</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[ad]"></a>create_chain</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[ae]"></a>dir_seek</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = dir_seek &rArr; get_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[b0]"></a>dir_next</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[b1]"></a>dir_find</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[b3]"></a>dir_read</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[b4]"></a>dir_register</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[b6]"></a>dir_remove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[b7]"></a>create_name</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[c4]"></a>get_fileinfo</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_fileinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[b9]"></a>follow_path</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[ba]"></a>check_fs</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = check_fs &rArr; disk_read &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[be]"></a>validate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[d0]"></a>AT91F_Prepare_Multiple_Transfer</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, mci_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AT91F_Prepare_Multiple_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_M2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH_MCI_P2M
</UL>

<P><STRONG><a name="[ce]"></a>DMACH_MCI_P2M</STRONG> (Thumb, 346 bytes, Stack size 88 bytes, mci_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_Prepare_Multiple_Transfer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfiguration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDestBufferMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSourceBufferMode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSourceBufferSize
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDescriptorAddr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDestinationAddr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSourceAddr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableChannel
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Handler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCommand
</UL>

<P><STRONG><a name="[d1]"></a>DMACH_MCI_M2P</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, mci_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = DMACH_MCI_M2P &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_Prepare_Multiple_Transfer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfiguration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDestBufferMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSourceBufferMode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSourceBufferSize
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDescriptorAddr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDestinationAddr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSourceAddr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableChannel
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCommand
</UL>

<P><STRONG><a name="[d5]"></a>DMACH_EnableIt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mci_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMACH_EnableIt
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInterruptMask
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableIt
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCommand
</UL>

<P><STRONG><a name="[e0]"></a>CardIsConnected</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, medsdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Detect
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
</UL>

<P><STRONG><a name="[e4]"></a>CardIsProtected</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, medsdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
</UL>

<P><STRONG><a name="[e1]"></a>ConfigurePIO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, medsdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdusb_Initialize
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEDSdcard_Initialize
</UL>

<P><STRONG><a name="[c]"></a>MEDSdcard_Read</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, medsdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = MEDSdcard_Read &rArr; SD_ReadBlock &rArr; MoveToTransferState &rArr; Cmd25 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> medsdcard.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>MEDSdcard_Write</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, medsdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = MEDSdcard_Write &rArr; SD_WriteBlock &rArr; MoveToTransferState &rArr; Cmd25 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> medsdcard.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>SdMmcCallback</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, medsdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SdMmcCallback &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> medsdcard.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>MEDSdusb_Read</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, medsdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = MEDSdusb_Read &rArr; SD_Read &rArr; MoveToTransferState &rArr; Cmd25 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> medsdcard.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>MEDSdusb_Write</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, medsdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = MEDSdusb_Write &rArr; SD_Write &rArr; MoveToTransferState &rArr; Cmd25 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> medsdcard.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>MmcGetTranSpeed</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MmcGetTranSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransSpeedValue
</UL>

<P><STRONG><a name="[ee]"></a>ResetCommand</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdmmc_mci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousWrite
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousRead
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd51
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd41
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd13
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd6
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd55
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd25
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd18
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd16
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd13
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd12
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd9
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd8
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd6
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd7
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd3
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd1
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd0
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pon
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[10b]"></a>Delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdmmc_mci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcIdentify
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcUpdateInformation
</UL>

<P><STRONG><a name="[ec]"></a>SendCommand</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IsTxComplete
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCommand
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousWrite
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousRead
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd51
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd41
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd13
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd6
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd55
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd25
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd18
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd16
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd13
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd12
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd9
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd8
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd6
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd7
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd3
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd1
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd0
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pon
</UL>

<P><STRONG><a name="[ed]"></a>Pon</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Pon &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[ef]"></a>Cmd0</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Cmd0 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwReset
</UL>

<P><STRONG><a name="[f0]"></a>Cmd1</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Cmd1 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcIdentify
</UL>

<P><STRONG><a name="[f1]"></a>Cmd2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Cmd2 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
</UL>

<P><STRONG><a name="[f2]"></a>Cmd3</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Cmd3 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
</UL>

<P><STRONG><a name="[f3]"></a>Cmd7</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Cmd7 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MmcSelectCard
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTranState
</UL>

<P><STRONG><a name="[f4]"></a>Cmd6</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Cmd6 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcSwitchHsMode
</UL>

<P><STRONG><a name="[f5]"></a>Cmd8</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Cmd8 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcIdentify
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MmcGetExtInformation
</UL>

<P><STRONG><a name="[f6]"></a>Cmd9</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Cmd9 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcUpdateInformation
</UL>

<P><STRONG><a name="[f7]"></a>Cmd12</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Cmd12 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTransferState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTranState
</UL>

<P><STRONG><a name="[f8]"></a>Cmd13</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Cmd13 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MmcSelectCard
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTransferState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTranState
</UL>

<P><STRONG><a name="[f9]"></a>Cmd16</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Cmd16 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[fa]"></a>Cmd18</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Cmd18 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTransferState
</UL>

<P><STRONG><a name="[fb]"></a>Cmd25</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Cmd25 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveToTransferState
</UL>

<P><STRONG><a name="[fc]"></a>Cmd55</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd51
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd41
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd13
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd6
</UL>

<P><STRONG><a name="[fd]"></a>Acmd6</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Acmd6 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd55
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
</UL>

<P><STRONG><a name="[fe]"></a>Acmd13</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Acmd13 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd55
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdGetExtInformation
</UL>

<P><STRONG><a name="[ff]"></a>Acmd41</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Acmd41 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd55
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcIdentify
</UL>

<P><STRONG><a name="[100]"></a>Acmd51</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Acmd51 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd55
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdGetExtInformation
</UL>

<P><STRONG><a name="[101]"></a>ContinuousRead</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = ContinuousRead &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>

<P><STRONG><a name="[102]"></a>ContinuousWrite</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = ContinuousWrite &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
</UL>

<P><STRONG><a name="[103]"></a>SwReset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = SwReset &rArr; Cmd0 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd0
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcIdentify
</UL>

<P><STRONG><a name="[104]"></a>MoveToTranState</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, sdmmc_mci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd13
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd12
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd7
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeedMode
</UL>

<P><STRONG><a name="[105]"></a>MoveToTransferState</STRONG> (Thumb, 758 bytes, Stack size 48 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = MoveToTransferState &rArr; Cmd25 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd25
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd18
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd13
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd12
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_PutByte
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>

<P><STRONG><a name="[106]"></a>SdMmcSwitchHsMode</STRONG> (Thumb, 482 bytes, Stack size 88 bytes, sdmmc_mci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd6
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeedMode
</UL>

<P><STRONG><a name="[107]"></a>MmcSelectCard</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = MmcSelectCard &rArr; Cmd13 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd13
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd7
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcUpdateInformation
</UL>

<P><STRONG><a name="[108]"></a>MmcGetExtInformation</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = MmcGetExtInformation &rArr; Cmd8 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd8
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcUpdateInformation
</UL>

<P><STRONG><a name="[109]"></a>SdGetExtInformation</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = SdGetExtInformation &rArr; Acmd51 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd51
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd13
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcUpdateInformation
</UL>

<P><STRONG><a name="[10a]"></a>SdMmcUpdateInformation</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = SdMmcUpdateInformation &rArr; SdGetExtInformation &rArr; Acmd51 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransSpeedValue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdGetExtInformation
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MmcGetExtInformation
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MmcSelectCard
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd9
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeedMode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcEnum
</UL>

<P><STRONG><a name="[10c]"></a>SdMmcIdentify</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = SdMmcIdentify &rArr; SwReset &rArr; Cmd0 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwReset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd41
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd8
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBusWidth
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_EnableHsMode
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[10f]"></a>SdMmcEnum</STRONG> (Thumb, 1290 bytes, Stack size 104 bytes, sdmmc_mci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = SdMmcEnum &rArr; SdMmcUpdateInformation &rArr; SdGetExtInformation &rArr; Acmd51 &rArr; Cmd55 &rArr; SendCommand &rArr; MCI_IsTxComplete &rArr; MCI_Handler &rArr; DMACH_MCI_P2M &rArr; ShellPrintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdMmcUpdateInformation
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MmcSelectCard
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acmd6
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd9
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd6
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd3
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBusWidth
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_EnableHsMode
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPutByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[13d]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[13c]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[13b]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[13e]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[11]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>_fp_digits</STRONG> (Thumb, 410 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via BLX)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via BLX)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via BLX)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via BLX)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[139]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[23]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[134]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[136]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
