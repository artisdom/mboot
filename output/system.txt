; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave --gnu -o.\output\system.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\system.d --cpu=ARM926EJ-S --apcs=interwork -O1 -I.\atmel -I.\ -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Atmel\SAM9M10 -Dat91sam9m10 -Dddram -DNOFPUT -DTRACE_LEVEL=4 --omf_browse=.\output\system.crf system.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PMC_PeriEn PROC
;;;279    void
;;;280    PMC_PeriEn(U32 id)
000000  281f              CMP      r0,#0x1f
;;;281    {
;;;282    	if(id > 31) return;
000002  d807              BHI      |L1.20|
;;;283    
;;;284    	if(!((rPMC_PCSR >> id) & 0x1))
000004  4924              LDR      r1,|L1.152|
000006  698a              LDR      r2,[r1,#0x18]
000008  40c2              LSRS     r2,r2,r0
00000a  07d2              LSLS     r2,r2,#31
00000c  d102              BNE      |L1.20|
;;;285    	{
;;;286    		rPMC_PCER = (0x1 << id);
00000e  2201              MOVS     r2,#1
000010  4082              LSLS     r2,r2,r0
000012  610a              STR      r2,[r1,#0x10]
                  |L1.20|
;;;287    	}
;;;288    }
000014  4770              BX       lr
;;;289    
                          ENDP

                  PMC_PeriDis PROC
;;;296    void
;;;297    PMC_PeriDis(U32 id)
000016  281f              CMP      r0,#0x1f
;;;298    {
;;;299    	if(id > 31) return;
000018  d807              BHI      |L1.42|
;;;300    	
;;;301    	if((rPMC_PCSR >> id) & 0x1)
00001a  491f              LDR      r1,|L1.152|
00001c  698a              LDR      r2,[r1,#0x18]
00001e  40c2              LSRS     r2,r2,r0
000020  07d2              LSLS     r2,r2,#31
000022  d002              BEQ      |L1.42|
;;;302    	{
;;;303    		rPMC_PCDR = (0x1 << id);
000024  2201              MOVS     r2,#1
000026  4082              LSLS     r2,r2,r0
000028  614a              STR      r2,[r1,#0x14]
                  |L1.42|
;;;304    	}
;;;305    }
00002a  4770              BX       lr
;;;306    
                          ENDP

                  IRQ_PeriConf PROC
;;;326    void
;;;327    IRQ_PeriConf(U32 id, U32 mode, void( *handler )( void ))
00002c  b530              PUSH     {r4,r5,lr}
;;;328    {
;;;329    	if(id > 31) return;
00002e  281f              CMP      r0,#0x1f
000030  d80d              BHI      |L1.78|
;;;330    	rAIC_IDCR = (0x1 << id);
000032  2301              MOVS     r3,#1
000034  4c19              LDR      r4,|L1.156|
000036  4083              LSLS     r3,r3,r0
000038  6263              STR      r3,[r4,#0x24]
;;;331    	rAIC_SMR(id) = mode;
00003a  2501              MOVS     r5,#1
00003c  0080              LSLS     r0,r0,#2
00003e  032d              LSLS     r5,r5,#12
000040  1b45              SUBS     r5,r0,r5
000042  6029              STR      r1,[r5,#0]
;;;332    	rAIC_SVR(id) = (U32) handler;
000044  211f              MOVS     r1,#0x1f
000046  01c9              LSLS     r1,r1,#7
000048  1a40              SUBS     r0,r0,r1
00004a  6002              STR      r2,[r0,#0]
;;;333    	rAIC_ICCR = (0x1 << id);
00004c  62a3              STR      r3,[r4,#0x28]
                  |L1.78|
;;;334    }
00004e  bd30              POP      {r4,r5,pc}
;;;335    
                          ENDP

                  IRQ_PeriEn PROC
;;;340    void
;;;341    IRQ_PeriEn(U32 id)
000050  281f              CMP      r0,#0x1f
;;;342    {
;;;343    	if(id > 31) return;
000052  d803              BHI      |L1.92|
;;;344    	rAIC_IECR = (0x1 << id);
000054  2101              MOVS     r1,#1
000056  4081              LSLS     r1,r1,r0
000058  4810              LDR      r0,|L1.156|
00005a  6201              STR      r1,[r0,#0x20]
                  |L1.92|
;;;345    }
00005c  4770              BX       lr
;;;346    
                          ENDP

                  IRQ_PeriDis PROC
;;;351    void
;;;352    IRQ_PeriDis(U32 id)
00005e  281f              CMP      r0,#0x1f
;;;353    {
;;;354    	if(id > 31) return;
000060  d803              BHI      |L1.106|
;;;355    	rAIC_IDCR = (0x1 << id);
000062  2101              MOVS     r1,#1
000064  4081              LSLS     r1,r1,r0
000066  480d              LDR      r0,|L1.156|
000068  6241              STR      r1,[r0,#0x24]
                  |L1.106|
;;;356    }
00006a  4770              BX       lr
;;;357    
                          ENDP

                  ResetOut PROC
;;;363    void
;;;364    ResetOut(BOOL reset)
00006c  2201              MOVS     r2,#1
;;;365    {
;;;366    	if(reset) rPIOA_CODR = (1<<29);
00006e  490c              LDR      r1,|L1.160|
000070  0752              LSLS     r2,r2,#29
000072  2800              CMP      r0,#0
000074  d001              BEQ      |L1.122|
000076  634a              STR      r2,[r1,#0x34]
;;;367    	else rPIOA_SODR = (1<<29);
;;;368    }
000078  4770              BX       lr
                  |L1.122|
00007a  630a              STR      r2,[r1,#0x30]         ;367
00007c  4770              BX       lr
;;;369    
                          ENDP

                  SFR_WR32 PROC
;;;375    void
;;;376    SFR_WR32(U32 ioaddr, U32 data)
00007e  6001              STR      r1,[r0,#0]
;;;377    {
;;;378    	*((volatile U32 *)(ioaddr)) = data;
;;;379    }
000080  4770              BX       lr
;;;380    
                          ENDP

                  SFR_RD32 PROC
;;;386    U32
;;;387    SFR_RD32(U32 ioaddr)
000082  6800              LDR      r0,[r0,#0]
;;;388    {
;;;389    	return *((volatile U32 *)(ioaddr));
;;;390    }
000084  4770              BX       lr
;;;391    
                          ENDP

                  SFR_WR16 PROC
;;;397    void
;;;398    SFR_WR16(U32 ioaddr, U16 data)
000086  8001              STRH     r1,[r0,#0]
;;;399    {
;;;400    	*((volatile U16 *)(ioaddr)) = data;
;;;401    }
000088  4770              BX       lr
;;;402    
                          ENDP

                  SFR_RD16 PROC
;;;408    U16
;;;409    SFR_RD16(U32 ioaddr)
00008a  8800              LDRH     r0,[r0,#0]
;;;410    {
;;;411    	return *((volatile U16 *)(ioaddr));
;;;412    }
00008c  4770              BX       lr
;;;413    
                          ENDP

                  SFR_WR8 PROC
;;;419    void
;;;420    SFR_WR8(U32 ioaddr, U8 data)
00008e  7001              STRB     r1,[r0,#0]
;;;421    {
;;;422    	*((volatile U8 *)(ioaddr)) = data;
;;;423    }
000090  4770              BX       lr
;;;424    
                          ENDP

                  SFR_RD8 PROC
;;;430    U8
;;;431    SFR_RD8(U32 ioaddr)
000092  7800              LDRB     r0,[r0,#0]
;;;432    {
;;;433    	return *((volatile U8 *)(ioaddr));
;;;434    }
000094  4770              BX       lr
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      0xfffffc00
                  |L1.156|
                          DCD      0xfffff100
                  |L1.160|
                          DCD      0xfffff200
