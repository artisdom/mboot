; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave --gnu -o.\output\sdmmc_mci.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\sdmmc_mci.d --cpu=ARM926EJ-S --apcs=interwork -O1 -I.\atmel -I.\ -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Atmel\SAM9M10 -Dat91sam9m10 -Dddram -DNOFPUT -DTRACE_LEVEL=4 --omf_browse=.\output\sdmmc_mci.crf atmel\sdmmc_mci.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DecodeR1 PROC
;;;531    //------------------------------------------------------------------------------
;;;532    void DecodeR1(unsigned char R1)
000000  4770              BX       lr
;;;533    {
;;;534        if( (R1 & R1_SPI_IDLE)==R1_SPI_IDLE) {
;;;535            TRACE_DEBUG("R1_SPI_IDLE\n\r");
;;;536        }
;;;537        if( (R1 & R1_SPI_ERASE_RESET)==R1_SPI_ERASE_RESET) {
;;;538            TRACE_DEBUG("R1_SPI_ERASE_RESET\n\r");
;;;539        }
;;;540        if( (R1 & R1_SPI_ILLEGAL_COMMAND)==R1_SPI_ILLEGAL_COMMAND) {
;;;541            TRACE_DEBUG("R1_SPI_ILLEGAL_COMMAND\n\r");
;;;542        }
;;;543        if( (R1 & R1_SPI_COM_CRC)==R1_SPI_COM_CRC) {
;;;544            TRACE_DEBUG("R1_SPI_COM_CRC\n\r");
;;;545        }
;;;546        if( (R1 & R1_SPI_ERASE_SEQ)==R1_SPI_ERASE_SEQ) {
;;;547            TRACE_DEBUG("R1_SPI_ERASE_SEQ\n\r");
;;;548        }
;;;549        if( (R1 & R1_SPI_ADDRESS)==R1_SPI_ADDRESS) {
;;;550            TRACE_DEBUG("R1_SPI_ADDRESS\n\r");
;;;551        }
;;;552        if( (R1 & R1_SPI_PARAMETER)==R1_SPI_PARAMETER) {
;;;553            TRACE_DEBUG("R1_SPI_PARAMETER\n\r");
;;;554        }
;;;555    }
;;;556    
                          ENDP

                  DecodeR2 PROC
;;;560    //------------------------------------------------------------------------------
;;;561    void DecodeR2(unsigned char R2)
000002  4770              BX       lr
;;;562    {
;;;563        if( (R2 & R2_SPI_CARD_LOCKED)==R2_SPI_CARD_LOCKED) {
;;;564            TRACE_DEBUG("R2_SPI_CARD_LOCKED\n\r");
;;;565        }
;;;566        if( (R2 & R2_SPI_WP_ERASE_SKIP)==R2_SPI_WP_ERASE_SKIP) {
;;;567            TRACE_DEBUG("R2_SPI_WP_ERASE_SKIP/R2_SPI_LOCK_UNLOCK_FAIL\n\r");
;;;568        }
;;;569        if( (R2 & R2_SPI_ERROR)==R2_SPI_ERROR) {
;;;570            TRACE_DEBUG("R2_SPI_ERROR\n\r");
;;;571        }
;;;572        if( (R2 & R2_SPI_CC_ERROR)==R2_SPI_CC_ERROR) {
;;;573            TRACE_DEBUG("R2_SPI_CC_ERROR\n\r");
;;;574        }
;;;575        if( (R2 & R2_SPI_CARD_ECC_ERROR)==R2_SPI_CARD_ECC_ERROR) {
;;;576            TRACE_DEBUG("R2_SPI_CARD_ECC_ERROR\n\r");
;;;577        }
;;;578        if( (R2 & R2_SPI_WP_VIOLATION)==R2_SPI_WP_VIOLATION) {
;;;579            TRACE_DEBUG("R2_SPI_WP_VIOLATION\n\r");
;;;580        }
;;;581        if( (R2 & R2_SPI_ERASE_PARAM)==R2_SPI_ERASE_PARAM) {
;;;582            TRACE_DEBUG("R2_SPI_ERASE_PARAM\n\r");
;;;583        }
;;;584        if( (R2 & R2_SPI_OUT_OF_RANGE)==R2_SPI_OUT_OF_RANGE) {
;;;585            TRACE_DEBUG("R2_SPI_OUT_OF_RANGE/R2_SPI_CSD_OVERWRITE\n\r");
;;;586        }
;;;587    }
;;;588    
                          ENDP

                  MmcGetTranSpeed PROC
;;;595    //------------------------------------------------------------------------------
;;;596    static unsigned int MmcGetTranSpeed(unsigned int tranSpeed,
000004  b510              PUSH     {r4,lr}
;;;597                                const unsigned int* unitList, unsigned int nbUnits,
;;;598                                const unsigned int* codeList)
;;;599    {
000006  0004              MOVS     r4,r0
;;;600        unsigned int unit, value;
;;;601        unit = tranSpeed & 0x7;
000008  0760              LSLS     r0,r4,#29
00000a  0f40              LSRS     r0,r0,#29
;;;602        if (unit < nbUnits) unit = unitList[unit];
00000c  4290              CMP      r0,r2
00000e  d209              BCS      |L1.36|
000010  0080              LSLS     r0,r0,#2
000012  5808              LDR      r0,[r1,r0]
;;;603        else                return 0;
;;;604        value = (tranSpeed >> 3) & 0xF;
000014  0661              LSLS     r1,r4,#25
000016  0f09              LSRS     r1,r1,#28
;;;605        if (value < 16)   value = codeList[value];
000018  2910              CMP      r1,#0x10
00001a  d205              BCS      |L1.40|
00001c  0089              LSLS     r1,r1,#2
00001e  5859              LDR      r1,[r3,r1]
;;;606        else                return 0;
;;;607        return (unit * value);
000020  4348              MULS     r0,r1,r0
;;;608    }
000022  bd10              POP      {r4,pc}
                  |L1.36|
000024  2000              MOVS     r0,#0                 ;603
000026  bd10              POP      {r4,pc}
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;606
00002a  bd10              POP      {r4,pc}
;;;609    
                          ENDP

                  GetTransSpeedValue PROC
;;;613    //------------------------------------------------------------------------------
;;;614    void GetTransSpeedValue(SdCard *pSd)
00002c  b530              PUSH     {r4,r5,lr}
;;;615    {
00002e  b0a5              SUB      sp,sp,#0x94
000030  0005              MOVS     r5,r0
;;;616        // CSD register, TRANS_SPEED bit
;;;617        const unsigned int units[4] = {10, 100, 1000, 10000 }; // *Kbit/s 
000032  49fa              LDR      r1,|L1.1052|
000034  ac21              ADD      r4,sp,#0x84
000036  0008              MOVS     r0,r1
000038  c80d              LDM      r0,{r0,r2,r3}
00003a  68c9              LDR      r1,[r1,#0xc]  ; <Data1>
00003c  c40d              STM      r4!,{r0,r2,r3}
00003e  9124              STR      r1,[sp,#0x90]
;;;618        const unsigned int values_emmc[16] = {0, 10, 12, 13, 15, 20,
000040  2240              MOVS     r2,#0x40
000042  49f6              LDR      r1,|L1.1052|
000044  3110              ADDS     r1,r1,#0x10
000046  a811              ADD      r0,sp,#0x44
000048  f7fffffe          BL       __aeabi_memcpy4
;;;619                                              26, 30, 35, 40, 45, 52,
;;;620                                              55, 60, 70, 80};
;;;621        const unsigned int values_sdmmc[16] = {0, 10, 12, 13, 15, 20,
00004c  2240              MOVS     r2,#0x40
00004e  49f3              LDR      r1,|L1.1052|
000050  3150              ADDS     r1,r1,#0x50
000052  a801              ADD      r0,sp,#4
000054  f7fffffe          BL       __aeabi_memcpy4
;;;622                                               25, 30, 35, 40, 45, 50,
;;;623                                               55, 60, 70, 80};
;;;624      #if 0
;;;625        unsigned int unit, value;
;;;626        unit = (SD_CSD_TRAN_SPEED(pSd) & 0x7);
;;;627        if(unit < 4)    unit  = units[unit];
;;;628        else            return;
;;;629        value = (SD_CSD_TRAN_SPEED(pSd) >> 3) & 0xF;
;;;630        if (value < 16) {
;;;631            if (pSd->cardType >= CARD_MMC && SD_CID_BGA(pSd) == 1) {
;;;632                value = values_emmc[value];
;;;633            }
;;;634            else
;;;635                value = values_sdmmc[value];
;;;636        }
;;;637        else            return;
;;;638        pSd->transSpeed = (unit * value);
;;;639      #else
;;;640        pSd->transSpeed = MmcGetTranSpeed(SD_CSD_TRAN_SPEED(pSd),
000058  2009              MOVS     r0,#9
00005a  0180              LSLS     r0,r0,#6
00005c  182c              ADDS     r4,r5,r0
00005e  7fa0              LDRB     r0,[r4,#0x1e]
000060  2804              CMP      r0,#4
000062  d304              BCC      |L1.110|
;;;641                                          units, 4,
;;;642                                          (pSd->cardType >= CARD_MMC
;;;643                                           && SD_CID_BGA(pSd) == 1) ?
000064  6aa8              LDR      r0,[r5,#0x28]
000066  0380              LSLS     r0,r0,#14
000068  0f80              LSRS     r0,r0,#30
00006a  2801              CMP      r0,#1
00006c  d019              BEQ      |L1.162|
                  |L1.110|
;;;644                                           values_emmc : values_sdmmc);
00006e  ab01              ADD      r3,sp,#4
                  |L1.112|
000070  6ba8              LDR      r0,[r5,#0x38]
000072  2204              MOVS     r2,#4
000074  0600              LSLS     r0,r0,#24
000076  0e00              LSRS     r0,r0,#24
000078  a921              ADD      r1,sp,#0x84
00007a  f7fffffe          BL       MmcGetTranSpeed
00007e  61a0              STR      r0,[r4,#0x18]
;;;645      #endif
;;;646        if (pSd->cardType >= CARD_MMC && SD_EXTCSD_HS_TIMING(pSd)) {
000080  7fa1              LDRB     r1,[r4,#0x1e]
000082  2904              CMP      r1,#4
000084  d306              BCC      |L1.148|
000086  35ff              ADDS     r5,r5,#0xff
000088  3501              ADDS     r5,#1
00008a  7869              LDRB     r1,[r5,#1]
00008c  2900              CMP      r1,#0
00008e  d001              BEQ      |L1.148|
;;;647            pSd->transSpeed *= 2;
000090  0040              LSLS     r0,r0,#1
000092  61a0              STR      r0,[r4,#0x18]
                  |L1.148|
;;;648        }
;;;649        DEBUG_MSG("-I- SD/MMC TRANS SPEED %d KBit/s", pSd->transSpeed);
;;;650        pSd->transSpeed *= 1000;  
000094  69a0              LDR      r0,[r4,#0x18]
000096  217d              MOVS     r1,#0x7d
000098  00c9              LSLS     r1,r1,#3
00009a  4348              MULS     r0,r1,r0
00009c  61a0              STR      r0,[r4,#0x18]
;;;651    }
00009e  b025              ADD      sp,sp,#0x94
0000a0  bd30              POP      {r4,r5,pc}
                  |L1.162|
0000a2  ab11              ADD      r3,sp,#0x44           ;644
0000a4  e7e4              B        |L1.112|
;;;652    
                          ENDP

                  ResetCommand PROC
;;;656    //------------------------------------------------------------------------------
;;;657    static void ResetCommand(SdCmd *pCommand)
0000a6  2100              MOVS     r1,#0
;;;658    {
;;;659      #if 0
;;;660        unsigned char* p = (unsigned char*)pCommand;
;;;661        unsigned int   l = sizeof(SdCmd);
;;;662        while(l --) *p++ = 0;
;;;663      #else
;;;664        pCommand->cmd       = 0;
0000a8  6001              STR      r1,[r0,#0]
;;;665        pCommand->arg       = 0;
0000aa  6041              STR      r1,[r0,#4]
;;;666        pCommand->pData     = 0;
0000ac  6081              STR      r1,[r0,#8]
;;;667        pCommand->blockSize = 0;
0000ae  8181              STRH     r1,[r0,#0xc]
;;;668        pCommand->nbBlock   = 0;
0000b0  81c1              STRH     r1,[r0,#0xe]
;;;669        pCommand->pResp     = 0;
0000b2  6101              STR      r1,[r0,#0x10]
;;;670        pCommand->callback  = 0;
0000b4  6141              STR      r1,[r0,#0x14]
;;;671        pCommand->pArg      = 0;
0000b6  6181              STR      r1,[r0,#0x18]
;;;672        pCommand->resType   = 0;
0000b8  7701              STRB     r1,[r0,#0x1c]
;;;673        pCommand->dataTran  = 0;
0000ba  7741              STRB     r1,[r0,#0x1d]
;;;674        pCommand->tranType  = 0;
0000bc  7781              STRB     r1,[r0,#0x1e]
;;;675        pCommand->isRead    = 0;
0000be  77c1              STRB     r1,[r0,#0x1f]
;;;676        pCommand->status    = 0;
0000c0  6201              STR      r1,[r0,#0x20]
;;;677      #endif
;;;678    }
0000c2  4770              BX       lr
;;;679    #else
                          ENDP

                  Delay PROC
;;;686    //------------------------------------------------------------------------------
;;;687    static void Delay(volatile unsigned int loop)
0000c4  e000              B        |L1.200|
                  |L1.198|
;;;688    {
;;;689        for(;loop > 0; loop --);
0000c6  1e40              SUBS     r0,r0,#1
                  |L1.200|
0000c8  2800              CMP      r0,#0
0000ca  d1fc              BNE      |L1.198|
;;;690    }
0000cc  4770              BX       lr
;;;691    
                          ENDP

                  SendCommand PROC
;;;697    //------------------------------------------------------------------------------
;;;698    static unsigned char SendCommand(SdCard *pSd)
0000ce  b570              PUSH     {r4-r6,lr}
;;;699    {
;;;700        SdCmd *pCommand = &(pSd->command);
0000d0  1d04              ADDS     r4,r0,#4
;;;701        SdDriver *pSdDriver = pSd->pSdDriver;
0000d2  6806              LDR      r6,[r0,#0]
;;;702        unsigned char error;
;;;703    
;;;704        // Send command
;;;705        error = MCI_SendCommand((Mci *)pSdDriver, (MciCmd *)pCommand);
0000d4  0021              MOVS     r1,r4
0000d6  0030              MOVS     r0,r6
0000d8  f7fffffe          BL       MCI_SendCommand
0000dc  0005              MOVS     r5,r0
;;;706        if (error) {
0000de  2d00              CMP      r5,#0
0000e0  d014              BEQ      |L1.268|
;;;707            TRACE_ERROR("MCI SendCommand: Failed to send command (%d)\n\r", error);
0000e2  201b              MOVS     r0,#0x1b
0000e4  f7fffffe          BL       ShellPutByte
0000e8  a0cd              ADR      r0,|L1.1056|
0000ea  f7fffffe          BL       ShellPrintf
0000ee  201b              MOVS     r0,#0x1b
0000f0  f7fffffe          BL       ShellPutByte
0000f4  a0cd              ADR      r0,|L1.1068|
0000f6  f7fffffe          BL       ShellPrintf
0000fa  0029              MOVS     r1,r5
0000fc  a0cc              ADR      r0,|L1.1072|
0000fe  f7fffffe          BL       ShellPrintf
000102  a0d6              ADR      r0,|L1.1116|
000104  f7fffffe          BL       ShellPrintf
;;;708            return SD_ERROR_DRIVER;
000108  2001              MOVS     r0,#1
;;;709        }
;;;710    
;;;711        // Wait for command to complete (if no callback defined)
;;;712        if (pCommand->callback == 0) {
;;;713            while (!MCI_IsTxComplete((Mci *)pSdDriver));
;;;714        }
;;;715    
;;;716        // Check for using fifo to transfer data
;;;717      #if !defined(MCI_DMA_ENABLE) && defined(MCI2_INTERFACE)
;;;718        if (pCommand->dataTran && pCommand->nbBlock) {
;;;719            MCI_FifoTransfer((Mci *)pSdDriver, (MciCmd *)pCommand);
;;;720        }
;;;721      #endif
;;;722    
;;;723        return pCommand->status;
;;;724    }
00010a  bd70              POP      {r4-r6,pc}
                  |L1.268|
00010c  6960              LDR      r0,[r4,#0x14]         ;712
00010e  2800              CMP      r0,#0                 ;712
000110  d104              BNE      |L1.284|
                  |L1.274|
000112  0030              MOVS     r0,r6                 ;713
000114  f7fffffe          BL       MCI_IsTxComplete
000118  2800              CMP      r0,#0                 ;713
00011a  d0fa              BEQ      |L1.274|
                  |L1.284|
00011c  6a20              LDR      r0,[r4,#0x20]         ;723
00011e  0600              LSLS     r0,r0,#24             ;723
000120  0e00              LSRS     r0,r0,#24             ;723
000122  bd70              POP      {r4-r6,pc}
;;;725    
                          ENDP

                  Pon PROC
;;;731    //------------------------------------------------------------------------------
;;;732    static unsigned char Pon(SdCard *pSd)
000124  b538              PUSH     {r3-r5,lr}
;;;733    {
000126  0005              MOVS     r5,r0
;;;734        SdCmd *pCommand = &(pSd->command);
000128  1d2c              ADDS     r4,r5,#4
;;;735        unsigned int response;
;;;736        unsigned char error;
;;;737    
;;;738        ResetCommand(pCommand);
00012a  0020              MOVS     r0,r4
00012c  f7fffffe          BL       ResetCommand
;;;739        // Fill command information
;;;740        pCommand->cmd = AT91C_POWER_ON_INIT;
000130  48cb              LDR      r0,|L1.1120|
000132  6020              STR      r0,[r4,#0]
;;;741        pCommand->pResp = &response;
000134  4668              MOV      r0,sp
000136  6120              STR      r0,[r4,#0x10]
;;;742    
;;;743        // Send command
;;;744    
;;;745        error =  SendCommand(pSd);
000138  0028              MOVS     r0,r5
00013a  f7fffffe          BL       SendCommand
;;;746        return error;
;;;747    }
00013e  bd38              POP      {r3-r5,pc}
;;;748    
                          ENDP

                  Cmd0 PROC
;;;778    //------------------------------------------------------------------------------
;;;779    static unsigned char Cmd0(SdCard *pSd, unsigned int arg)
000140  b5f8              PUSH     {r3-r7,lr}
;;;780    {
000142  0005              MOVS     r5,r0
000144  000e              MOVS     r6,r1
;;;781        SdCmd *pCommand = &(pSd->command);
000146  1d2c              ADDS     r4,r5,#4
;;;782        unsigned int response;
;;;783        unsigned char error;
;;;784    
;;;785        TRACE_DEBUG("Cmd0()\n\r");
;;;786        ResetCommand(pCommand);
000148  0020              MOVS     r0,r4
00014a  f7fffffe          BL       ResetCommand
;;;787        // Fill command information
;;;788        pCommand->cmd = AT91C_GO_IDLE_STATE_CMD;
00014e  2000              MOVS     r0,#0
000150  6020              STR      r0,[r4,#0]
;;;789        pCommand->arg = arg;
000152  6066              STR      r6,[r4,#4]
;;;790        pCommand->pResp = &response;
000154  4668              MOV      r0,sp
000156  6120              STR      r0,[r4,#0x10]
;;;791    
;;;792        // send command
;;;793        error =  SendCommand(pSd);
000158  0028              MOVS     r0,r5
00015a  f7fffffe          BL       SendCommand
;;;794        return error;
;;;795    }
00015e  bdf8              POP      {r3-r7,pc}
;;;796    
                          ENDP

                  Cmd1 PROC
;;;805    //------------------------------------------------------------------------------
;;;806    static unsigned char Cmd1(SdCard *pSd,
000160  b5f8              PUSH     {r3-r7,lr}
;;;807                              unsigned char hdSupport,
;;;808                              unsigned char *pHdSupport)
;;;809    {
000162  0006              MOVS     r6,r0
000164  000f              MOVS     r7,r1
000166  0015              MOVS     r5,r2
;;;810        SdCmd *pCommand = &(pSd->command);
000168  1d34              ADDS     r4,r6,#4
;;;811        unsigned char error;
;;;812        unsigned int response;
;;;813    
;;;814        TRACE_DEBUG("Cmd1()\n\r");
;;;815        ResetCommand(pCommand);
00016a  0020              MOVS     r0,r4
00016c  f7fffffe          BL       ResetCommand
;;;816        // Fill command information
;;;817        pCommand->cmd = AT91C_MMC_SEND_OP_COND_CMD;
000170  48bc              LDR      r0,|L1.1124|
000172  6020              STR      r0,[r4,#0]
;;;818        pCommand->arg = AT91C_MMC_HOST_VOLTAGE_RANGE;
000174  48bc              LDR      r0,|L1.1128|
000176  6060              STR      r0,[r4,#4]
;;;819        if(hdSupport) {
000178  2f00              CMP      r7,#0
00017a  d001              BEQ      |L1.384|
;;;820            pCommand->arg |= AT91C_MMC_HIGH_DENSITY;
00017c  48bb              LDR      r0,|L1.1132|
00017e  6060              STR      r0,[r4,#4]
                  |L1.384|
;;;821        }
;;;822        else {
;;;823            pCommand->arg |= AT91C_MMC_NORM_DENSITY;
;;;824        }
;;;825        pCommand->resType = 3;
000180  2003              MOVS     r0,#3
000182  7720              STRB     r0,[r4,#0x1c]
;;;826        pCommand->pResp = &response;
000184  4668              MOV      r0,sp
000186  6120              STR      r0,[r4,#0x10]
;;;827    
;;;828        // send command
;;;829        *pHdSupport = 0; 
000188  2000              MOVS     r0,#0
00018a  7028              STRB     r0,[r5,#0]
;;;830        error = SendCommand(pSd);
00018c  0030              MOVS     r0,r6
00018e  f7fffffe          BL       SendCommand
;;;831        if (error) {
000192  2800              CMP      r0,#0
000194  d109              BNE      |L1.426|
;;;832            return error;
;;;833        }
;;;834        if ((response & AT91C_CARD_POWER_UP_BUSY) == AT91C_CARD_POWER_UP_BUSY) {        if((response & AT91C_MMC_OCR_BIT2930) == AT91C_MMC_HIGH_DENSITY) {
000196  9800              LDR      r0,[sp,#0]
000198  2800              CMP      r0,#0
00019a  da07              BGE      |L1.428|
00019c  0040              LSLS     r0,r0,#1
00019e  0f80              LSRS     r0,r0,#30
0001a0  2802              CMP      r0,#2
0001a2  d101              BNE      |L1.424|
;;;835                *pHdSupport = 1;
0001a4  2001              MOVS     r0,#1
0001a6  7028              STRB     r0,[r5,#0]
                  |L1.424|
;;;836            }
;;;837            return 0;
0001a8  2000              MOVS     r0,#0
                  |L1.426|
;;;838        }
;;;839        else {
;;;840            return SD_ERROR_DRIVER;
;;;841        }
;;;842    }
0001aa  bdf8              POP      {r3-r7,pc}
                  |L1.428|
0001ac  2001              MOVS     r0,#1                 ;840
0001ae  bdf8              POP      {r3-r7,pc}
;;;843    
                          ENDP

                  Cmd2 PROC
;;;851    //------------------------------------------------------------------------------
;;;852    static unsigned char Cmd2(SdCard *pSd)
0001b0  b570              PUSH     {r4-r6,lr}
;;;853    {
0001b2  0005              MOVS     r5,r0
;;;854        SdCmd *pCommand = &(pSd->command);
0001b4  1d2c              ADDS     r4,r5,#4
;;;855    
;;;856        TRACE_DEBUG("Cmd2()\n\r");
;;;857        ResetCommand(pCommand);
0001b6  0020              MOVS     r0,r4
0001b8  f7fffffe          BL       ResetCommand
;;;858        // Fill the command information
;;;859        pCommand->cmd = AT91C_ALL_SEND_CID_CMD;
0001bc  48ac              LDR      r0,|L1.1136|
0001be  6020              STR      r0,[r4,#0]
;;;860        pCommand->resType = 2;
0001c0  2002              MOVS     r0,#2
0001c2  7720              STRB     r0,[r4,#0x1c]
;;;861        pCommand->pResp = pSd->cid;
0001c4  0028              MOVS     r0,r5
0001c6  3028              ADDS     r0,r0,#0x28
0001c8  6120              STR      r0,[r4,#0x10]
;;;862    
;;;863        // Send the command
;;;864        return SendCommand(pSd);
0001ca  0028              MOVS     r0,r5
0001cc  f7fffffe          BL       SendCommand
;;;865    }
0001d0  bd70              POP      {r4-r6,pc}
;;;866    
                          ENDP

                  Cmd3 PROC
;;;871    //------------------------------------------------------------------------------
;;;872    static unsigned char Cmd3(SdCard *pSd)
0001d2  b5f8              PUSH     {r3-r7,lr}
;;;873    {
0001d4  0007              MOVS     r7,r0
;;;874        SdCmd *pCommand = &(pSd->command);
0001d6  1d3c              ADDS     r4,r7,#4
;;;875        unsigned int cardAddress;
;;;876        unsigned char error;
;;;877    
;;;878        TRACE_DEBUG("Cmd3()\n\r");
;;;879        ResetCommand(pCommand);
0001d8  0020              MOVS     r0,r4
0001da  f7fffffe          BL       ResetCommand
;;;880        // Fill command information
;;;881        pCommand->cmd = AT91C_SET_RELATIVE_ADDR_CMD;
0001de  48a5              LDR      r0,|L1.1140|
0001e0  6020              STR      r0,[r4,#0]
;;;882    
;;;883        // Assign relative address to MMC card
;;;884        if ((pSd->cardType == CARD_MMC) || (pSd->cardType == CARD_MMCHD)) {
0001e2  48a5              LDR      r0,|L1.1144|
0001e4  183d              ADDS     r5,r7,r0
0001e6  7fa8              LDRB     r0,[r5,#0x1e]
0001e8  2804              CMP      r0,#4
0001ea  d001              BEQ      |L1.496|
0001ec  2805              CMP      r0,#5
0001ee  d101              BNE      |L1.500|
                  |L1.496|
;;;885            pCommand->arg = (0x1 << 16);
0001f0  48a2              LDR      r0,|L1.1148|
0001f2  6060              STR      r0,[r4,#4]
                  |L1.500|
;;;886        }
;;;887        pCommand->resType = 1;
0001f4  2601              MOVS     r6,#1
0001f6  7726              STRB     r6,[r4,#0x1c]
;;;888        pCommand->pResp = &cardAddress;
0001f8  4668              MOV      r0,sp
0001fa  6120              STR      r0,[r4,#0x10]
;;;889    
;;;890        // Send command
;;;891        error = SendCommand(pSd);
0001fc  0038              MOVS     r0,r7
0001fe  f7fffffe          BL       SendCommand
;;;892        if (error) {
000202  2800              CMP      r0,#0
000204  d110              BNE      |L1.552|
;;;893            return error;
;;;894        }
;;;895    
;;;896        // Save card address in driver
;;;897        if ( (pSd->cardType == CARD_SD)
000206  7fa8              LDRB     r0,[r5,#0x1e]
000208  2802              CMP      r0,#2
00020a  d007              BEQ      |L1.540|
;;;898            || (pSd->cardType == CARD_SDHC)) {
00020c  2803              CMP      r0,#3
00020e  d005              BEQ      |L1.540|
;;;899            pSd->cardAddress = (cardAddress >> 16) & 0xFFFF;
;;;900        }
;;;901        else if (pSd->cardType >= CARD_SDIO) {
000210  2808              CMP      r0,#8
000212  d307              BCC      |L1.548|
;;;902            pSd->cardAddress = (cardAddress >> 16) & 0xFFFF;
000214  9800              LDR      r0,[sp,#0]
000216  0c00              LSRS     r0,r0,#16
000218  83a8              STRH     r0,[r5,#0x1c]
00021a  e004              B        |L1.550|
                  |L1.540|
00021c  9800              LDR      r0,[sp,#0]            ;899
00021e  0c00              LSRS     r0,r0,#16             ;899
000220  83a8              STRH     r0,[r5,#0x1c]         ;899
000222  e000              B        |L1.550|
                  |L1.548|
;;;903        }
;;;904        else {
;;;905            // Default MMC RCA is 0x0001
;;;906            pSd->cardAddress = 1;
000224  83ae              STRH     r6,[r5,#0x1c]
                  |L1.550|
;;;907        }
;;;908    
;;;909        return 0;
000226  2000              MOVS     r0,#0
                  |L1.552|
;;;910    }
000228  bdf8              POP      {r3-r7,pc}
;;;911    
                          ENDP

                  Cmd7 PROC
;;;948    //------------------------------------------------------------------------------
;;;949    static unsigned char Cmd7(SdCard *pSd, unsigned int address)
00022a  b570              PUSH     {r4-r6,lr}
;;;950    {
00022c  0005              MOVS     r5,r0
00022e  000e              MOVS     r6,r1
;;;951        SdCmd *pCommand = &(pSd->command);
000230  1d2c              ADDS     r4,r5,#4
;;;952    
;;;953        TRACE_DEBUG("Cmd7()\n\r");
;;;954        ResetCommand(pCommand);
000232  0020              MOVS     r0,r4
000234  f7fffffe          BL       ResetCommand
;;;955        // Fill command information
;;;956        pCommand->cmd = AT91C_SEL_DESEL_CARD_CMD;
000238  4891              LDR      r0,|L1.1152|
00023a  6020              STR      r0,[r4,#0]
;;;957        pCommand->arg = address << 16;
00023c  0430              LSLS     r0,r6,#16
00023e  6060              STR      r0,[r4,#4]
;;;958        pCommand->resType = 1;
000240  2001              MOVS     r0,#1
000242  7720              STRB     r0,[r4,#0x1c]
;;;959    
;;;960        // Send command
;;;961        return SendCommand(pSd);
000244  0028              MOVS     r0,r5
000246  f7fffffe          BL       SendCommand
;;;962    }
00024a  bd70              POP      {r4-r6,pc}
;;;963    
                          ENDP

                  Cmd6 PROC
;;;973    //------------------------------------------------------------------------------
;;;974    static unsigned char Cmd6(SdCard *pSd,
00024c  b5ff              PUSH     {r0-r7,lr}
;;;975                              const void * pSwitchArg,
;;;976                              unsigned int  * pStatus,
;;;977                              unsigned int  * pResp)
;;;978    {
00024e  0005              MOVS     r5,r0
000250  000f              MOVS     r7,r1
000252  0016              MOVS     r6,r2
000254  b081              SUB      sp,sp,#4
;;;979        SdCmd *pCommand = &(pSd->command);
000256  1d2c              ADDS     r4,r5,#4
;;;980        unsigned int  response;
;;;981        unsigned char error;
;;;982        SdCmd6Arg  * pSdSwitch;
;;;983        MmcCmd6Arg * pMmcSwitch;
;;;984    
;;;985        SANITY_CHECK(pSd);
;;;986        SANITY_CHECK(pSwitchArg);
;;;987    
;;;988        TRACE_DEBUG("CMD6()\n\r");
;;;989    
;;;990        ResetCommand(pCommand);
000258  0020              MOVS     r0,r4
00025a  f7fffffe          BL       ResetCommand
;;;991    
;;;992        if (pSd->cardType >= CARD_MMC) {
00025e  4886              LDR      r0,|L1.1144|
;;;993            pMmcSwitch = (MmcCmd6Arg*)pSwitchArg;
;;;994            // R1b response
;;;995            pCommand->cmd = AT91C_MMC_SWITCH_CMD;
;;;996            pCommand->resType = 1;
000260  2101              MOVS     r1,#1
000262  1828              ADDS     r0,r5,r0              ;992
000264  7f80              LDRB     r0,[r0,#0x1e]         ;992
000266  2804              CMP      r0,#4                 ;992
000268  d30e              BCC      |L1.648|
00026a  4886              LDR      r0,|L1.1156|
00026c  6020              STR      r0,[r4,#0]            ;995
00026e  7721              STRB     r1,[r4,#0x1c]
;;;997            pCommand->arg =   (pMmcSwitch->access << 24)
000270  7839              LDRB     r1,[r7,#0]
000272  78f8              LDRB     r0,[r7,#3]
000274  78ba              LDRB     r2,[r7,#2]
000276  0609              LSLS     r1,r1,#24
000278  4308              ORRS     r0,r0,r1
00027a  7879              LDRB     r1,[r7,#1]
00027c  0409              LSLS     r1,r1,#16
00027e  0212              LSLS     r2,r2,#8
000280  4311              ORRS     r1,r1,r2
000282  4308              ORRS     r0,r0,r1
000284  6060              STR      r0,[r4,#4]
000286  e02c              B        |L1.738|
                  |L1.648|
;;;998                            | (pMmcSwitch->index  << 16)
;;;999                            | (pMmcSwitch->value  <<  8)
;;;1000                           | (pMmcSwitch->cmdSet <<  0);
;;;1001       }
;;;1002       else if (pSd->cardType >= CARD_SD) {
000288  2802              CMP      r0,#2
00028a  d32a              BCC      |L1.738|
;;;1003   
;;;1004           pSdSwitch = (SdCmd6Arg*)pSwitchArg;
;;;1005           // R1 response & 512 bits of status on DAT
;;;1006           pCommand->cmd = AT91C_SD_SWITCH_CMD;
00028c  487e              LDR      r0,|L1.1160|
00028e  6020              STR      r0,[r4,#0]
;;;1007           pCommand->resType = 1;
000290  7721              STRB     r1,[r4,#0x1c]
;;;1008           pCommand->arg =   (pSdSwitch->mode << 31)
000292  6838              LDR      r0,[r7,#0]
000294  0fc2              LSRS     r2,r0,#31
000296  0e03              LSRS     r3,r0,#24
000298  07d2              LSLS     r2,r2,#31
00029a  079b              LSLS     r3,r3,#30
00029c  431a              ORRS     r2,r2,r3
00029e  0203              LSLS     r3,r0,#8
0002a0  0f1b              LSRS     r3,r3,#28
0002a2  051b              LSLS     r3,r3,#20
0002a4  431a              ORRS     r2,r2,r3
0002a6  0303              LSLS     r3,r0,#12
0002a8  0f1b              LSRS     r3,r3,#28
0002aa  041b              LSLS     r3,r3,#16
0002ac  431a              ORRS     r2,r2,r3
0002ae  0403              LSLS     r3,r0,#16
0002b0  0f1b              LSRS     r3,r3,#28
0002b2  031b              LSLS     r3,r3,#12
0002b4  431a              ORRS     r2,r2,r3
0002b6  0503              LSLS     r3,r0,#20
0002b8  0f1b              LSRS     r3,r3,#28
0002ba  021b              LSLS     r3,r3,#8
0002bc  431a              ORRS     r2,r2,r3
0002be  0603              LSLS     r3,r0,#24
0002c0  0f1b              LSRS     r3,r3,#28
0002c2  011b              LSLS     r3,r3,#4
0002c4  0700              LSLS     r0,r0,#28
0002c6  431a              ORRS     r2,r2,r3
0002c8  0f00              LSRS     r0,r0,#28
0002ca  4302              ORRS     r2,r2,r0
0002cc  6062              STR      r2,[r4,#4]
;;;1009                           | (pSdSwitch->reserved << 30)
;;;1010                           | (pSdSwitch->reserveFG6 << 20)
;;;1011                           | (pSdSwitch->reserveFG5 << 16)
;;;1012                           | (pSdSwitch->reserveFG4 << 12)
;;;1013                           | (pSdSwitch->reserveFG3 <<  8)
;;;1014                           | (pSdSwitch->command << 4)
;;;1015                           | (pSdSwitch->accessMode << 0);
;;;1016           if (pStatus) {
0002ce  2e00              CMP      r6,#0
0002d0  d007              BEQ      |L1.738|
;;;1017               pCommand->blockSize = 512 / 8;
0002d2  2040              MOVS     r0,#0x40
0002d4  81a0              STRH     r0,[r4,#0xc]
;;;1018               pCommand->nbBlock = 1;
0002d6  81e1              STRH     r1,[r4,#0xe]
;;;1019               pCommand->pData = (unsigned char*)pStatus;
0002d8  60a6              STR      r6,[r4,#8]
;;;1020   
;;;1021               pCommand->dataTran = 1;
0002da  7761              STRB     r1,[r4,#0x1d]
;;;1022               pCommand->isRead = 1;
0002dc  77e1              STRB     r1,[r4,#0x1f]
;;;1023               pCommand->tranType = MCI_NEW_TRANSFER;
0002de  2000              MOVS     r0,#0
0002e0  77a0              STRB     r0,[r4,#0x1e]
                  |L1.738|
;;;1024           }
;;;1025       }
;;;1026       pCommand->pResp = &response;
0002e2  4668              MOV      r0,sp
0002e4  6120              STR      r0,[r4,#0x10]
;;;1027   
;;;1028       DEBUG_MSG("CMD6(%d) arg 0x%X\n\r", pSd->cardType, pCommand->arg);
;;;1029   
;;;1030       error = SendCommand(pSd);
0002e6  0028              MOVS     r0,r5
0002e8  f7fffffe          BL       SendCommand
;;;1031   
;;;1032       if (error)
0002ec  2800              CMP      r0,#0
0002ee  d106              BNE      |L1.766|
;;;1033           return error;
;;;1034       else if (pResp)
0002f0  9804              LDR      r0,[sp,#0x10]
0002f2  2800              CMP      r0,#0
0002f4  d002              BEQ      |L1.764|
;;;1035           *pResp = response;
0002f6  9900              LDR      r1,[sp,#0]
0002f8  9804              LDR      r0,[sp,#0x10]
0002fa  6001              STR      r1,[r0,#0]
                  |L1.764|
;;;1036   
;;;1037       return 0;
0002fc  2000              MOVS     r0,#0
                  |L1.766|
;;;1038   }
0002fe  b005              ADD      sp,sp,#0x14
000300  bdf0              POP      {r4-r7,pc}
;;;1039   
                          ENDP

                  Cmd8 PROC
;;;1052   //------------------------------------------------------------------------------
;;;1053   static unsigned char Cmd8(SdCard *pSd,
000302  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;1054                             unsigned char sdCmd,
;;;1055                             void* arg)
;;;1056   {
000304  000e              MOVS     r6,r1
000306  0017              MOVS     r7,r2
000308  b082              SUB      sp,sp,#8
;;;1057       SdCmd *pCommand = &(pSd->command);
00030a  9c02              LDR      r4,[sp,#8]
00030c  1d24              ADDS     r4,r4,#4
;;;1058       unsigned int response;
;;;1059       unsigned char error;
;;;1060       unsigned char supplyVoltage = (unsigned char)((unsigned int)arg);
;;;1061   
;;;1062       TRACE_DEBUG("Cmd8()\n\r");
;;;1063       ResetCommand(pCommand);
00030e  0020              MOVS     r0,r4
000310  f7fffffe          BL       ResetCommand
000314  0638              LSLS     r0,r7,#24             ;1060
;;;1064   
;;;1065       if (sdCmd) {
;;;1066   
;;;1067           // Fill command information
;;;1068           pCommand->cmd = AT91C_SEND_IF_COND;
;;;1069           pCommand->arg = (supplyVoltage << 8) | (0xAA);
000316  0c05              LSRS     r5,r0,#16
000318  35aa              ADDS     r5,r5,#0xaa
00031a  2e00              CMP      r6,#0                 ;1065
00031c  d005              BEQ      |L1.810|
00031e  485b              LDR      r0,|L1.1164|
000320  6020              STR      r0,[r4,#0]            ;1068
000322  6065              STR      r5,[r4,#4]
;;;1070           pCommand->resType = 7;
000324  2007              MOVS     r0,#7
000326  7720              STRB     r0,[r4,#0x1c]
000328  e00b              B        |L1.834|
                  |L1.810|
;;;1071   
;;;1072           TRACE_DEBUG("supplyVoltage: 0x%x\n\r", supplyVoltage);
;;;1073       }
;;;1074       else {
;;;1075   
;;;1076           pCommand->cmd = AT91C_SEND_EXT_CSD_CMD;
00032a  4859              LDR      r0,|L1.1168|
00032c  6020              STR      r0,[r4,#0]
;;;1077           pCommand->resType = 1;
00032e  2001              MOVS     r0,#1
000330  7720              STRB     r0,[r4,#0x1c]
;;;1078   
;;;1079           pCommand->blockSize = SD_BLOCK_SIZE;
000332  4958              LDR      r1,|L1.1172|
000334  81a1              STRH     r1,[r4,#0xc]
;;;1080           pCommand->nbBlock = 512 / SD_BLOCK_SIZE;
000336  81e0              STRH     r0,[r4,#0xe]
;;;1081           pCommand->pData = arg;
000338  60a7              STR      r7,[r4,#8]
;;;1082   
;;;1083           pCommand->dataTran = 1;
00033a  7760              STRB     r0,[r4,#0x1d]
;;;1084           pCommand->isRead = 1;
00033c  77e0              STRB     r0,[r4,#0x1f]
;;;1085           pCommand->tranType = MCI_NEW_TRANSFER;
00033e  2000              MOVS     r0,#0
000340  77a0              STRB     r0,[r4,#0x1e]
                  |L1.834|
;;;1086       }
;;;1087       pCommand->pResp = &response;
000342  a801              ADD      r0,sp,#4
000344  6120              STR      r0,[r4,#0x10]
;;;1088   
;;;1089       // Send command
;;;1090       error = SendCommand(pSd);
000346  9802              LDR      r0,[sp,#8]
000348  f7fffffe          BL       SendCommand
;;;1091   
;;;1092       if (sdCmd) {
00034c  2e00              CMP      r6,#0
00034e  d0d6              BEQ      |L1.766|
;;;1093   
;;;1094           // Check result
;;;1095           if (error == MCI_STATUS_NORESPONSE) {
000350  2803              CMP      r0,#3
000352  d002              BEQ      |L1.858|
;;;1096   
;;;1097               return SD_ERROR_NORESPONSE;
;;;1098           }
;;;1099           // SD_R7
;;;1100           // Bit 0 - 7: check pattern (echo-back)
;;;1101           // Bit 8 -11: voltage accepted
;;;1102           else if (!error &&
000354  2800              CMP      r0,#0
000356  d002              BEQ      |L1.862|
000358  e008              B        |L1.876|
                  |L1.858|
00035a  2002              MOVS     r0,#2                 ;1097
;;;1103                   ((response & 0x00000FFF) == ((supplyVoltage << 8) | 0xAA))) {
;;;1104               return 0;
;;;1105           }
;;;1106           else {
;;;1107               return SD_ERROR_DRIVER;
;;;1108           }
;;;1109       }
;;;1110   
;;;1111       return error;
;;;1112   }
00035c  e7cf              B        |L1.766|
                  |L1.862|
00035e  9801              LDR      r0,[sp,#4]            ;1103
000360  0500              LSLS     r0,r0,#20             ;1103
000362  0d00              LSRS     r0,r0,#20             ;1103
000364  42a8              CMP      r0,r5                 ;1103
000366  d101              BNE      |L1.876|
000368  2000              MOVS     r0,#0                 ;1104
00036a  e7c8              B        |L1.766|
                  |L1.876|
00036c  2001              MOVS     r0,#1                 ;1107
00036e  e7c6              B        |L1.766|
;;;1113   
                          ENDP

                  Cmd9 PROC
;;;1119   //------------------------------------------------------------------------------
;;;1120   static unsigned char Cmd9(SdCard *pSd)
000370  b570              PUSH     {r4-r6,lr}
;;;1121   {
000372  0005              MOVS     r5,r0
;;;1122       SdCmd *pCommand = &(pSd->command);
000374  1d2c              ADDS     r4,r5,#4
;;;1123       unsigned char error;
;;;1124   
;;;1125       TRACE_DEBUG("Cmd9()\n\r");
;;;1126       ResetCommand(pCommand);
000376  0020              MOVS     r0,r4
000378  f7fffffe          BL       ResetCommand
;;;1127       // Fill command information
;;;1128       pCommand->cmd = AT91C_SEND_CSD_CMD;
00037c  4846              LDR      r0,|L1.1176|
00037e  6020              STR      r0,[r4,#0]
;;;1129       pCommand->arg = pSd->cardAddress << 16;
000380  483d              LDR      r0,|L1.1144|
000382  1828              ADDS     r0,r5,r0
000384  8b80              LDRH     r0,[r0,#0x1c]
000386  0400              LSLS     r0,r0,#16
000388  6060              STR      r0,[r4,#4]
;;;1130       pCommand->resType = 2;
00038a  2002              MOVS     r0,#2
00038c  7720              STRB     r0,[r4,#0x1c]
;;;1131       pCommand->pResp = pSd->csd;
00038e  0028              MOVS     r0,r5
000390  3038              ADDS     r0,r0,#0x38
000392  6120              STR      r0,[r4,#0x10]
;;;1132   
;;;1133       // Send command
;;;1134       error = SendCommand(pSd);
000394  0028              MOVS     r0,r5
000396  f7fffffe          BL       SendCommand
;;;1135       return error;
;;;1136   }
00039a  bd70              POP      {r4-r6,pc}
;;;1137   
                          ENDP

                  Cmd12 PROC
;;;1143   //------------------------------------------------------------------------------
;;;1144   static unsigned char Cmd12(SdCard *pSd,
00039c  b5f8              PUSH     {r3-r7,lr}
;;;1145                              unsigned char stopRead,
;;;1146                              unsigned int *pStatus)
;;;1147   {
00039e  0005              MOVS     r5,r0
0003a0  000f              MOVS     r7,r1
0003a2  0016              MOVS     r6,r2
;;;1148       SdCmd *pCommand = &(pSd->command);
0003a4  1d2c              ADDS     r4,r5,#4
;;;1149       unsigned char error;
;;;1150       unsigned int response;
;;;1151   
;;;1152       TRACE_DEBUG("Cmd12()\n\r");
;;;1153       ResetCommand(pCommand);
0003a6  0020              MOVS     r0,r4
0003a8  f7fffffe          BL       ResetCommand
;;;1154       // Fill command information
;;;1155       pCommand->cmd = AT91C_STOP_TRANSMISSION_CMD;
0003ac  483b              LDR      r0,|L1.1180|
0003ae  6020              STR      r0,[r4,#0]
;;;1156       pCommand->isRead = stopRead;
0003b0  77e7              STRB     r7,[r4,#0x1f]
;;;1157       pCommand->tranType = MCI_STOP_TRANSFER;
0003b2  2002              MOVS     r0,#2
0003b4  77a0              STRB     r0,[r4,#0x1e]
;;;1158       pCommand->resType = 1;
0003b6  2001              MOVS     r0,#1
0003b8  7720              STRB     r0,[r4,#0x1c]
;;;1159       pCommand->pResp = &response;
0003ba  4668              MOV      r0,sp
0003bc  6120              STR      r0,[r4,#0x10]
;;;1160   
;;;1161       // Send command
;;;1162       error = SendCommand(pSd);
0003be  0028              MOVS     r0,r5
0003c0  f7fffffe          BL       SendCommand
;;;1163       if (pStatus) *pStatus = response;
0003c4  2e00              CMP      r6,#0
0003c6  d001              BEQ      |L1.972|
0003c8  9900              LDR      r1,[sp,#0]
0003ca  6031              STR      r1,[r6,#0]
                  |L1.972|
;;;1164       return error;
;;;1165   }
0003cc  bdf8              POP      {r3-r7,pc}
;;;1166   
                          ENDP

                  Cmd13 PROC
;;;1172   //------------------------------------------------------------------------------
;;;1173   static unsigned char Cmd13(SdCard *pSd, unsigned int *pStatus)
0003ce  b570              PUSH     {r4-r6,lr}
;;;1174   {
0003d0  0005              MOVS     r5,r0
0003d2  000e              MOVS     r6,r1
;;;1175       SdCmd *pCommand = &(pSd->command);
0003d4  1d2c              ADDS     r4,r5,#4
;;;1176       unsigned char error;
;;;1177   
;;;1178       TRACE_DEBUG("Cmd13()\n\r");
;;;1179       ResetCommand(pCommand);
0003d6  0020              MOVS     r0,r4
0003d8  f7fffffe          BL       ResetCommand
;;;1180       // Fill command information
;;;1181       pCommand->cmd = AT91C_SEND_STATUS_CMD;
0003dc  4830              LDR      r0,|L1.1184|
0003de  6020              STR      r0,[r4,#0]
;;;1182       pCommand->arg = pSd->cardAddress << 16;
0003e0  4825              LDR      r0,|L1.1144|
0003e2  1828              ADDS     r0,r5,r0
0003e4  8b80              LDRH     r0,[r0,#0x1c]
0003e6  0400              LSLS     r0,r0,#16
0003e8  6060              STR      r0,[r4,#4]
;;;1183       pCommand->resType = 1;
0003ea  2001              MOVS     r0,#1
0003ec  7720              STRB     r0,[r4,#0x1c]
;;;1184       pCommand->pResp = pStatus;
0003ee  6126              STR      r6,[r4,#0x10]
;;;1185   
;;;1186       // Send command
;;;1187       error = SendCommand(pSd);
0003f0  0028              MOVS     r0,r5
0003f2  f7fffffe          BL       SendCommand
;;;1188   
;;;1189       return error;
;;;1190   }
0003f6  bd70              POP      {r4-r6,pc}
;;;1191   
                          ENDP

                  Cmd16 PROC
;;;1206   //------------------------------------------------------------------------------
;;;1207   static unsigned char Cmd16(SdCard *pSd, unsigned short blockLength)
0003f8  b5f8              PUSH     {r3-r7,lr}
;;;1208   {
0003fa  0005              MOVS     r5,r0
0003fc  000e              MOVS     r6,r1
;;;1209       SdCmd *pCommand = &(pSd->command);
0003fe  1d2c              ADDS     r4,r5,#4
;;;1210       unsigned char error;
;;;1211       unsigned int response;
;;;1212   
;;;1213       TRACE_DEBUG("Cmd16()\n\r");
;;;1214       ResetCommand(pCommand);
000400  0020              MOVS     r0,r4
000402  f7fffffe          BL       ResetCommand
;;;1215       // Fill command information
;;;1216       pCommand->cmd = AT91C_SET_BLOCKLEN_CMD;
000406  4827              LDR      r0,|L1.1188|
000408  6020              STR      r0,[r4,#0]
;;;1217       pCommand->arg = blockLength;
00040a  6066              STR      r6,[r4,#4]
;;;1218       pCommand->resType = 1;
00040c  2001              MOVS     r0,#1
00040e  7720              STRB     r0,[r4,#0x1c]
;;;1219       pCommand->pResp = &response;
000410  4668              MOV      r0,sp
000412  6120              STR      r0,[r4,#0x10]
;;;1220   
;;;1221       // Send command
;;;1222       error = SendCommand(pSd);
000414  0028              MOVS     r0,r5
000416  f7fffffe          BL       SendCommand
                  |L1.1050|
;;;1223   
;;;1224       return error;
;;;1225   }
00041a  bdf8              POP      {r3-r7,pc}
                  |L1.1052|
                          DCD      ||.constdata||
                  |L1.1056|
000420  5b313b31          DCB      "[1;1;31mE: ",0
000424  3b33316d
000428  453a2000
                  |L1.1068|
00042c  5b6d00            DCB      "[m",0
00042f  00                DCB      0
                  |L1.1072|
000430  4d434920          DCB      "MCI SendCommand: Failed to send command (%d)"
000434  53656e64
000438  436f6d6d
00043c  616e643a
000440  20466169
000444  6c656420
000448  746f2073
00044c  656e6420
000450  636f6d6d
000454  616e6420
000458  28256429
                  |L1.1116|
00045c  0a0d00            DCB      "\n\r",0
00045f  00                DCB      0
                  |L1.1120|
                          DCD      0x00000900
                  |L1.1124|
                          DCD      0x00000841
                  |L1.1128|
                          DCD      0x001f8000
                  |L1.1132|
                          DCD      0x401f8000
                  |L1.1136|
                          DCD      0x00000882
                  |L1.1140|
                          DCD      0x00001843
                  |L1.1144|
                          DCD      0x00000240
                  |L1.1148|
                          DCD      0x00010000
                  |L1.1152|
                          DCD      0x00001047
                  |L1.1156|
                          DCD      0x000010c6
                  |L1.1160|
                          DCD      0x00051046
                  |L1.1164|
                          DCD      0x00001048
                  |L1.1168|
                          DCD      0x00051048
                  |L1.1172|
                          DCD      0x00000200
                  |L1.1176|
                          DCD      0x00001089
                  |L1.1180|
                          DCD      0x000210cc
                  |L1.1184|
                          DCD      0x0000104d
                  |L1.1188|
                          DCD      0x00001050
                          ENDP

                  Cmd18 PROC
;;;1268   //------------------------------------------------------------------------------
;;;1269   static unsigned char Cmd18(SdCard *pSd,
0004a8  b5ff              PUSH     {r0-r7,lr}
;;;1270                              unsigned short nbBlock,
;;;1271                              unsigned char *pData,
;;;1272                              unsigned int address,
;;;1273                              unsigned int *pStatus)
;;;1274   {
0004aa  b081              SUB      sp,sp,#4
0004ac  9e0a              LDR      r6,[sp,#0x28]
0004ae  0005              MOVS     r5,r0
0004b0  000f              MOVS     r7,r1
;;;1275       SdCmd *pCommand = &(pSd->command);
0004b2  1d2c              ADDS     r4,r5,#4
;;;1276       unsigned char error;
;;;1277       unsigned int response;
;;;1278   
;;;1279       TRACE_DEBUG("Cmd18()\n\r");
;;;1280       ResetCommand(pCommand);
0004b4  0020              MOVS     r0,r4
0004b6  f7fffffe          BL       ResetCommand
;;;1281       // Fill command information
;;;1282       pCommand->cmd = AT91C_READ_MULTIPLE_BLOCK_CMD;
0004ba  48fa              LDR      r0,|L1.2212|
0004bc  6020              STR      r0,[r4,#0]
;;;1283       pCommand->arg = address;
0004be  9804              LDR      r0,[sp,#0x10]
0004c0  6060              STR      r0,[r4,#4]
;;;1284       pCommand->resType = 1;
0004c2  2001              MOVS     r0,#1
0004c4  7720              STRB     r0,[r4,#0x1c]
;;;1285       pCommand->pResp = &response;
0004c6  4669              MOV      r1,sp
0004c8  6121              STR      r1,[r4,#0x10]
;;;1286   
;;;1287       pCommand->blockSize = SD_BLOCK_SIZE;
0004ca  49f7              LDR      r1,|L1.2216|
0004cc  81a1              STRH     r1,[r4,#0xc]
;;;1288       pCommand->nbBlock = nbBlock;
0004ce  81e7              STRH     r7,[r4,#0xe]
;;;1289       pCommand->pData = pData;
0004d0  9903              LDR      r1,[sp,#0xc]
0004d2  60a1              STR      r1,[r4,#8]
;;;1290   
;;;1291       pCommand->dataTran = 1;
0004d4  7760              STRB     r0,[r4,#0x1d]
;;;1292       pCommand->isRead = 1;
0004d6  77e0              STRB     r0,[r4,#0x1f]
;;;1293       pCommand->tranType = MCI_NEW_TRANSFER;
0004d8  2000              MOVS     r0,#0
0004da  77a0              STRB     r0,[r4,#0x1e]
;;;1294   
;;;1295       // Send command
;;;1296       error = SendCommand(pSd);
0004dc  0028              MOVS     r0,r5
0004de  f7fffffe          BL       SendCommand
;;;1297   
;;;1298       if (pStatus) *pStatus = response;
0004e2  2e00              CMP      r6,#0
0004e4  d001              BEQ      |L1.1258|
0004e6  9900              LDR      r1,[sp,#0]
0004e8  6031              STR      r1,[r6,#0]
                  |L1.1258|
;;;1299   
;;;1300       return error;
;;;1301   }
0004ea  e708              B        |L1.766|
;;;1302   #ifdef SINGLE_WRITE
                          ENDP

                  Cmd25 PROC
;;;1341   //------------------------------------------------------------------------------
;;;1342   static unsigned char Cmd25(SdCard *pSd,
0004ec  b5ff              PUSH     {r0-r7,lr}
;;;1343                              unsigned short nbBlock,
;;;1344                              unsigned char *pData,
;;;1345                              unsigned int address,
;;;1346                              unsigned int *pStatus)
;;;1347   {
0004ee  b081              SUB      sp,sp,#4
0004f0  9e0a              LDR      r6,[sp,#0x28]
0004f2  0005              MOVS     r5,r0
0004f4  000f              MOVS     r7,r1
;;;1348       SdCmd *pCommand = &(pSd->command);
0004f6  1d2c              ADDS     r4,r5,#4
;;;1349       unsigned char error;
;;;1350       unsigned int response;
;;;1351   
;;;1352       TRACE_DEBUG("Cmd25()\n\r");
;;;1353       ResetCommand(pCommand);
0004f8  0020              MOVS     r0,r4
0004fa  f7fffffe          BL       ResetCommand
;;;1354       // Fill command information
;;;1355       pCommand->cmd = AT91C_WRITE_MULTIPLE_BLOCK_CMD;
0004fe  48eb              LDR      r0,|L1.2220|
000500  6020              STR      r0,[r4,#0]
;;;1356       pCommand->arg = address;
000502  9804              LDR      r0,[sp,#0x10]
000504  6060              STR      r0,[r4,#4]
;;;1357       pCommand->resType = 1;
000506  2001              MOVS     r0,#1
000508  7720              STRB     r0,[r4,#0x1c]
;;;1358       pCommand->pResp = &response;
00050a  4669              MOV      r1,sp
00050c  6121              STR      r1,[r4,#0x10]
;;;1359   
;;;1360       pCommand->blockSize = SD_BLOCK_SIZE;
00050e  49e6              LDR      r1,|L1.2216|
000510  81a1              STRH     r1,[r4,#0xc]
;;;1361       pCommand->nbBlock = nbBlock;
000512  81e7              STRH     r7,[r4,#0xe]
;;;1362       pCommand->pData = pData;
000514  9903              LDR      r1,[sp,#0xc]
000516  60a1              STR      r1,[r4,#8]
;;;1363   
;;;1364       pCommand->dataTran = 1;
000518  7760              STRB     r0,[r4,#0x1d]
;;;1365       pCommand->tranType = MCI_NEW_TRANSFER;
00051a  2000              MOVS     r0,#0
00051c  77a0              STRB     r0,[r4,#0x1e]
;;;1366   
;;;1367       // Send command
;;;1368       error = SendCommand(pSd);
00051e  0028              MOVS     r0,r5
000520  f7fffffe          BL       SendCommand
;;;1369       if (pStatus) *pStatus = response;
000524  2e00              CMP      r6,#0
000526  d001              BEQ      |L1.1324|
000528  9900              LDR      r1,[sp,#0]
00052a  6031              STR      r1,[r6,#0]
                  |L1.1324|
;;;1370   
;;;1371       return error;
;;;1372   }
00052c  e6e7              B        |L1.766|
;;;1373   
                          ENDP

                  Cmd55 PROC
;;;1487   //------------------------------------------------------------------------------
;;;1488   static unsigned char Cmd55(SdCard *pSd)
00052e  b538              PUSH     {r3-r5,lr}
;;;1489   {
000530  0005              MOVS     r5,r0
;;;1490       SdCmd *pCommand = &(pSd->command);
000532  1d2c              ADDS     r4,r5,#4
;;;1491       unsigned char error;
;;;1492       unsigned int response;
;;;1493   
;;;1494       TRACE_DEBUG("Cmd55()\n\r");
;;;1495       ResetCommand(pCommand);
000534  0020              MOVS     r0,r4
000536  f7fffffe          BL       ResetCommand
;;;1496       // Fill command information
;;;1497       pCommand->cmd = AT91C_APP_CMD;
00053a  48dd              LDR      r0,|L1.2224|
00053c  6020              STR      r0,[r4,#0]
;;;1498       pCommand->arg = (pSd->cardAddress << 16);
00053e  48dd              LDR      r0,|L1.2228|
000540  1828              ADDS     r0,r5,r0
000542  8b80              LDRH     r0,[r0,#0x1c]
000544  0400              LSLS     r0,r0,#16
000546  6060              STR      r0,[r4,#4]
;;;1499       pCommand->resType = 1;
000548  2001              MOVS     r0,#1
00054a  7720              STRB     r0,[r4,#0x1c]
;;;1500       pCommand->pResp = &response;
00054c  4668              MOV      r0,sp
00054e  6120              STR      r0,[r4,#0x10]
;;;1501   
;;;1502       // Send command
;;;1503       error = SendCommand(pSd);
000550  0028              MOVS     r0,r5
000552  f7fffffe          BL       SendCommand
;;;1504   
;;;1505       return error;
;;;1506   }
000556  bd38              POP      {r3-r5,pc}
;;;1507   
                          ENDP

                  Acmd6 PROC
;;;1567   //------------------------------------------------------------------------------
;;;1568   static unsigned char Acmd6(SdCard *pSd, unsigned char busWidth)
000558  b5f8              PUSH     {r3-r7,lr}
;;;1569   {
00055a  0006              MOVS     r6,r0
00055c  000f              MOVS     r7,r1
;;;1570       SdCmd *pCommand = &(pSd->command);
00055e  1d34              ADDS     r4,r6,#4
;;;1571       unsigned char error;
;;;1572       unsigned int response;
;;;1573   
;;;1574       TRACE_DEBUG("Acmd6()\n\r");
;;;1575   
;;;1576       error = Cmd55(pSd);
000560  0030              MOVS     r0,r6
000562  f7fffffe          BL       Cmd55
000566  0005              MOVS     r5,r0
;;;1577       if (error) {
000568  2d00              CMP      r5,#0
00056a  d014              BEQ      |L1.1430|
;;;1578           TRACE_ERROR("Acmd6.Cmd55: %d\n\r", error);
00056c  201b              MOVS     r0,#0x1b
00056e  f7fffffe          BL       ShellPutByte
000572  48d1              LDR      r0,|L1.2232|
000574  f7fffffe          BL       ShellPrintf
000578  201b              MOVS     r0,#0x1b
00057a  f7fffffe          BL       ShellPutByte
00057e  a0cf              ADR      r0,|L1.2236|
000580  f7fffffe          BL       ShellPrintf
000584  0029              MOVS     r1,r5
000586  a0ce              ADR      r0,|L1.2240|
000588  f7fffffe          BL       ShellPrintf
00058c  a0d1              ADR      r0,|L1.2260|
00058e  f7fffffe          BL       ShellPrintf
;;;1579           return error;
000592  0028              MOVS     r0,r5
;;;1580       }
;;;1581   
;;;1582       ResetCommand(pCommand);
;;;1583       // Fill command information
;;;1584       pCommand->cmd = AT91C_SD_SET_BUS_WIDTH_CMD;
;;;1585       pCommand->arg = (busWidth == 4) ? SD_STAT_DATA_BUS_WIDTH_4BIT :
;;;1586                                         SD_STAT_DATA_BUS_WIDTH_1BIT;
;;;1587       pCommand->resType = 1;
;;;1588       pCommand->pResp = &response;
;;;1589   
;;;1590       // Send command
;;;1591       return SendCommand(pSd);
;;;1592   }
000594  e741              B        |L1.1050|
                  |L1.1430|
000596  0020              MOVS     r0,r4                 ;1582
000598  f7fffffe          BL       ResetCommand
00059c  48ce              LDR      r0,|L1.2264|
00059e  6020              STR      r0,[r4,#0]            ;1584
0005a0  2f04              CMP      r7,#4                 ;1585
0005a2  d009              BEQ      |L1.1464|
0005a4  2000              MOVS     r0,#0                 ;1586
                  |L1.1446|
0005a6  6060              STR      r0,[r4,#4]            ;1586
0005a8  2001              MOVS     r0,#1                 ;1587
0005aa  7720              STRB     r0,[r4,#0x1c]         ;1587
0005ac  4668              MOV      r0,sp                 ;1588
0005ae  6120              STR      r0,[r4,#0x10]         ;1588
0005b0  0030              MOVS     r0,r6                 ;1591
0005b2  f7fffffe          BL       SendCommand
0005b6  e730              B        |L1.1050|
                  |L1.1464|
0005b8  2002              MOVS     r0,#2                 ;1585
0005ba  e7f4              B        |L1.1446|
;;;1593   
                          ENDP

                  Acmd13 PROC
;;;1598   //------------------------------------------------------------------------------
;;;1599   static unsigned char Acmd13(SdCard *pSd, unsigned int * pSdSTAT)
0005bc  b5f8              PUSH     {r3-r7,lr}
;;;1600   {
0005be  0006              MOVS     r6,r0
0005c0  000f              MOVS     r7,r1
;;;1601       SdCmd *pCommand = &(pSd->command);
0005c2  1d34              ADDS     r4,r6,#4
;;;1602       unsigned char error;
;;;1603       unsigned int response[1];
;;;1604   
;;;1605       TRACE_DEBUG("Acmd13()\n\r");
;;;1606   
;;;1607       error = Cmd55(pSd);
0005c4  0030              MOVS     r0,r6
0005c6  f7fffffe          BL       Cmd55
0005ca  0005              MOVS     r5,r0
;;;1608       if (error) {
0005cc  2d00              CMP      r5,#0
0005ce  d014              BEQ      |L1.1530|
;;;1609           TRACE_ERROR("Acmd13.Cmd55: %d\n\r", error);
0005d0  201b              MOVS     r0,#0x1b
0005d2  f7fffffe          BL       ShellPutByte
0005d6  48b8              LDR      r0,|L1.2232|
0005d8  f7fffffe          BL       ShellPrintf
0005dc  201b              MOVS     r0,#0x1b
0005de  f7fffffe          BL       ShellPutByte
0005e2  a0b6              ADR      r0,|L1.2236|
0005e4  f7fffffe          BL       ShellPrintf
0005e8  0029              MOVS     r1,r5
0005ea  a0bc              ADR      r0,|L1.2268|
0005ec  f7fffffe          BL       ShellPrintf
0005f0  a0b8              ADR      r0,|L1.2260|
0005f2  f7fffffe          BL       ShellPrintf
;;;1610           return error;
0005f6  0028              MOVS     r0,r5
;;;1611       }
;;;1612   
;;;1613       ResetCommand(pCommand);
;;;1614       // Fill command information
;;;1615       pCommand->cmd = AT91C_SD_STATUS_CMD;
;;;1616       pCommand->resType = 1;
;;;1617       pCommand->pResp = response;
;;;1618   
;;;1619       pCommand->blockSize = 512 / 8;
;;;1620       pCommand->nbBlock = 1;
;;;1621       pCommand->pData = (unsigned char*)pSdSTAT;
;;;1622   
;;;1623       pCommand->dataTran = 1;
;;;1624       pCommand->isRead = 1;
;;;1625       pCommand->tranType = MCI_NEW_TRANSFER;
;;;1626   
;;;1627       // Send command
;;;1628       error = SendCommand(pSd);
;;;1629   
;;;1630       return error;
;;;1631   }
0005f8  e70f              B        |L1.1050|
                  |L1.1530|
0005fa  0020              MOVS     r0,r4                 ;1613
0005fc  f7fffffe          BL       ResetCommand
000600  48bb              LDR      r0,|L1.2288|
000602  6020              STR      r0,[r4,#0]            ;1615
000604  2001              MOVS     r0,#1                 ;1616
000606  7720              STRB     r0,[r4,#0x1c]         ;1616
000608  4669              MOV      r1,sp                 ;1617
00060a  6121              STR      r1,[r4,#0x10]         ;1617
00060c  2140              MOVS     r1,#0x40              ;1619
00060e  81a1              STRH     r1,[r4,#0xc]          ;1619
000610  81e0              STRH     r0,[r4,#0xe]          ;1620
000612  60a7              STR      r7,[r4,#8]            ;1621
000614  7760              STRB     r0,[r4,#0x1d]         ;1623
000616  77e0              STRB     r0,[r4,#0x1f]         ;1624
000618  2000              MOVS     r0,#0                 ;1625
00061a  77a0              STRB     r0,[r4,#0x1e]         ;1625
00061c  0030              MOVS     r0,r6                 ;1628
00061e  f7fffffe          BL       SendCommand
000622  e6fa              B        |L1.1050|
;;;1632   
                          ENDP

                  Acmd41 PROC
;;;1639   //------------------------------------------------------------------------------
;;;1640   static unsigned char Acmd41(SdCard *pSd, unsigned char hcs, unsigned char *pCCS)
000624  b5f8              PUSH     {r3-r7,lr}
;;;1641   {
000626  0007              MOVS     r7,r0
000628  000d              MOVS     r5,r1
00062a  0016              MOVS     r6,r2
;;;1642       SdCmd *pCommand = &(pSd->command);
00062c  1d3c              ADDS     r4,r7,#4
                  |L1.1582|
;;;1643       unsigned char error;
;;;1644       unsigned int  response;
;;;1645   
;;;1646       do {
;;;1647           error = Cmd55(pSd);
00062e  0038              MOVS     r0,r7
000630  f7fffffe          BL       Cmd55
;;;1648           if (error) {
000634  2800              CMP      r0,#0
000636  d11a              BNE      |L1.1646|
;;;1649               return error;
;;;1650           }
;;;1651   
;;;1652           ResetCommand(pCommand);
000638  0020              MOVS     r0,r4
00063a  f7fffffe          BL       ResetCommand
;;;1653           // Fill command information
;;;1654           pCommand->cmd = AT91C_SD_APP_OP_COND_CMD;
00063e  2069              MOVS     r0,#0x69
000640  6020              STR      r0,[r4,#0]
;;;1655           pCommand->arg = AT91C_MMC_HOST_VOLTAGE_RANGE;
000642  48ac              LDR      r0,|L1.2292|
000644  6060              STR      r0,[r4,#4]
;;;1656           if (hcs) {
000646  2d00              CMP      r5,#0
000648  d001              BEQ      |L1.1614|
;;;1657               pCommand->arg |= AT91C_CCS;
00064a  48ab              LDR      r0,|L1.2296|
00064c  6060              STR      r0,[r4,#4]
                  |L1.1614|
;;;1658           }
;;;1659   
;;;1660           pCommand->resType = 3;
00064e  2003              MOVS     r0,#3
000650  7720              STRB     r0,[r4,#0x1c]
;;;1661           pCommand->pResp = &response;
000652  4668              MOV      r0,sp
000654  6120              STR      r0,[r4,#0x10]
;;;1662   
;;;1663           // Send command
;;;1664           TRACE_DEBUG("Acmd41()\n\r");
;;;1665           error = SendCommand(pSd);
000656  0038              MOVS     r0,r7
000658  f7fffffe          BL       SendCommand
;;;1666           if (error) {
00065c  2800              CMP      r0,#0
00065e  d106              BNE      |L1.1646|
;;;1667               return error;
;;;1668           }
;;;1669           *pCCS  = ((response & AT91C_CCS) != 0);
000660  9800              LDR      r0,[sp,#0]
000662  0041              LSLS     r1,r0,#1
000664  0fc9              LSRS     r1,r1,#31
000666  7031              STRB     r1,[r6,#0]
;;;1670       }
;;;1671       while ((response & AT91C_CARD_POWER_UP_BUSY) != AT91C_CARD_POWER_UP_BUSY);
000668  2800              CMP      r0,#0
00066a  dae0              BGE      |L1.1582|
;;;1672   
;;;1673       return 0;
00066c  2000              MOVS     r0,#0
                  |L1.1646|
;;;1674   }
00066e  e6d4              B        |L1.1050|
;;;1675   
                          ENDP

                  Acmd51 PROC
;;;1680   //------------------------------------------------------------------------------
;;;1681   static unsigned char Acmd51(SdCard *pSd, unsigned int * pSCR)
000670  b5f8              PUSH     {r3-r7,lr}
;;;1682   {
000672  0006              MOVS     r6,r0
000674  000f              MOVS     r7,r1
;;;1683       SdCmd *pCommand = &(pSd->command);
000676  1d34              ADDS     r4,r6,#4
;;;1684       unsigned char error;
;;;1685       unsigned int response[1];
;;;1686   
;;;1687       TRACE_DEBUG("Acmd51()\n\r");
;;;1688   
;;;1689       error = Cmd55(pSd);
000678  0030              MOVS     r0,r6
00067a  f7fffffe          BL       Cmd55
00067e  0005              MOVS     r5,r0
;;;1690       if (error) {
000680  2d00              CMP      r5,#0
000682  d014              BEQ      |L1.1710|
;;;1691           TRACE_ERROR("Acmd51.Cmd55: %d\n\r", error);
000684  201b              MOVS     r0,#0x1b
000686  f7fffffe          BL       ShellPutByte
00068a  488b              LDR      r0,|L1.2232|
00068c  f7fffffe          BL       ShellPrintf
000690  201b              MOVS     r0,#0x1b
000692  f7fffffe          BL       ShellPutByte
000696  a089              ADR      r0,|L1.2236|
000698  f7fffffe          BL       ShellPrintf
00069c  0029              MOVS     r1,r5
00069e  a097              ADR      r0,|L1.2300|
0006a0  f7fffffe          BL       ShellPrintf
0006a4  a08b              ADR      r0,|L1.2260|
0006a6  f7fffffe          BL       ShellPrintf
;;;1692           return error;
0006aa  0028              MOVS     r0,r5
;;;1693       }
;;;1694   
;;;1695       ResetCommand(pCommand);
;;;1696       // Fill command information
;;;1697       pCommand->cmd = AT91C_SD_SEND_SCR_CMD;
;;;1698       pCommand->resType = 1;
;;;1699       pCommand->pResp = response;
;;;1700   
;;;1701       pCommand->blockSize = 64 / 8;
;;;1702       pCommand->nbBlock = 1;
;;;1703       pCommand->pData = (unsigned char*)pSCR;
;;;1704   
;;;1705       pCommand->dataTran = 1;
;;;1706       pCommand->isRead = 1;
;;;1707       pCommand->tranType = MCI_NEW_TRANSFER;
;;;1708   
;;;1709       // Send command
;;;1710       error = SendCommand(pSd);
;;;1711   
;;;1712       //if (!error) Int2MsbFirstStream((unsigned char*)pSCR, 8 / 4);
;;;1713   
;;;1714       return error;
;;;1715   }
0006ac  e6b5              B        |L1.1050|
                  |L1.1710|
0006ae  0020              MOVS     r0,r4                 ;1695
0006b0  f7fffffe          BL       ResetCommand
0006b4  4896              LDR      r0,|L1.2320|
0006b6  6020              STR      r0,[r4,#0]            ;1697
0006b8  2001              MOVS     r0,#1                 ;1698
0006ba  7720              STRB     r0,[r4,#0x1c]         ;1698
0006bc  4669              MOV      r1,sp                 ;1699
0006be  6121              STR      r1,[r4,#0x10]         ;1699
0006c0  2108              MOVS     r1,#8                 ;1701
0006c2  81a1              STRH     r1,[r4,#0xc]          ;1701
0006c4  81e0              STRH     r0,[r4,#0xe]          ;1702
0006c6  60a7              STR      r7,[r4,#8]            ;1703
0006c8  7760              STRB     r0,[r4,#0x1d]         ;1705
0006ca  77e0              STRB     r0,[r4,#0x1f]         ;1706
0006cc  2000              MOVS     r0,#0                 ;1707
0006ce  77a0              STRB     r0,[r4,#0x1e]         ;1707
0006d0  0030              MOVS     r0,r6                 ;1710
0006d2  f7fffffe          BL       SendCommand
0006d6  e6a0              B        |L1.1050|
;;;1716   
                          ENDP

                  ContinuousRead PROC
;;;1779   //------------------------------------------------------------------------------
;;;1780   static unsigned char ContinuousRead(SdCard *pSd,
0006d8  b5ff              PUSH     {r0-r7,lr}
;;;1781                                       unsigned short nbBlock,
;;;1782                                       unsigned char *pData,
;;;1783                                       SdCallback     pCb,
;;;1784                                       void          *pArg)
;;;1785   {
0006da  0005              MOVS     r5,r0
0006dc  000e              MOVS     r6,r1
0006de  0017              MOVS     r7,r2
0006e0  b081              SUB      sp,sp,#4
;;;1786       SdCmd *pCommand = &(pSd->command);
0006e2  1d2c              ADDS     r4,r5,#4
;;;1787   
;;;1788       TRACE_DEBUG_WP(".");
0006e4  a08b              ADR      r0,|L1.2324|
0006e6  f7fffffe          BL       ShellPrintf
;;;1789       ResetCommand(pCommand);
0006ea  0020              MOVS     r0,r4
0006ec  f7fffffe          BL       ResetCommand
;;;1790       // Fill command information
;;;1791       pCommand->blockSize = SD_BLOCK_SIZE;
0006f0  486d              LDR      r0,|L1.2216|
0006f2  81a0              STRH     r0,[r4,#0xc]
;;;1792       pCommand->nbBlock   = nbBlock;
0006f4  81e6              STRH     r6,[r4,#0xe]
;;;1793       pCommand->pData     = pData;
0006f6  60a7              STR      r7,[r4,#8]
;;;1794   
;;;1795       pCommand->dataTran = 1;
0006f8  2001              MOVS     r0,#1
0006fa  7760              STRB     r0,[r4,#0x1d]
;;;1796       pCommand->tranType = MCI_CONTINUE_TRANSFER;
0006fc  77a0              STRB     r0,[r4,#0x1e]
;;;1797       pCommand->isRead = 1;
0006fe  77e0              STRB     r0,[r4,#0x1f]
;;;1798       
;;;1799       pCommand->callback = pCb;
000700  9804              LDR      r0,[sp,#0x10]
000702  6160              STR      r0,[r4,#0x14]
;;;1800       pCommand->pArg     = pArg;
000704  980a              LDR      r0,[sp,#0x28]
000706  61a0              STR      r0,[r4,#0x18]
;;;1801   
;;;1802       // Send command
;;;1803       return SendCommand(pSd);
000708  0028              MOVS     r0,r5
00070a  f7fffffe          BL       SendCommand
                  |L1.1806|
;;;1804   }
00070e  e5f6              B        |L1.766|
;;;1805   
                          ENDP

                  ContinuousWrite PROC
;;;1812   //------------------------------------------------------------------------------
;;;1813   static unsigned char ContinuousWrite(SdCard *pSd,
000710  b5ff              PUSH     {r0-r7,lr}
;;;1814                                        unsigned short nbBlock,
;;;1815                                        const unsigned char *pData,
;;;1816                                        SdCallback     pCb,
;;;1817                                        void          *pArg)
;;;1818   {
000712  0005              MOVS     r5,r0
000714  000e              MOVS     r6,r1
000716  0017              MOVS     r7,r2
000718  b081              SUB      sp,sp,#4
;;;1819       SdCmd *pCommand = &(pSd->command);
00071a  1d2c              ADDS     r4,r5,#4
;;;1820   
;;;1821       TRACE_DEBUG("Write()\n\r");
;;;1822       ResetCommand(pCommand);
00071c  0020              MOVS     r0,r4
00071e  f7fffffe          BL       ResetCommand
;;;1823       // Fill command information
;;;1824       pCommand->blockSize = SD_BLOCK_SIZE;
000722  4861              LDR      r0,|L1.2216|
000724  81a0              STRH     r0,[r4,#0xc]
;;;1825       pCommand->nbBlock   = nbBlock;
000726  81e6              STRH     r6,[r4,#0xe]
;;;1826       pCommand->pData     = (unsigned char*)pData;
000728  60a7              STR      r7,[r4,#8]
;;;1827   
;;;1828       pCommand->dataTran = 1;
00072a  2001              MOVS     r0,#1
00072c  7760              STRB     r0,[r4,#0x1d]
;;;1829       pCommand->tranType = MCI_CONTINUE_TRANSFER;
00072e  77a0              STRB     r0,[r4,#0x1e]
;;;1830       
;;;1831       pCommand->callback = pCb;
000730  9804              LDR      r0,[sp,#0x10]
000732  6160              STR      r0,[r4,#0x14]
;;;1832       pCommand->pArg     = pArg;
000734  980a              LDR      r0,[sp,#0x28]
000736  61a0              STR      r0,[r4,#0x18]
;;;1833   
;;;1834       // Send command
;;;1835       return SendCommand(pSd);
000738  0028              MOVS     r0,r5
00073a  f7fffffe          BL       SendCommand
                  |L1.1854|
;;;1836   }
00073e  e5de              B        |L1.766|
;;;1837   
                          ENDP

                  SwReset PROC
;;;1843   //------------------------------------------------------------------------------
;;;1844   static unsigned char SwReset(SdCard *pSd, unsigned int retry)
000740  b570              PUSH     {r4-r6,lr}
;;;1845   {
000742  0006              MOVS     r6,r0
000744  000d              MOVS     r5,r1
;;;1846       unsigned int i;
;;;1847       unsigned char error = 0;
000746  2000              MOVS     r0,#0
;;;1848   
;;;1849       for (i = 0; i < retry; i ++) {
000748  2400              MOVS     r4,#0
00074a  e006              B        |L1.1882|
                  |L1.1868|
;;;1850           error = Cmd0(pSd, 0);
00074c  2100              MOVS     r1,#0
00074e  0030              MOVS     r0,r6
000750  f7fffffe          BL       Cmd0
;;;1851           if (error != MCI_STATUS_NORESPONSE)
000754  2803              CMP      r0,#3
000756  d102              BNE      |L1.1886|
000758  1c64              ADDS     r4,r4,#1              ;1849
                  |L1.1882|
00075a  42ac              CMP      r4,r5                 ;1849
00075c  d3f6              BCC      |L1.1868|
                  |L1.1886|
;;;1852               break;
;;;1853       }
;;;1854       return error;
;;;1855   }
00075e  bd70              POP      {r4-r6,pc}
;;;1856   /*
                          ENDP

                  MoveToTranState PROC
;;;1895   //------------------------------------------------------------------------------
;;;1896   static unsigned char MoveToTranState(SdCard * pSd)
000760  b538              PUSH     {r3-r5,lr}
;;;1897   {
000762  0005              MOVS     r5,r0
;;;1898       unsigned char error;
;;;1899       unsigned int  status;
;;;1900   
;;;1901       // Quit transfer state
;;;1902       if((pSd->state == SD_STATE_READ)
000764  2013              MOVS     r0,#0x13
000766  0140              LSLS     r0,r0,#5
000768  1828              ADDS     r0,r5,r0
00076a  7800              LDRB     r0,[r0,#0]
00076c  2810              CMP      r0,#0x10
00076e  d001              BEQ      |L1.1908|
;;;1903       || (pSd->state == SD_STATE_WRITE)) {
000770  2820              CMP      r0,#0x20
000772  d120              BNE      |L1.1974|
                  |L1.1908|
;;;1904   
;;;1905           error = Cmd12(pSd,
000774  2810              CMP      r0,#0x10
000776  d01c              BEQ      |L1.1970|
000778  2100              MOVS     r1,#0
                  |L1.1914|
00077a  0028              MOVS     r0,r5
00077c  466a              MOV      r2,sp
00077e  f7fffffe          BL       Cmd12
000782  0004              MOVS     r4,r0
;;;1906                         (pSd->state == SD_STATE_READ),
;;;1907                         &status);
;;;1908           if (error) {
000784  2c00              CMP      r4,#0
000786  d016              BEQ      |L1.1974|
;;;1909               TRACE_ERROR("MvToTran.Cmd12: %d\n\r", error);
000788  201b              MOVS     r0,#0x1b
00078a  f7fffffe          BL       ShellPutByte
00078e  484a              LDR      r0,|L1.2232|
000790  f7fffffe          BL       ShellPrintf
000794  201b              MOVS     r0,#0x1b
000796  f7fffffe          BL       ShellPutByte
00079a  a048              ADR      r0,|L1.2236|
00079c  f7fffffe          BL       ShellPrintf
0007a0  0021              MOVS     r1,r4
0007a2  a05d              ADR      r0,|L1.2328|
0007a4  f7fffffe          BL       ShellPrintf
0007a8  a04a              ADR      r0,|L1.2260|
0007aa  f7fffffe          BL       ShellPrintf
;;;1910               return error;
0007ae  0020              MOVS     r0,r4
;;;1911           }
;;;1912       }
;;;1913   
;;;1914       // Put device into tran state
;;;1915       error = Cmd13(pSd, &status);
;;;1916       if (error) {
;;;1917           TRACE_ERROR("MvToTran.Cmd13: %d\n\r", error);
;;;1918           return error;
;;;1919       }
;;;1920       if ((status & STATUS_STATE) == STATUS_STBY) {
;;;1921           error = Cmd7(pSd, pSd->cardAddress);
;;;1922           if (error) {
;;;1923               TRACE_ERROR("MvToTran.Cmd7: %d\n\r", error);
;;;1924               return error;
;;;1925           }
;;;1926       }
;;;1927   
;;;1928       return 0;
;;;1929   }
0007b0  bd38              POP      {r3-r5,pc}
                  |L1.1970|
0007b2  2101              MOVS     r1,#1                 ;1905
0007b4  e7e1              B        |L1.1914|
                  |L1.1974|
0007b6  0028              MOVS     r0,r5                 ;1915
0007b8  4669              MOV      r1,sp                 ;1915
0007ba  f7fffffe          BL       Cmd13
0007be  0004              MOVS     r4,r0                 ;1915
0007c0  2c00              CMP      r4,#0                 ;1916
0007c2  d014              BEQ      |L1.2030|
0007c4  201b              MOVS     r0,#0x1b              ;1917
0007c6  f7fffffe          BL       ShellPutByte
0007ca  483b              LDR      r0,|L1.2232|
0007cc  f7fffffe          BL       ShellPrintf
0007d0  201b              MOVS     r0,#0x1b              ;1917
0007d2  f7fffffe          BL       ShellPutByte
0007d6  a039              ADR      r0,|L1.2236|
0007d8  f7fffffe          BL       ShellPrintf
0007dc  0021              MOVS     r1,r4                 ;1917
0007de  a054              ADR      r0,|L1.2352|
0007e0  f7fffffe          BL       ShellPrintf
0007e4  a03b              ADR      r0,|L1.2260|
0007e6  f7fffffe          BL       ShellPrintf
0007ea  0020              MOVS     r0,r4                 ;1918
0007ec  bd38              POP      {r3-r5,pc}
                  |L1.2030|
0007ee  9800              LDR      r0,[sp,#0]            ;1920
0007f0  04c0              LSLS     r0,r0,#19             ;1920
0007f2  0f00              LSRS     r0,r0,#28             ;1920
0007f4  2803              CMP      r0,#3                 ;1920
0007f6  d11d              BNE      |L1.2100|
0007f8  482e              LDR      r0,|L1.2228|
0007fa  1828              ADDS     r0,r5,r0              ;1921
0007fc  8b81              LDRH     r1,[r0,#0x1c]         ;1921
0007fe  0028              MOVS     r0,r5                 ;1921
000800  f7fffffe          BL       Cmd7
000804  0004              MOVS     r4,r0                 ;1921
000806  2c00              CMP      r4,#0                 ;1922
000808  d014              BEQ      |L1.2100|
00080a  201b              MOVS     r0,#0x1b              ;1923
00080c  f7fffffe          BL       ShellPutByte
000810  4829              LDR      r0,|L1.2232|
000812  f7fffffe          BL       ShellPrintf
000816  201b              MOVS     r0,#0x1b              ;1923
000818  f7fffffe          BL       ShellPutByte
00081c  a027              ADR      r0,|L1.2236|
00081e  f7fffffe          BL       ShellPrintf
000822  0021              MOVS     r1,r4                 ;1923
000824  a048              ADR      r0,|L1.2376|
000826  f7fffffe          BL       ShellPrintf
00082a  a02a              ADR      r0,|L1.2260|
00082c  f7fffffe          BL       ShellPrintf
000830  0020              MOVS     r0,r4                 ;1924
000832  bd38              POP      {r3-r5,pc}
                  |L1.2100|
000834  2000              MOVS     r0,#0                 ;1928
000836  bd38              POP      {r3-r5,pc}
;;;1930   
                          ENDP

                  MoveToTransferState PROC
;;;2035   //------------------------------------------------------------------------------
;;;2036   static unsigned char MoveToTransferState(SdCard *pSd,
000838  b5ff              PUSH     {r0-r7,lr}
;;;2037                                            unsigned int address,
;;;2038                                            unsigned short nbBlocks,
;;;2039                                            unsigned char *pData,
;;;2040                                            unsigned char isRead)
;;;2041   {
00083a  b083              SUB      sp,sp,#0xc
00083c  9f0c              LDR      r7,[sp,#0x30]
00083e  000c              MOVS     r4,r1
;;;2042       unsigned int status;
;;;2043       unsigned char error;
;;;2044   
;;;2045       if(    (pSd->state == SD_STATE_READ)
000840  9803              LDR      r0,[sp,#0xc]
000842  2113              MOVS     r1,#0x13
000844  0149              LSLS     r1,r1,#5
000846  1846              ADDS     r6,r0,r1
000848  7830              LDRB     r0,[r6,#0]
00084a  2810              CMP      r0,#0x10
00084c  d001              BEQ      |L1.2130|
;;;2046           || (pSd->state == SD_STATE_WRITE)) {
00084e  2820              CMP      r0,#0x20
000850  d127              BNE      |L1.2210|
                  |L1.2130|
;;;2047   #if 1//!defined(MCI2_INTERFACE)
;;;2048           if (pSd->state == SD_STATE_WRITE) {
000852  2820              CMP      r0,#0x20
000854  d10b              BNE      |L1.2158|
;;;2049               DBGU_PutByte(0);
000856  2000              MOVS     r0,#0
000858  f7fffffe          BL       DBGU_PutByte
;;;2050               DBGU_PutByte(0);
00085c  2000              MOVS     r0,#0
00085e  f7fffffe          BL       DBGU_PutByte
;;;2051               DBGU_PutByte(0);
000862  2000              MOVS     r0,#0
000864  f7fffffe          BL       DBGU_PutByte
;;;2052               DBGU_PutByte(0);
000868  2000              MOVS     r0,#0
00086a  f7fffffe          BL       DBGU_PutByte
                  |L1.2158|
;;;2053           }
;;;2054   #endif
;;;2055           // RW MULTI with length
;;;2056           error = Cmd12(pSd,
00086e  7830              LDRB     r0,[r6,#0]
000870  2810              CMP      r0,#0x10
000872  d07d              BEQ      |L1.2416|
000874  2100              MOVS     r1,#0
                  |L1.2166|
000876  9803              LDR      r0,[sp,#0xc]
000878  aa02              ADD      r2,sp,#8
00087a  f7fffffe          BL       Cmd12
00087e  0005              MOVS     r5,r0
;;;2057                         (pSd->state == SD_STATE_READ),
;;;2058                         &status);
;;;2059           if (error) {
000880  2d00              CMP      r5,#0
000882  d077              BEQ      |L1.2420|
;;;2060               TRACE_ERROR("MTTranState.Cmd12: st%x, er%d\n\r", pSd->state, error);
000884  201b              MOVS     r0,#0x1b
000886  f7fffffe          BL       ShellPutByte
00088a  480b              LDR      r0,|L1.2232|
00088c  f7fffffe          BL       ShellPrintf
000890  201b              MOVS     r0,#0x1b
000892  f7fffffe          BL       ShellPutByte
000896  a009              ADR      r0,|L1.2236|
000898  f7fffffe          BL       ShellPrintf
00089c  7831              LDRB     r1,[r6,#0]
00089e  002a              MOVS     r2,r5
0008a0  e05d              B        |L1.2398|
                  |L1.2210|
0008a2  e067              B        |L1.2420|
                  |L1.2212|
                          DCD      0x000d1052
                  |L1.2216|
                          DCD      0x00000200
                  |L1.2220|
                          DCD      0x00091059
                  |L1.2224|
                          DCD      0x00001077
                  |L1.2228|
                          DCD      0x00000240
                  |L1.2232|
                          DCD      ||.text||+0x420
                  |L1.2236|
0008bc  5b6d00            DCB      "[m",0
0008bf  00                DCB      0
                  |L1.2240|
0008c0  41636d64          DCB      "Acmd6.Cmd55: %d\n\r",0
0008c4  362e436d
0008c8  6435353a
0008cc  2025640a
0008d0  0d00    
0008d2  00                DCB      0
0008d3  00                DCB      0
                  |L1.2260|
0008d4  0a0d00            DCB      "\n\r",0
0008d7  00                DCB      0
                  |L1.2264|
                          DCD      0x00001046
                  |L1.2268|
0008dc  41636d64          DCB      "Acmd13.Cmd55: %d\n\r",0
0008e0  31332e43
0008e4  6d643535
0008e8  3a202564
0008ec  0a0d00  
0008ef  00                DCB      0
                  |L1.2288|
                          DCD      0x0005104d
                  |L1.2292|
                          DCD      0x001f8000
                  |L1.2296|
                          DCD      0x401f8000
                  |L1.2300|
0008fc  41636d64          DCB      "Acmd51.Cmd55: %d\n\r",0
000900  35312e43
000904  6d643535
000908  3a202564
00090c  0a0d00  
00090f  00                DCB      0
                  |L1.2320|
                          DCD      0x00051073
                  |L1.2324|
000914  2e00              DCB      ".",0
000916  00                DCB      0
000917  00                DCB      0
                  |L1.2328|
000918  4d76546f          DCB      "MvToTran.Cmd12: %d\n\r",0
00091c  5472616e
000920  2e436d64
000924  31323a20
000928  25640a0d
00092c  00      
00092d  00                DCB      0
00092e  00                DCB      0
00092f  00                DCB      0
                  |L1.2352|
000930  4d76546f          DCB      "MvToTran.Cmd13: %d\n\r",0
000934  5472616e
000938  2e436d64
00093c  31333a20
000940  25640a0d
000944  00      
000945  00                DCB      0
000946  00                DCB      0
000947  00                DCB      0
                  |L1.2376|
000948  4d76546f          DCB      "MvToTran.Cmd7: %d\n\r",0
00094c  5472616e
000950  2e436d64
000954  373a2025
000958  640a0d00
00095c  e008              B        |L1.2416|
                  |L1.2398|
00095e  a0f3              ADR      r0,|L1.3372|
000960  f7fffffe          BL       ShellPrintf
000964  a0f9              ADR      r0,|L1.3404|
000966  f7fffffe          BL       ShellPrintf
;;;2061               return error;
00096a  0028              MOVS     r0,r5
                  |L1.2412|
;;;2062           }
;;;2063   #if !defined(MCI2_INTERFACE)
;;;2064           // RW MULTI Infinite
;;;2065           if (pSd->state == SD_STATE_WRITE) {
;;;2066               while(MCI_CheckBusy((Mci *)pSd->pSdDriver) != 0);
;;;2067           }
;;;2068   #endif
;;;2069       }
;;;2070   
;;;2071       if(isRead) {
;;;2072           // Wait for card to be ready for data transfers
;;;2073           do {
;;;2074               error = Cmd13(pSd, &status);
;;;2075               if (error) {
;;;2076                   TRACE_ERROR("MTTranState.RD.Cmd13: %d\n\r", error);
;;;2077                   return error;
;;;2078               }
;;;2079               if(  ((status & STATUS_STATE) == STATUS_IDLE)
;;;2080                  ||((status & STATUS_STATE) == STATUS_READY)
;;;2081                  ||((status & STATUS_STATE) == STATUS_IDENT)) {
;;;2082                   TRACE_ERROR("Pb Card Identification mode\n\r");
;;;2083                   return SD_ERROR_NOT_INITIALIZED;
;;;2084               }
;;;2085               // If the card is in sending data state or in receivce data state
;;;2086               if (  ((status & STATUS_STATE) == STATUS_RCV)
;;;2087                   ||((status & STATUS_STATE) == STATUS_DATA) ){
;;;2088   
;;;2089                   TRACE_DEBUG("state = 0x%X\n\r", (status & STATUS_STATE) >> 9);
;;;2090               }
;;;2091           }
;;;2092           while (    ((status & STATUS_READY_FOR_DATA) == 0)
;;;2093                   || ((status & STATUS_STATE) != STATUS_TRAN) );
;;;2094           ASSERT((status & STATUS_STATE) == STATUS_TRAN,
;;;2095                   "SD Card can't be configured in transfer state 0x%X\n\r",
;;;2096                   (status & STATUS_STATE)>>9);
;;;2097           // Read data
;;;2098           // Move to Sending data state
;;;2099           error = Cmd18(pSd, nbBlocks, pData, SD_ADDRESS(pSd,address), &status);
;;;2100           if (error) {
;;;2101               TRACE_ERROR("MTTranState.Cmd18: %d\n\r", error);
;;;2102               return error;
;;;2103           }
;;;2104           if (status & ~(STATUS_READY_FOR_DATA | STATUS_STATE)) {
;;;2105               TRACE_ERROR("CMD18.stat: %x\n\r",
;;;2106                   status & ~(STATUS_READY_FOR_DATA | STATUS_STATE));
;;;2107               return SD_ERROR_DRIVER;
;;;2108           }
;;;2109       }
;;;2110       else {
;;;2111           // Wait for card to be ready for data transfers
;;;2112           do {
;;;2113               error = Cmd13(pSd, &status);
;;;2114               if (error) {
;;;2115                   TRACE_ERROR("MoveToTransferState.WR.Cmd13: %d\n\r", error);
;;;2116                   return error;
;;;2117               }
;;;2118           }
;;;2119           while ((status & STATUS_READY_FOR_DATA) == 0);
;;;2120           // Move to Sending data state
;;;2121           error = Cmd25(pSd, nbBlocks, pData, SD_ADDRESS(pSd,address), &status);
;;;2122           if (error) {
;;;2123               TRACE_DEBUG("MoveToTransferState.Cmd25: %d\n\r", error);
;;;2124               return error;
;;;2125           }
;;;2126           if (status & (STATUS_WRITE & ~(STATUS_READY_FOR_DATA | STATUS_STATE))) {
;;;2127               TRACE_ERROR("CMD25(0x%x, %d).stat: %x\n\r",
;;;2128                   SD_ADDRESS(pSd,address), nbBlocks,
;;;2129                   status & (STATUS_WRITE
;;;2130                               & ~(STATUS_READY_FOR_DATA | STATUS_STATE)));
;;;2131               return SD_ERROR_DRIVER;
;;;2132           }
;;;2133       }
;;;2134   
;;;2135       if (!error) pSd->preBlock = address + (nbBlocks-1);
;;;2136       return error;
;;;2137   }
00096c  b007              ADD      sp,sp,#0x1c
00096e  bdf0              POP      {r4-r7,pc}
                  |L1.2416|
000970  2101              MOVS     r1,#1                 ;2056
000972  e780              B        |L1.2166|
                  |L1.2420|
000974  9803              LDR      r0,[sp,#0xc]          ;2099
000976  2109              MOVS     r1,#9                 ;2099
000978  0189              LSLS     r1,r1,#6              ;2099
00097a  1845              ADDS     r5,r0,r1              ;2099
00097c  0266              LSLS     r6,r4,#9              ;2099
00097e  2f00              CMP      r7,#0                 ;2071
000980  d07d              BEQ      |L1.2686|
                  |L1.2434|
000982  9803              LDR      r0,[sp,#0xc]          ;2074
000984  a902              ADD      r1,sp,#8              ;2074
000986  f7fffffe          BL       Cmd13
00098a  0007              MOVS     r7,r0                 ;2074
00098c  2f00              CMP      r7,#0                 ;2075
00098e  d014              BEQ      |L1.2490|
000990  201b              MOVS     r0,#0x1b              ;2076
000992  f7fffffe          BL       ShellPutByte
000996  48ee              LDR      r0,|L1.3408|
000998  f7fffffe          BL       ShellPrintf
00099c  201b              MOVS     r0,#0x1b              ;2076
00099e  f7fffffe          BL       ShellPutByte
0009a2  a0ec              ADR      r0,|L1.3412|
0009a4  f7fffffe          BL       ShellPrintf
0009a8  0039              MOVS     r1,r7                 ;2076
0009aa  a0eb              ADR      r0,|L1.3416|
0009ac  f7fffffe          BL       ShellPrintf
0009b0  a0e6              ADR      r0,|L1.3404|
0009b2  f7fffffe          BL       ShellPrintf
0009b6  0038              MOVS     r0,r7                 ;2077
0009b8  e7d8              B        |L1.2412|
                  |L1.2490|
0009ba  9902              LDR      r1,[sp,#8]            ;2079
0009bc  04c8              LSLS     r0,r1,#19             ;2079
0009be  0f02              LSRS     r2,r0,#28             ;2079
0009c0  d02b              BEQ      |L1.2586|
0009c2  0f00              LSRS     r0,r0,#28             ;2080
0009c4  2801              CMP      r0,#1                 ;2080
0009c6  d028              BEQ      |L1.2586|
0009c8  2802              CMP      r0,#2                 ;2081
0009ca  d026              BEQ      |L1.2586|
0009cc  05c9              LSLS     r1,r1,#23             ;2092
0009ce  d5d8              BPL      |L1.2434|
0009d0  2804              CMP      r0,#4                 ;2093
0009d2  d1d6              BNE      |L1.2434|
0009d4  a802              ADD      r0,sp,#8              ;2099
0009d6  9000              STR      r0,[sp,#0]            ;2099
0009d8  68e8              LDR      r0,[r5,#0xc]          ;2099
0009da  1c40              ADDS     r0,r0,#1              ;2099
0009dc  d031              BEQ      |L1.2626|
0009de  0033              MOVS     r3,r6                 ;2099
                  |L1.2528|
0009e0  9a06              LDR      r2,[sp,#0x18]         ;2099
0009e2  9905              LDR      r1,[sp,#0x14]         ;2099
0009e4  9803              LDR      r0,[sp,#0xc]          ;2099
0009e6  f7fffffe          BL       Cmd18
0009ea  0007              MOVS     r7,r0                 ;2099
0009ec  2f00              CMP      r7,#0                 ;2100
0009ee  d02a              BEQ      |L1.2630|
0009f0  201b              MOVS     r0,#0x1b              ;2101
0009f2  f7fffffe          BL       ShellPutByte
0009f6  48d6              LDR      r0,|L1.3408|
0009f8  f7fffffe          BL       ShellPrintf
0009fc  201b              MOVS     r0,#0x1b              ;2101
0009fe  f7fffffe          BL       ShellPutByte
000a02  a0d4              ADR      r0,|L1.3412|
000a04  f7fffffe          BL       ShellPrintf
000a08  0039              MOVS     r1,r7                 ;2101
000a0a  a0da              ADR      r0,|L1.3444|
000a0c  f7fffffe          BL       ShellPrintf
000a10  a0ce              ADR      r0,|L1.3404|
000a12  f7fffffe          BL       ShellPrintf
000a16  0038              MOVS     r0,r7                 ;2102
000a18  e7a8              B        |L1.2412|
                  |L1.2586|
000a1a  201b              MOVS     r0,#0x1b              ;2082
000a1c  f7fffffe          BL       ShellPutByte
000a20  48cb              LDR      r0,|L1.3408|
000a22  f7fffffe          BL       ShellPrintf
000a26  201b              MOVS     r0,#0x1b              ;2082
000a28  f7fffffe          BL       ShellPutByte
000a2c  a0c9              ADR      r0,|L1.3412|
000a2e  f7fffffe          BL       ShellPrintf
000a32  a0d6              ADR      r0,|L1.3468|
000a34  f7fffffe          BL       ShellPrintf
000a38  a0c4              ADR      r0,|L1.3404|
000a3a  f7fffffe          BL       ShellPrintf
000a3e  2003              MOVS     r0,#3                 ;2083
000a40  e794              B        |L1.2412|
                  |L1.2626|
000a42  0023              MOVS     r3,r4                 ;2099
000a44  e7cc              B        |L1.2528|
                  |L1.2630|
000a46  9802              LDR      r0,[sp,#8]            ;2104
000a48  261f              MOVS     r6,#0x1f              ;2104
000a4a  0236              LSLS     r6,r6,#8              ;2104
000a4c  43b0              BICS     r0,r0,r6              ;2104
000a4e  d068              BEQ      |L1.2850|
000a50  201b              MOVS     r0,#0x1b              ;2105
000a52  f7fffffe          BL       ShellPutByte
000a56  48be              LDR      r0,|L1.3408|
000a58  f7fffffe          BL       ShellPrintf
000a5c  201b              MOVS     r0,#0x1b              ;2105
000a5e  f7fffffe          BL       ShellPutByte
000a62  a0bc              ADR      r0,|L1.3412|
000a64  f7fffffe          BL       ShellPrintf
000a68  9902              LDR      r1,[sp,#8]            ;2105
000a6a  a0d0              ADR      r0,|L1.3500|
000a6c  43b1              BICS     r1,r1,r6              ;2105
000a6e  f7fffffe          BL       ShellPrintf
000a72  a0b6              ADR      r0,|L1.3404|
000a74  f7fffffe          BL       ShellPrintf
000a78  2001              MOVS     r0,#1                 ;2107
000a7a  e777              B        |L1.2412|
000a7c  e7ff              B        |L1.2686|
                  |L1.2686|
000a7e  9803              LDR      r0,[sp,#0xc]          ;2113
000a80  a902              ADD      r1,sp,#8              ;2113
000a82  f7fffffe          BL       Cmd13
000a86  0007              MOVS     r7,r0                 ;2113
000a88  2f00              CMP      r7,#0                 ;2114
000a8a  d014              BEQ      |L1.2742|
000a8c  201b              MOVS     r0,#0x1b              ;2115
000a8e  f7fffffe          BL       ShellPutByte
000a92  48af              LDR      r0,|L1.3408|
000a94  f7fffffe          BL       ShellPrintf
000a98  201b              MOVS     r0,#0x1b              ;2115
000a9a  f7fffffe          BL       ShellPutByte
000a9e  a0ad              ADR      r0,|L1.3412|
000aa0  f7fffffe          BL       ShellPrintf
000aa4  0039              MOVS     r1,r7                 ;2115
000aa6  a0c6              ADR      r0,|L1.3520|
000aa8  f7fffffe          BL       ShellPrintf
000aac  a0a7              ADR      r0,|L1.3404|
000aae  f7fffffe          BL       ShellPrintf
000ab2  0038              MOVS     r0,r7                 ;2116
000ab4  e75a              B        |L1.2412|
                  |L1.2742|
000ab6  9802              LDR      r0,[sp,#8]            ;2119
000ab8  05c0              LSLS     r0,r0,#23             ;2119
000aba  d5e0              BPL      |L1.2686|
000abc  a802              ADD      r0,sp,#8              ;2121
000abe  9000              STR      r0,[sp,#0]            ;2121
000ac0  68e8              LDR      r0,[r5,#0xc]          ;2121
000ac2  1c40              ADDS     r0,r0,#1              ;2121
000ac4  d00a              BEQ      |L1.2780|
000ac6  0033              MOVS     r3,r6                 ;2121
                  |L1.2760|
000ac8  9a06              LDR      r2,[sp,#0x18]         ;2121
000aca  9905              LDR      r1,[sp,#0x14]         ;2121
000acc  9803              LDR      r0,[sp,#0xc]          ;2121
000ace  f7fffffe          BL       Cmd25
000ad2  0007              MOVS     r7,r0                 ;2121
000ad4  2f00              CMP      r7,#0                 ;2122
000ad6  d003              BEQ      |L1.2784|
000ad8  0038              MOVS     r0,r7                 ;2124
000ada  e747              B        |L1.2412|
                  |L1.2780|
000adc  0023              MOVS     r3,r4                 ;2121
000ade  e7f3              B        |L1.2760|
                  |L1.2784|
000ae0  49c0              LDR      r1,|L1.3556|
000ae2  9802              LDR      r0,[sp,#8]            ;2126
000ae4  4208              TST      r0,r1                 ;2126
000ae6  d01c              BEQ      |L1.2850|
000ae8  201b              MOVS     r0,#0x1b              ;2127
000aea  f7fffffe          BL       ShellPutByte
000aee  4898              LDR      r0,|L1.3408|
000af0  f7fffffe          BL       ShellPrintf
000af4  201b              MOVS     r0,#0x1b              ;2127
000af6  f7fffffe          BL       ShellPutByte
000afa  a096              ADR      r0,|L1.3412|
000afc  f7fffffe          BL       ShellPrintf
000b00  48b8              LDR      r0,|L1.3556|
000b02  9b02              LDR      r3,[sp,#8]            ;2127
000b04  4003              ANDS     r3,r3,r0              ;2127
000b06  68e8              LDR      r0,[r5,#0xc]          ;2127
000b08  1c40              ADDS     r0,r0,#1              ;2127
000b0a  d000              BEQ      |L1.2830|
000b0c  0034              MOVS     r4,r6                 ;2127
                  |L1.2830|
000b0e  9a05              LDR      r2,[sp,#0x14]         ;2127
000b10  0021              MOVS     r1,r4                 ;2127
000b12  a0b5              ADR      r0,|L1.3560|
000b14  f7fffffe          BL       ShellPrintf
000b18  a08c              ADR      r0,|L1.3404|
000b1a  f7fffffe          BL       ShellPrintf
000b1e  2001              MOVS     r0,#1                 ;2131
000b20  e724              B        |L1.2412|
                  |L1.2850|
000b22  9805              LDR      r0,[sp,#0x14]         ;2135
000b24  1820              ADDS     r0,r4,r0              ;2135
000b26  1e40              SUBS     r0,r0,#1              ;2135
000b28  60a8              STR      r0,[r5,#8]            ;2135
000b2a  0038              MOVS     r0,r7                 ;2136
000b2c  e71e              B        |L1.2412|
;;;2138   
                          ENDP

                  SdMmcSwitchHsMode PROC
;;;2147   //------------------------------------------------------------------------------
;;;2148   static unsigned char SdMmcSwitchHsMode(SdCard *pSd, unsigned char hsEnable)
000b2e  b570              PUSH     {r4-r6,lr}
;;;2149   {
000b30  000d              MOVS     r5,r1
000b32  b092              SUB      sp,sp,#0x48
;;;2150       unsigned int status;
;;;2151       unsigned char error = SD_ERROR_DRIVER;
000b34  2401              MOVS     r4,#1
;;;2152       if (pSd->mode == hsEnable)
000b36  2109              MOVS     r1,#9
000b38  0189              LSLS     r1,r1,#6
000b3a  1846              ADDS     r6,r0,r1
000b3c  7ff1              LDRB     r1,[r6,#0x1f]
000b3e  42a9              CMP      r1,r5
000b40  d102              BNE      |L1.2888|
;;;2153           return 0;
000b42  2000              MOVS     r0,#0
                  |L1.2884|
;;;2154       if (pSd->cardType >= CARD_MMC) {
;;;2155           MmcCmd6Arg cmd6Arg;
;;;2156           cmd6Arg.access = 0x3;
;;;2157           cmd6Arg.index  = SD_EXTCSD_HS_TIMING_INDEX;
;;;2158           cmd6Arg.value  = hsEnable ? SD_EXTCSD_HS_TIMING_ENABLE
;;;2159                                     : SD_EXTCSD_HS_TIMING_DISABLE;
;;;2160           cmd6Arg.cmdSet = 0;
;;;2161           error = Cmd6(pSd, &cmd6Arg, 0, &status);
;;;2162           if (error) {
;;;2163               TRACE_ERROR("MMC SwitchHs.Cmd6: %d\n\r", error);
;;;2164           }
;;;2165           else if (status & STATUS_SWITCH_ERROR) {
;;;2166               TRACE_WARNING("MMC HS SW Fail\n\r");
;;;2167               error = SD_ERROR_DRIVER;
;;;2168           }
;;;2169           else {
;;;2170               TRACE_WARNING_WP("-I- MMC HS %d\n\r", hsEnable);
;;;2171               pSd->mode = hsEnable;
;;;2172           }
;;;2173       }
;;;2174       else if (pSd->cardType >= CARD_SD) {
;;;2175           SdCmd6Arg cmd6Arg;
;;;2176           unsigned int switchStatus[512/32];
;;;2177           cmd6Arg.mode = 1;
;;;2178           cmd6Arg.reserved = 0;
;;;2179           cmd6Arg.reserveFG6 = 0xF;
;;;2180           cmd6Arg.reserveFG5 = 0xF;
;;;2181           cmd6Arg.reserveFG4 = 0xF;
;;;2182           cmd6Arg.reserveFG3 = 0xF;
;;;2183           cmd6Arg.command = 0;
;;;2184           cmd6Arg.accessMode = 1;
;;;2185           error = Cmd6(pSd,
;;;2186                        &cmd6Arg,
;;;2187                        switchStatus,
;;;2188                        &status);
;;;2189         #if 0
;;;2190           unsigned int i;
;;;2191           printf("SD Switch status:");
;;;2192           for(i = 0; i < 512 / 8; i ++) {
;;;2193               if ((i % 8) == 0) printf("\n\r[%3d]", i);
;;;2194               printf(" %02x", ((char*)switchStatus)[i]);
;;;2195           }
;;;2196           printf("\n\r");
;;;2197           printf(" _FG1_INFO %x\n\r",
;;;2198               SD_SW_STAT_FUN_GRP1_INFO(switchStatus));
;;;2199           printf(" _FG1_RC   %x\n\r",
;;;2200               SD_SW_STAT_FUN_GRP1_RC(switchStatus));
;;;2201           printf(" _FG1_BUSY %x\n\r",
;;;2202               SD_SW_STAT_FUN_GRP1_BUSY(switchStatus));
;;;2203           printf(" _FG1_DS_V %x\n\r",
;;;2204               SD_SW_STAT_DATA_STRUCT_VER(switchStatus));
;;;2205         #endif
;;;2206           if (error) {
;;;2207               TRACE_ERROR("SD SwitchHs.Cmd6: %d\n\r", error);
;;;2208           }
;;;2209           else if (status & STATUS_SWITCH_ERROR) {
;;;2210               TRACE_WARNING("SD HS SW Fail\n\r");
;;;2211               error = SD_ERROR_DRIVER;
;;;2212           }
;;;2213           else if (SD_SW_STAT_FUN_GRP1_RC(switchStatus)
;;;2214                           == SD_SW_STAT_FUN_GRP_RC_ERROR) {
;;;2215               TRACE_ERROR_WP("-I- SD HS Not Supported\n\r");
;;;2216               error = SD_ERROR_DRIVER;
;;;2217           }
;;;2218           else if (SD_SW_STAT_FUN_GRP1_BUSY(switchStatus)) {
;;;2219               TRACE_WARNING("SD HS Busy\n\r");
;;;2220               error = SD_ERROR_DRIVER;
;;;2221           }
;;;2222           else {
;;;2223               TRACE_WARNING_WP("-I- SD HS %d\n\r", hsEnable);
;;;2224               pSd->mode = hsEnable;
;;;2225           }
;;;2226       }
;;;2227   
;;;2228       return error;
;;;2229   }
000b44  b012              ADD      sp,sp,#0x48
000b46  bd70              POP      {r4-r6,pc}
                  |L1.2888|
000b48  7fb1              LDRB     r1,[r6,#0x1e]         ;2154
000b4a  2904              CMP      r1,#4                 ;2154
000b4c  d352              BCC      |L1.3060|
000b4e  2103              MOVS     r1,#3                 ;2156
000b50  aa10              ADD      r2,sp,#0x40           ;2156
000b52  7011              STRB     r1,[r2,#0]            ;2156
000b54  21b9              MOVS     r1,#0xb9              ;2157
000b56  7051              STRB     r1,[r2,#1]            ;2157
000b58  2d00              CMP      r5,#0                 ;2158
000b5a  d001              BEQ      |L1.2912|
000b5c  2101              MOVS     r1,#1                 ;2158
000b5e  e000              B        |L1.2914|
                  |L1.2912|
000b60  2100              MOVS     r1,#0                 ;2159
                  |L1.2914|
000b62  aa10              ADD      r2,sp,#0x40           ;2159
000b64  7091              STRB     r1,[r2,#2]            ;2159
000b66  2100              MOVS     r1,#0                 ;2160
000b68  70d1              STRB     r1,[r2,#3]            ;2160
000b6a  2200              MOVS     r2,#0                 ;2161
000b6c  ab11              ADD      r3,sp,#0x44           ;2161
000b6e  a910              ADD      r1,sp,#0x40           ;2161
000b70  f7fffffe          BL       Cmd6
000b74  0004              MOVS     r4,r0                 ;2161
000b76  2c00              CMP      r4,#0                 ;2162
000b78  d013              BEQ      |L1.2978|
000b7a  201b              MOVS     r0,#0x1b              ;2163
000b7c  f7fffffe          BL       ShellPutByte
000b80  4873              LDR      r0,|L1.3408|
000b82  f7fffffe          BL       ShellPrintf
000b86  201b              MOVS     r0,#0x1b              ;2163
000b88  f7fffffe          BL       ShellPutByte
000b8c  a071              ADR      r0,|L1.3412|
000b8e  f7fffffe          BL       ShellPrintf
000b92  0021              MOVS     r1,r4                 ;2163
000b94  a09b              ADR      r0,|L1.3588|
000b96  f7fffffe          BL       ShellPrintf
000b9a  a06c              ADR      r0,|L1.3404|
000b9c  f7fffffe          BL       ShellPrintf
                  |L1.2976|
000ba0  e0b4              B        |L1.3340|
                  |L1.2978|
000ba2  9811              LDR      r0,[sp,#0x44]         ;2165
000ba4  0600              LSLS     r0,r0,#24             ;2165
000ba6  d513              BPL      |L1.3024|
000ba8  201b              MOVS     r0,#0x1b              ;2166
000baa  f7fffffe          BL       ShellPutByte
000bae  a09b              ADR      r0,|L1.3612|
000bb0  f7fffffe          BL       ShellPrintf
000bb4  201b              MOVS     r0,#0x1b              ;2166
000bb6  f7fffffe          BL       ShellPutByte
000bba  a066              ADR      r0,|L1.3412|
000bbc  f7fffffe          BL       ShellPrintf
000bc0  a099              ADR      r0,|L1.3624|
000bc2  f7fffffe          BL       ShellPrintf
000bc6  a061              ADR      r0,|L1.3404|
000bc8  f7fffffe          BL       ShellPrintf
000bcc  2401              MOVS     r4,#1                 ;2167
000bce  e09d              B        |L1.3340|
                  |L1.3024|
000bd0  201b              MOVS     r0,#0x1b              ;2170
000bd2  f7fffffe          BL       ShellPutByte
000bd6  a091              ADR      r0,|L1.3612|
000bd8  f7fffffe          BL       ShellPrintf
000bdc  201b              MOVS     r0,#0x1b              ;2170
000bde  f7fffffe          BL       ShellPutByte
000be2  a05c              ADR      r0,|L1.3412|
000be4  f7fffffe          BL       ShellPrintf
000be8  0029              MOVS     r1,r5                 ;2170
000bea  a094              ADR      r0,|L1.3644|
000bec  f7fffffe          BL       ShellPrintf
000bf0  77f5              STRB     r5,[r6,#0x1f]         ;2171
000bf2  e08b              B        |L1.3340|
                  |L1.3060|
000bf4  2902              CMP      r1,#2                 ;2174
000bf6  d3d3              BCC      |L1.2976|
000bf8  9910              LDR      r1,[sp,#0x40]         ;2177
000bfa  2201              MOVS     r2,#1                 ;2177
000bfc  07d2              LSLS     r2,r2,#31             ;2177
000bfe  4311              ORRS     r1,r1,r2              ;2177
000c00  227f              MOVS     r2,#0x7f              ;2178
000c02  0612              LSLS     r2,r2,#24             ;2178
000c04  4391              BICS     r1,r1,r2              ;2178
000c06  220f              MOVS     r2,#0xf               ;2179
000c08  0512              LSLS     r2,r2,#20             ;2179
000c0a  4311              ORRS     r1,r1,r2              ;2179
000c0c  1112              ASRS     r2,r2,#4              ;2180
000c0e  4311              ORRS     r1,r1,r2              ;2180
000c10  1112              ASRS     r2,r2,#4              ;2181
000c12  4311              ORRS     r1,r1,r2              ;2181
000c14  1112              ASRS     r2,r2,#4              ;2182
000c16  4311              ORRS     r1,r1,r2              ;2182
000c18  22f0              MOVS     r2,#0xf0              ;2183
000c1a  4391              BICS     r1,r1,r2              ;2183
000c1c  0909              LSRS     r1,r1,#4              ;2184
000c1e  0109              LSLS     r1,r1,#4              ;2184
000c20  1c49              ADDS     r1,r1,#1              ;2184
000c22  9110              STR      r1,[sp,#0x40]         ;2184
000c24  ab11              ADD      r3,sp,#0x44           ;2185
000c26  466a              MOV      r2,sp                 ;2185
000c28  a910              ADD      r1,sp,#0x40           ;2185
000c2a  f7fffffe          BL       Cmd6
000c2e  0004              MOVS     r4,r0                 ;2185
000c30  2c00              CMP      r4,#0                 ;2206
000c32  d013              BEQ      |L1.3164|
000c34  201b              MOVS     r0,#0x1b              ;2207
000c36  f7fffffe          BL       ShellPutByte
000c3a  4845              LDR      r0,|L1.3408|
000c3c  f7fffffe          BL       ShellPrintf
000c40  201b              MOVS     r0,#0x1b              ;2207
000c42  f7fffffe          BL       ShellPutByte
000c46  a043              ADR      r0,|L1.3412|
000c48  f7fffffe          BL       ShellPrintf
000c4c  0021              MOVS     r1,r4                 ;2207
000c4e  a07f              ADR      r0,|L1.3660|
000c50  f7fffffe          BL       ShellPrintf
000c54  a03d              ADR      r0,|L1.3404|
000c56  f7fffffe          BL       ShellPrintf
000c5a  e057              B        |L1.3340|
                  |L1.3164|
000c5c  9811              LDR      r0,[sp,#0x44]         ;2209
000c5e  0600              LSLS     r0,r0,#24             ;2209
000c60  d513              BPL      |L1.3210|
000c62  201b              MOVS     r0,#0x1b              ;2210
000c64  f7fffffe          BL       ShellPutByte
000c68  a06c              ADR      r0,|L1.3612|
000c6a  f7fffffe          BL       ShellPrintf
000c6e  201b              MOVS     r0,#0x1b              ;2210
000c70  f7fffffe          BL       ShellPutByte
000c74  a037              ADR      r0,|L1.3412|
000c76  f7fffffe          BL       ShellPrintf
000c7a  a07a              ADR      r0,|L1.3684|
000c7c  f7fffffe          BL       ShellPrintf
000c80  a032              ADR      r0,|L1.3404|
000c82  f7fffffe          BL       ShellPrintf
000c86  2401              MOVS     r4,#1                 ;2211
000c88  e040              B        |L1.3340|
                  |L1.3210|
000c8a  4668              MOV      r0,sp                 ;2213
000c8c  7c00              LDRB     r0,[r0,#0x10]         ;2213
000c8e  43c0              MVNS     r0,r0                 ;2213
000c90  0700              LSLS     r0,r0,#28             ;2213
000c92  d019              BEQ      |L1.3272|
000c94  4669              MOV      r1,sp                 ;2218
000c96  7f48              LDRB     r0,[r1,#0x1d]         ;2218
000c98  7f09              LDRB     r1,[r1,#0x1c]         ;2218
000c9a  0209              LSLS     r1,r1,#8              ;2218
000c9c  1840              ADDS     r0,r0,r1              ;2218
000c9e  d024              BEQ      |L1.3306|
000ca0  201b              MOVS     r0,#0x1b              ;2219
000ca2  f7fffffe          BL       ShellPutByte
000ca6  a05d              ADR      r0,|L1.3612|
000ca8  f7fffffe          BL       ShellPrintf
000cac  201b              MOVS     r0,#0x1b              ;2219
000cae  f7fffffe          BL       ShellPutByte
000cb2  a028              ADR      r0,|L1.3412|
000cb4  f7fffffe          BL       ShellPrintf
000cb8  a06e              ADR      r0,|L1.3700|
000cba  f7fffffe          BL       ShellPrintf
000cbe  a023              ADR      r0,|L1.3404|
000cc0  f7fffffe          BL       ShellPrintf
000cc4  2401              MOVS     r4,#1                 ;2220
000cc6  e021              B        |L1.3340|
                  |L1.3272|
000cc8  201b              MOVS     r0,#0x1b              ;2215
000cca  f7fffffe          BL       ShellPutByte
000cce  4820              LDR      r0,|L1.3408|
000cd0  f7fffffe          BL       ShellPrintf
000cd4  201b              MOVS     r0,#0x1b              ;2215
000cd6  f7fffffe          BL       ShellPutByte
000cda  a01e              ADR      r0,|L1.3412|
000cdc  f7fffffe          BL       ShellPrintf
000ce0  a068              ADR      r0,|L1.3716|
000ce2  f7fffffe          BL       ShellPrintf
000ce6  2401              MOVS     r4,#1                 ;2216
000ce8  e010              B        |L1.3340|
                  |L1.3306|
000cea  201b              MOVS     r0,#0x1b              ;2223
000cec  f7fffffe          BL       ShellPutByte
000cf0  a04a              ADR      r0,|L1.3612|
000cf2  f7fffffe          BL       ShellPrintf
000cf6  201b              MOVS     r0,#0x1b              ;2223
000cf8  f7fffffe          BL       ShellPutByte
000cfc  a015              ADR      r0,|L1.3412|
000cfe  f7fffffe          BL       ShellPrintf
000d02  0029              MOVS     r1,r5                 ;2223
000d04  a066              ADR      r0,|L1.3744|
000d06  f7fffffe          BL       ShellPrintf
000d0a  77f5              STRB     r5,[r6,#0x1f]         ;2224
                  |L1.3340|
000d0c  0020              MOVS     r0,r4                 ;2228
000d0e  e719              B        |L1.2884|
;;;2230   
                          ENDP

                  MmcSelectCard PROC
;;;2274   //------------------------------------------------------------------------------
;;;2275   static unsigned char MmcSelectCard(SdCard *pSd,
000d10  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;2276                                      unsigned short address,
;;;2277                                      unsigned char check)
;;;2278   {
000d12  000d              MOVS     r5,r1
000d14  0017              MOVS     r7,r2
000d16  b082              SUB      sp,sp,#8
;;;2279       unsigned char error;
;;;2280       unsigned int  status;
;;;2281       unsigned int  targetState = address ? STATUS_TRAN : STATUS_STBY;
000d18  2601              MOVS     r6,#1
000d1a  2103              MOVS     r1,#3
000d1c  02f6              LSLS     r6,r6,#11
000d1e  0249              LSLS     r1,r1,#9
000d20  2d00              CMP      r5,#0
000d22  d001              BEQ      |L1.3368|
000d24  0030              MOVS     r0,r6
000d26  e0c4              B        |L1.3762|
                  |L1.3368|
000d28  e0c2              B        |L1.3760|
000d2a  0000              DCW      0x0000
                  |L1.3372|
000d2c  4d545472          DCB      "MTTranState.Cmd12: st%x, er%d\n\r",0
000d30  616e5374
000d34  6174652e
000d38  436d6431
000d3c  323a2073
000d40  7425782c
000d44  20657225
000d48  640a0d00
                  |L1.3404|
000d4c  0a0d00            DCB      "\n\r",0
000d4f  00                DCB      0
                  |L1.3408|
                          DCD      ||.text||+0x420
                  |L1.3412|
000d54  5b6d00            DCB      "[m",0
000d57  00                DCB      0
                  |L1.3416|
000d58  4d545472          DCB      "MTTranState.RD.Cmd13: %d\n\r",0
000d5c  616e5374
000d60  6174652e
000d64  52442e43
000d68  6d643133
000d6c  3a202564
000d70  0a0d00  
000d73  00                DCB      0
                  |L1.3444|
000d74  4d545472          DCB      "MTTranState.Cmd18: %d\n\r",0
000d78  616e5374
000d7c  6174652e
000d80  436d6431
000d84  383a2025
000d88  640a0d00
                  |L1.3468|
000d8c  50622043          DCB      "Pb Card Identification mode\n\r",0
000d90  61726420
000d94  4964656e
000d98  74696669
000d9c  63617469
000da0  6f6e206d
000da4  6f64650a
000da8  0d00    
000daa  00                DCB      0
000dab  00                DCB      0
                  |L1.3500|
000dac  434d4431          DCB      "CMD18.stat: %x\n\r",0
000db0  382e7374
000db4  61743a20
000db8  25780a0d
000dbc  00      
000dbd  00                DCB      0
000dbe  00                DCB      0
000dbf  00                DCB      0
                  |L1.3520|
000dc0  4d6f7665          DCB      "MoveToTransferState.WR.Cmd13: %d\n\r",0
000dc4  546f5472
000dc8  616e7366
000dcc  65725374
000dd0  6174652e
000dd4  57522e43
000dd8  6d643133
000ddc  3a202564
000de0  0a0d00  
000de3  00                DCB      0
                  |L1.3556|
                          DCD      0xe6d82000
                  |L1.3560|
000de8  434d4432          DCB      "CMD25(0x%x, %d).stat: %x\n\r",0
000dec  35283078
000df0  25782c20
000df4  2564292e
000df8  73746174
000dfc  3a202578
000e00  0a0d00  
000e03  00                DCB      0
                  |L1.3588|
000e04  4d4d4320          DCB      "MMC SwitchHs.Cmd6: %d\n\r",0
000e08  53776974
000e0c  63684873
000e10  2e436d64
000e14  363a2025
000e18  640a0d00
                  |L1.3612|
000e1c  5b313b31          DCB      "[1;1;33m!: ",0
000e20  3b33336d
000e24  213a2000
                  |L1.3624|
000e28  4d4d4320          DCB      "MMC HS SW Fail\n\r",0
000e2c  48532053
000e30  57204661
000e34  696c0a0d
000e38  00      
000e39  00                DCB      0
000e3a  00                DCB      0
000e3b  00                DCB      0
                  |L1.3644|
000e3c  2d492d20          DCB      "-I- MMC HS %d\n\r",0
000e40  4d4d4320
000e44  48532025
000e48  640a0d00
                  |L1.3660|
000e4c  53442053          DCB      "SD SwitchHs.Cmd6: %d\n\r",0
000e50  77697463
000e54  6848732e
000e58  436d6436
000e5c  3a202564
000e60  0a0d00  
000e63  00                DCB      0
                  |L1.3684|
000e64  53442048          DCB      "SD HS SW Fail\n\r",0
000e68  53205357
000e6c  20466169
000e70  6c0a0d00
                  |L1.3700|
000e74  53442048          DCB      "SD HS Busy\n\r",0
000e78  53204275
000e7c  73790a0d
000e80  00      
000e81  00                DCB      0
000e82  00                DCB      0
000e83  00                DCB      0
                  |L1.3716|
000e84  2d492d20          DCB      "-I- SD HS Not Supported\n\r",0
000e88  53442048
000e8c  53204e6f
000e90  74205375
000e94  70706f72
000e98  7465640a
000e9c  0d00    
000e9e  00                DCB      0
000e9f  00                DCB      0
                  |L1.3744|
000ea0  2d492d20          DCB      "-I- SD HS %d\n\r",0
000ea4  53442048
000ea8  53202564
000eac  0a0d00  
000eaf  00                DCB      0
                  |L1.3760|
000eb0  0008              MOVS     r0,r1
                  |L1.3762|
000eb2  9000              STR      r0,[sp,#0]
;;;2282       unsigned int  srcState    = address ? STATUS_STBY : STATUS_TRAN;
000eb4  2d00              CMP      r5,#0
000eb6  d000              BEQ      |L1.3770|
000eb8  000e              MOVS     r6,r1
                  |L1.3770|
;;;2283       if (pSd->cardType == CARD_SDIO) check = 0;
000eba  9802              LDR      r0,[sp,#8]
000ebc  2109              MOVS     r1,#9
000ebe  0189              LSLS     r1,r1,#6
000ec0  1840              ADDS     r0,r0,r1
000ec2  7f80              LDRB     r0,[r0,#0x1e]
000ec4  2808              CMP      r0,#8
000ec6  d140              BNE      |L1.3914|
000ec8  2700              MOVS     r7,#0
000eca  e03e              B        |L1.3914|
                  |L1.3788|
;;;2284   
;;;2285       // At this stage the Initialization and identification process is achieved
;;;2286       // The SD card is supposed to be in Stand-by State
;;;2287       while(check) {
;;;2288           error = Cmd13(pSd, &status);
000ecc  9802              LDR      r0,[sp,#8]
000ece  a901              ADD      r1,sp,#4
000ed0  f7fffffe          BL       Cmd13
000ed4  0004              MOVS     r4,r0
;;;2289           if (error) {
000ed6  2c00              CMP      r4,#0
000ed8  d014              BEQ      |L1.3844|
;;;2290               TRACE_ERROR("MmcSelectCard.Cmd13 (%d)\n\r", error);
000eda  201b              MOVS     r0,#0x1b
000edc  f7fffffe          BL       ShellPutByte
000ee0  48fc              LDR      r0,|L1.4820|
000ee2  f7fffffe          BL       ShellPrintf
000ee6  201b              MOVS     r0,#0x1b
000ee8  f7fffffe          BL       ShellPutByte
000eec  a0fa              ADR      r0,|L1.4824|
000eee  f7fffffe          BL       ShellPrintf
000ef2  0021              MOVS     r1,r4
000ef4  a0f9              ADR      r0,|L1.4828|
000ef6  f7fffffe          BL       ShellPrintf
000efa  a0fe              ADR      r0,|L1.4852|
000efc  f7fffffe          BL       ShellPrintf
;;;2291               return error;
000f00  0020              MOVS     r0,r4
                  |L1.3842|
;;;2292           }
;;;2293           if ((status & STATUS_READY_FOR_DATA)) {
;;;2294               unsigned int currState = status & STATUS_STATE;
;;;2295               if (currState == targetState) return 0;
;;;2296               if (currState != srcState) {
;;;2297                   TRACE_ERROR("MmcSelectCard, wrong state %x\n\r", currState);
;;;2298                   return SD_ERROR_DRIVER;
;;;2299               }
;;;2300               break;
;;;2301           }
;;;2302       }
;;;2303   
;;;2304       // witch to TRAN mode to Select the current SD/MMC
;;;2305       // so that SD ACMD6 can process or EXT_CSD can read.
;;;2306       error = Cmd7(pSd, address);
;;;2307       if (error == SD_ERROR_NOT_INITIALIZED && address == 0) {}
;;;2308       else if (error) {
;;;2309           TRACE_ERROR("MmcSelectCard.Cmd7 (%d)\n\r", error);
;;;2310       }
;;;2311   
;;;2312       return error;
;;;2313   }
000f02  e404              B        |L1.1806|
                  |L1.3844|
000f04  9801              LDR      r0,[sp,#4]            ;2293
000f06  05c0              LSLS     r0,r0,#23             ;2293
000f08  d51f              BPL      |L1.3914|
000f0a  9c01              LDR      r4,[sp,#4]            ;2294
000f0c  200f              MOVS     r0,#0xf               ;2294
000f0e  0240              LSLS     r0,r0,#9              ;2294
000f10  4004              ANDS     r4,r4,r0              ;2294
000f12  9800              LDR      r0,[sp,#0]            ;2295
000f14  4284              CMP      r4,r0                 ;2295
000f16  d101              BNE      |L1.3868|
000f18  2000              MOVS     r0,#0                 ;2295
000f1a  e410              B        |L1.1854|
                  |L1.3868|
000f1c  42b4              CMP      r4,r6                 ;2296
000f1e  d016              BEQ      |L1.3918|
000f20  201b              MOVS     r0,#0x1b              ;2297
000f22  f7fffffe          BL       ShellPutByte
000f26  48eb              LDR      r0,|L1.4820|
000f28  f7fffffe          BL       ShellPrintf
000f2c  201b              MOVS     r0,#0x1b              ;2297
000f2e  f7fffffe          BL       ShellPutByte
000f32  a0e9              ADR      r0,|L1.4824|
000f34  f7fffffe          BL       ShellPrintf
000f38  0021              MOVS     r1,r4                 ;2297
000f3a  a0ef              ADR      r0,|L1.4856|
000f3c  f7fffffe          BL       ShellPrintf
000f40  a0ec              ADR      r0,|L1.4852|
000f42  f7fffffe          BL       ShellPrintf
000f46  2001              MOVS     r0,#1                 ;2298
000f48  e7db              B        |L1.3842|
                  |L1.3914|
000f4a  2f00              CMP      r7,#0                 ;2287
000f4c  d1be              BNE      |L1.3788|
                  |L1.3918|
000f4e  9802              LDR      r0,[sp,#8]            ;2306
000f50  0029              MOVS     r1,r5                 ;2306
000f52  f7fffffe          BL       Cmd7
000f56  0004              MOVS     r4,r0                 ;2306
000f58  2c03              CMP      r4,#3                 ;2307
000f5a  d101              BNE      |L1.3936|
000f5c  2d00              CMP      r5,#0                 ;2307
000f5e  d014              BEQ      |L1.3978|
                  |L1.3936|
000f60  2c00              CMP      r4,#0                 ;2308
000f62  d012              BEQ      |L1.3978|
000f64  201b              MOVS     r0,#0x1b              ;2309
000f66  f7fffffe          BL       ShellPutByte
000f6a  48da              LDR      r0,|L1.4820|
000f6c  f7fffffe          BL       ShellPrintf
000f70  201b              MOVS     r0,#0x1b              ;2309
000f72  f7fffffe          BL       ShellPutByte
000f76  a0d8              ADR      r0,|L1.4824|
000f78  f7fffffe          BL       ShellPrintf
000f7c  0021              MOVS     r1,r4                 ;2309
000f7e  a0e6              ADR      r0,|L1.4888|
000f80  f7fffffe          BL       ShellPrintf
000f84  a0db              ADR      r0,|L1.4852|
000f86  f7fffffe          BL       ShellPrintf
                  |L1.3978|
000f8a  0020              MOVS     r0,r4                 ;2312
000f8c  e7b9              B        |L1.3842|
;;;2314   
                          ENDP

                  MmcGetExtInformation PROC
;;;2318   //------------------------------------------------------------------------------
;;;2319   static unsigned char MmcGetExtInformation(SdCard *pSd)
000f8e  b510              PUSH     {r4,lr}
;;;2320   {
000f90  0003              MOVS     r3,r0
;;;2321       unsigned char error;
;;;2322       unsigned int i;
;;;2323   
;;;2324       // CSD 1.2 or Higher version
;;;2325       if(SD_CSD_STRUCTURE(pSd) >= 2) {
000f92  6b98              LDR      r0,[r3,#0x38]
000f94  0f80              LSRS     r0,r0,#30
000f96  2802              CMP      r0,#2
000f98  d323              BCC      |L1.4066|
;;;2326   
;;;2327           /* Clear EXT_CSD data */
;;;2328           for (i = 0;i < 512/4; i ++) pSd->extData[i] = 0;
000f9a  2000              MOVS     r0,#0
000f9c  2100              MOVS     r1,#0
                  |L1.3998|
000f9e  0082              LSLS     r2,r0,#2
000fa0  18d2              ADDS     r2,r2,r3
000fa2  6491              STR      r1,[r2,#0x48]
000fa4  1c40              ADDS     r0,r0,#1
000fa6  2880              CMP      r0,#0x80
000fa8  d3f9              BCC      |L1.3998|
;;;2329           error = Cmd8(pSd, 0, pSd->extData);
000faa  001a              MOVS     r2,r3
000fac  3248              ADDS     r2,r2,#0x48
000fae  2100              MOVS     r1,#0
000fb0  0018              MOVS     r0,r3
000fb2  f7fffffe          BL       Cmd8
000fb6  0004              MOVS     r4,r0
;;;2330           if (error) {
000fb8  2c00              CMP      r4,#0
000fba  d012              BEQ      |L1.4066|
;;;2331               TRACE_ERROR("MmcGetExt.Cmd8: %d\n\r", error);
000fbc  201b              MOVS     r0,#0x1b
000fbe  f7fffffe          BL       ShellPutByte
000fc2  48c4              LDR      r0,|L1.4820|
000fc4  f7fffffe          BL       ShellPrintf
000fc8  201b              MOVS     r0,#0x1b
000fca  f7fffffe          BL       ShellPutByte
000fce  a0c2              ADR      r0,|L1.4824|
000fd0  f7fffffe          BL       ShellPrintf
000fd4  0021              MOVS     r1,r4
000fd6  a0d7              ADR      r0,|L1.4916|
000fd8  f7fffffe          BL       ShellPrintf
000fdc  a0c5              ADR      r0,|L1.4852|
000fde  f7fffffe          BL       ShellPrintf
                  |L1.4066|
;;;2332           }
;;;2333       }
;;;2334       return 0;
000fe2  2000              MOVS     r0,#0
;;;2335   }
000fe4  bd10              POP      {r4,pc}
;;;2336   
                          ENDP

                  SdGetExtInformation PROC
;;;2340   //------------------------------------------------------------------------------
;;;2341   static unsigned char SdGetExtInformation(SdCard *pSd)
000fe6  b570              PUSH     {r4-r6,lr}
;;;2342   {
000fe8  0004              MOVS     r4,r0
;;;2343       unsigned char error;
;;;2344   
;;;2345       // Reset data (64 + 512 bits, 8 + 64 bytes)
;;;2346       // memset(pSd->extData, 0x00, 512);
;;;2347   
;;;2348       // SD Status
;;;2349       if (pSd->optCmdBitMap & SD_ACMD13_SUPPORT) {
000fea  2009              MOVS     r0,#9
000fec  0180              LSLS     r0,r0,#6
000fee  1826              ADDS     r6,r4,r0
000ff0  6970              LDR      r0,[r6,#0x14]
000ff2  0780              LSLS     r0,r0,#30
000ff4  d51e              BPL      |L1.4148|
;;;2350           error = Acmd13(pSd, &pSd->extData[SD_EXT_OFFSET_SD_STAT]);
000ff6  0021              MOVS     r1,r4
000ff8  3150              ADDS     r1,r1,#0x50
000ffa  0020              MOVS     r0,r4
000ffc  f7fffffe          BL       Acmd13
001000  0005              MOVS     r5,r0
;;;2351           if (error) {
001002  2d00              CMP      r5,#0
001004  d016              BEQ      |L1.4148|
;;;2352               TRACE_ERROR("SdGetExt.Acmd13: %d\n\r", error);
001006  201b              MOVS     r0,#0x1b
001008  f7fffffe          BL       ShellPutByte
00100c  48b1              LDR      r0,|L1.4820|
00100e  f7fffffe          BL       ShellPrintf
001012  201b              MOVS     r0,#0x1b
001014  f7fffffe          BL       ShellPutByte
001018  a0af              ADR      r0,|L1.4824|
00101a  f7fffffe          BL       ShellPrintf
00101e  0029              MOVS     r1,r5
001020  a0ca              ADR      r0,|L1.4940|
001022  f7fffffe          BL       ShellPrintf
001026  a0b3              ADR      r0,|L1.4852|
001028  f7fffffe          BL       ShellPrintf
;;;2353               pSd->optCmdBitMap &= ~SD_ACMD13_SUPPORT;
00102c  6970              LDR      r0,[r6,#0x14]
00102e  2102              MOVS     r1,#2
001030  4388              BICS     r0,r0,r1
001032  6170              STR      r0,[r6,#0x14]
                  |L1.4148|
;;;2354           }
;;;2355       }
;;;2356   
;;;2357       // SD SCR
;;;2358       error = Acmd51(pSd, &pSd->extData[SD_EXT_OFFSET_SD_SCR]);
001034  0021              MOVS     r1,r4
001036  3148              ADDS     r1,r1,#0x48
001038  0020              MOVS     r0,r4
00103a  f7fffffe          BL       Acmd51
00103e  0004              MOVS     r4,r0
;;;2359       if (error) {
001040  2c00              CMP      r4,#0
001042  d012              BEQ      |L1.4202|
;;;2360           TRACE_ERROR("SdGetExt.Acmd51: %d\n\r", error);
001044  201b              MOVS     r0,#0x1b
001046  f7fffffe          BL       ShellPutByte
00104a  48a2              LDR      r0,|L1.4820|
00104c  f7fffffe          BL       ShellPrintf
001050  201b              MOVS     r0,#0x1b
001052  f7fffffe          BL       ShellPutByte
001056  a0a0              ADR      r0,|L1.4824|
001058  f7fffffe          BL       ShellPrintf
00105c  0021              MOVS     r1,r4
00105e  a0c1              ADR      r0,|L1.4964|
001060  f7fffffe          BL       ShellPrintf
001064  a0a3              ADR      r0,|L1.4852|
001066  f7fffffe          BL       ShellPrintf
                  |L1.4202|
;;;2361       }
;;;2362   
;;;2363       return 0;
00106a  2000              MOVS     r0,#0
;;;2364   }
00106c  bd70              POP      {r4-r6,pc}
;;;2365   
                          ENDP

                  SdMmcUpdateInformation PROC
;;;2372   //------------------------------------------------------------------------------
;;;2373   static unsigned char SdMmcUpdateInformation(SdCard *pSd,
00106e  b570              PUSH     {r4-r6,lr}
;;;2374                                               unsigned char csd,
;;;2375                                               unsigned char extData)
;;;2376   {
001070  0006              MOVS     r6,r0
;;;2377       unsigned char error;
;;;2378   
;;;2379       // Update CSD for new TRAN_SPEED value
;;;2380       if (csd) {
;;;2381           MmcSelectCard(pSd, 0, 1);
;;;2382           Delay(800);
;;;2383           error = Cmd9(pSd);
;;;2384           if (error ) {
;;;2385               TRACE_ERROR("SdMmcUpdateInfo.Cmd9 (%d)\n\r", error);
;;;2386               return error;
;;;2387           }
;;;2388           error = MmcSelectCard(pSd, pSd->cardAddress, 1);
001072  2009              MOVS     r0,#9
001074  0180              LSLS     r0,r0,#6
001076  1835              ADDS     r5,r6,r0
001078  2900              CMP      r1,#0                 ;2380
00107a  d028              BEQ      |L1.4302|
00107c  2201              MOVS     r2,#1                 ;2381
00107e  2100              MOVS     r1,#0                 ;2381
001080  0030              MOVS     r0,r6                 ;2381
001082  f7fffffe          BL       MmcSelectCard
001086  2019              MOVS     r0,#0x19              ;2382
001088  0140              LSLS     r0,r0,#5              ;2382
00108a  f7fffffe          BL       Delay
00108e  0030              MOVS     r0,r6                 ;2383
001090  f7fffffe          BL       Cmd9
001094  0004              MOVS     r4,r0                 ;2383
001096  2c00              CMP      r4,#0                 ;2384
001098  d014              BEQ      |L1.4292|
00109a  201b              MOVS     r0,#0x1b              ;2385
00109c  f7fffffe          BL       ShellPutByte
0010a0  488c              LDR      r0,|L1.4820|
0010a2  f7fffffe          BL       ShellPrintf
0010a6  201b              MOVS     r0,#0x1b              ;2385
0010a8  f7fffffe          BL       ShellPutByte
0010ac  a08a              ADR      r0,|L1.4824|
0010ae  f7fffffe          BL       ShellPrintf
0010b2  0021              MOVS     r1,r4                 ;2385
0010b4  a0b1              ADR      r0,|L1.4988|
0010b6  f7fffffe          BL       ShellPrintf
0010ba  a08e              ADR      r0,|L1.4852|
0010bc  f7fffffe          BL       ShellPrintf
0010c0  0020              MOVS     r0,r4                 ;2386
;;;2389       }
;;;2390       if (pSd->cardType >= CARD_MMC)     MmcGetExtInformation(pSd);
;;;2391       else if (pSd->cardType >= CARD_SD) SdGetExtInformation(pSd);
;;;2392       GetTransSpeedValue(pSd);
;;;2393   
;;;2394       return 0;
;;;2395   }
0010c2  bd70              POP      {r4-r6,pc}
                  |L1.4292|
0010c4  8ba9              LDRH     r1,[r5,#0x1c]         ;2388
0010c6  2201              MOVS     r2,#1                 ;2388
0010c8  0030              MOVS     r0,r6                 ;2388
0010ca  f7fffffe          BL       MmcSelectCard
                  |L1.4302|
0010ce  7fa8              LDRB     r0,[r5,#0x1e]         ;2390
0010d0  2804              CMP      r0,#4                 ;2390
0010d2  d303              BCC      |L1.4316|
0010d4  0030              MOVS     r0,r6                 ;2390
0010d6  f7fffffe          BL       MmcGetExtInformation
0010da  e004              B        |L1.4326|
                  |L1.4316|
0010dc  2802              CMP      r0,#2                 ;2391
0010de  d302              BCC      |L1.4326|
0010e0  0030              MOVS     r0,r6                 ;2391
0010e2  f7fffffe          BL       SdGetExtInformation
                  |L1.4326|
0010e6  0030              MOVS     r0,r6                 ;2392
0010e8  f7fffffe          BL       GetTransSpeedValue
0010ec  2000              MOVS     r0,#0                 ;2394
0010ee  bd70              POP      {r4-r6,pc}
;;;2396   
                          ENDP

                  SD_Read PROC
;;;2593   //------------------------------------------------------------------------------
;;;2594   unsigned char SD_Read(SdCard        *pSd,
0010f0  b5ff              PUSH     {r0-r7,lr}
;;;2595                         unsigned int   address,
;;;2596                         void          *pData,
;;;2597                         unsigned short length,
;;;2598                         SdCallback     pCallback,
;;;2599                         void          *pArgs)
;;;2600   {
0010f2  0005              MOVS     r5,r0
0010f4  000e              MOVS     r6,r1
0010f6  b081              SUB      sp,sp,#4
;;;2601       unsigned char error;
;;;2602   
;;;2603       // If callback is defined, performe none blocked reading
;;;2604       if (pCallback) {
0010f8  980a              LDR      r0,[sp,#0x28]
0010fa  2800              CMP      r0,#0
0010fc  d004              BEQ      |L1.4360|
;;;2605           if (MCI_IsTxComplete((Mci *)pSd) == 0) {
0010fe  0028              MOVS     r0,r5
001100  f7fffffe          BL       MCI_IsTxComplete
001104  2800              CMP      r0,#0
001106  d009              BEQ      |L1.4380|
                  |L1.4360|
;;;2606               return SD_ERROR_BUSY;
;;;2607           }
;;;2608       }
;;;2609   
;;;2610       if (   pSd->state != SD_STATE_READ
001108  2013              MOVS     r0,#0x13
00110a  0140              LSLS     r0,r0,#5
00110c  182f              ADDS     r7,r5,r0
00110e  7839              LDRB     r1,[r7,#0]
;;;2611           || pSd->preBlock + 1 != address ) {
001110  2009              MOVS     r0,#9
001112  0180              LSLS     r0,r0,#6
001114  182c              ADDS     r4,r5,r0
001116  2910              CMP      r1,#0x10              ;2610
001118  d106              BNE      |L1.4392|
00111a  e001              B        |L1.4384|
                  |L1.4380|
00111c  2004              MOVS     r0,#4                 ;2606
;;;2612           // Start infinite block reading
;;;2613           error = MoveToTransferState(pSd, address, 0, 0, 1);
;;;2614       }
;;;2615       else    error = 0;
;;;2616       if (!error) {
;;;2617           pSd->state = SD_STATE_READ;
;;;2618           pSd->preBlock = address + (length - 1);
;;;2619           error = ContinuousRead(pSd,
;;;2620                                  length,
;;;2621                                  pData,
;;;2622                                  pCallback, pArgs);
;;;2623       }
;;;2624       TRACE_DEBUG("SDrd(%u,%u):%u\n\r", address, length, error);
;;;2625   
;;;2626       return 0;    
;;;2627   }
00111e  e6f0              B        |L1.3842|
                  |L1.4384|
001120  68a0              LDR      r0,[r4,#8]            ;2611
001122  1c40              ADDS     r0,r0,#1              ;2611
001124  42b0              CMP      r0,r6                 ;2611
001126  d008              BEQ      |L1.4410|
                  |L1.4392|
001128  2001              MOVS     r0,#1                 ;2613
00112a  2300              MOVS     r3,#0                 ;2613
00112c  9000              STR      r0,[sp,#0]            ;2613
00112e  001a              MOVS     r2,r3                 ;2613
001130  0031              MOVS     r1,r6                 ;2613
001132  0028              MOVS     r0,r5                 ;2613
001134  f7fffffe          BL       MoveToTransferState
001138  e000              B        |L1.4412|
                  |L1.4410|
00113a  2000              MOVS     r0,#0                 ;2615
                  |L1.4412|
00113c  2800              CMP      r0,#0                 ;2616
00113e  d10d              BNE      |L1.4444|
001140  2010              MOVS     r0,#0x10              ;2617
001142  7038              STRB     r0,[r7,#0]            ;2617
001144  9804              LDR      r0,[sp,#0x10]         ;2618
001146  1830              ADDS     r0,r6,r0              ;2618
001148  1e40              SUBS     r0,r0,#1              ;2618
00114a  60a0              STR      r0,[r4,#8]            ;2618
00114c  980b              LDR      r0,[sp,#0x2c]         ;2619
00114e  9a03              LDR      r2,[sp,#0xc]          ;2619
001150  9000              STR      r0,[sp,#0]            ;2619
001152  9b0a              LDR      r3,[sp,#0x28]         ;2619
001154  9904              LDR      r1,[sp,#0x10]         ;2619
001156  0028              MOVS     r0,r5                 ;2619
001158  f7fffffe          BL       ContinuousRead
                  |L1.4444|
00115c  2000              MOVS     r0,#0                 ;2626
00115e  e6d0              B        |L1.3842|
;;;2628   
                          ENDP

                  SD_Write PROC
;;;2642   //------------------------------------------------------------------------------
;;;2643   unsigned char SD_Write(SdCard        *pSd,
001160  b5ff              PUSH     {r0-r7,lr}
;;;2644                          unsigned int   address,
;;;2645                          void          *pData,
;;;2646                          unsigned short length,
;;;2647                          SdCallback     pCallback,
;;;2648                          void          *pArgs)
;;;2649   {
001162  0005              MOVS     r5,r0
001164  000e              MOVS     r6,r1
001166  b081              SUB      sp,sp,#4
;;;2650       unsigned char error;
;;;2651       // If callback is defined, performe none blocked writing
;;;2652       if (pCallback) {
001168  980a              LDR      r0,[sp,#0x28]
00116a  2800              CMP      r0,#0
00116c  d004              BEQ      |L1.4472|
;;;2653           if (MCI_IsTxComplete((Mci *)pSd) == 0) {
00116e  0028              MOVS     r0,r5
001170  f7fffffe          BL       MCI_IsTxComplete
001174  2800              CMP      r0,#0
001176  d009              BEQ      |L1.4492|
                  |L1.4472|
;;;2654               return SD_ERROR_BUSY;
;;;2655           }
;;;2656       }
;;;2657       if (   pSd->state != SD_STATE_WRITE
001178  2013              MOVS     r0,#0x13
00117a  0140              LSLS     r0,r0,#5
00117c  182f              ADDS     r7,r5,r0
00117e  7839              LDRB     r1,[r7,#0]
;;;2658           || pSd->preBlock + 1 != address ) {
001180  2009              MOVS     r0,#9
001182  0180              LSLS     r0,r0,#6
001184  182c              ADDS     r4,r5,r0
001186  2920              CMP      r1,#0x20              ;2657
001188  d106              BNE      |L1.4504|
00118a  e001              B        |L1.4496|
                  |L1.4492|
00118c  2004              MOVS     r0,#4                 ;2654
;;;2659           // Start infinite block writing
;;;2660           error = MoveToTransferState(pSd, address, 0, 0, 0);
;;;2661       }
;;;2662       else    error = 0;
;;;2663       if (!error) {
;;;2664           pSd->state = SD_STATE_WRITE;
;;;2665           error = ContinuousWrite(pSd,
;;;2666                                   length,
;;;2667                                   pData,
;;;2668                                   pCallback, pArgs);
;;;2669           pSd->preBlock = address + (length - 1);
;;;2670       }
;;;2671       TRACE_DEBUG("SDwr(%u,%u):%u\n\r", address, length, error);
;;;2672       
;;;2673       return 0;
;;;2674   }
00118e  e6b8              B        |L1.3842|
                  |L1.4496|
001190  68a0              LDR      r0,[r4,#8]            ;2658
001192  1c40              ADDS     r0,r0,#1              ;2658
001194  42b0              CMP      r0,r6                 ;2658
001196  d008              BEQ      |L1.4522|
                  |L1.4504|
001198  2000              MOVS     r0,#0                 ;2660
00119a  0003              MOVS     r3,r0                 ;2660
00119c  0002              MOVS     r2,r0                 ;2660
00119e  9000              STR      r0,[sp,#0]            ;2660
0011a0  0031              MOVS     r1,r6                 ;2660
0011a2  0028              MOVS     r0,r5                 ;2660
0011a4  f7fffffe          BL       MoveToTransferState
0011a8  e000              B        |L1.4524|
                  |L1.4522|
0011aa  2000              MOVS     r0,#0                 ;2662
                  |L1.4524|
0011ac  2800              CMP      r0,#0                 ;2663
0011ae  d10d              BNE      |L1.4556|
0011b0  2020              MOVS     r0,#0x20              ;2664
0011b2  7038              STRB     r0,[r7,#0]            ;2664
0011b4  980b              LDR      r0,[sp,#0x2c]         ;2665
0011b6  9a03              LDR      r2,[sp,#0xc]          ;2665
0011b8  9000              STR      r0,[sp,#0]            ;2665
0011ba  9b0a              LDR      r3,[sp,#0x28]         ;2665
0011bc  9904              LDR      r1,[sp,#0x10]         ;2665
0011be  0028              MOVS     r0,r5                 ;2665
0011c0  f7fffffe          BL       ContinuousWrite
0011c4  9804              LDR      r0,[sp,#0x10]         ;2669
0011c6  1830              ADDS     r0,r6,r0              ;2669
0011c8  1e40              SUBS     r0,r0,#1              ;2669
0011ca  60a0              STR      r0,[r4,#8]            ;2669
                  |L1.4556|
0011cc  2000              MOVS     r0,#0                 ;2673
0011ce  e698              B        |L1.3842|
;;;2675   
                          ENDP

                  SD_ReadBlock PROC
;;;2686   //------------------------------------------------------------------------------
;;;2687   unsigned char SD_ReadBlock(SdCard *pSd,
0011d0  b5ff              PUSH     {r0-r7,lr}
;;;2688                              unsigned int address,
;;;2689                              unsigned short nbBlocks,
;;;2690                              unsigned char *pData)
;;;2691   {
0011d2  0005              MOVS     r5,r0
0011d4  000e              MOVS     r6,r1
0011d6  b081              SUB      sp,sp,#4
;;;2692       unsigned char error = 0;
0011d8  2000              MOVS     r0,#0
;;;2693   
;;;2694       SANITY_CHECK(pSd);
;;;2695       SANITY_CHECK(pData);
;;;2696       SANITY_CHECK(nbBlocks);
;;;2697   
;;;2698       TRACE_DEBUG("ReadBlk(%d,%d)", address, nbBlocks);
;;;2699   #if defined(SINGLE_READ)
;;;2700       while(nbBlocks --) {
;;;2701           error = PerformSingleTransfer(pSd, address, pData, 1);
;;;2702           if (error)
;;;2703               break;
;;;2704           // SDHC
;;;2705           if (pSd->totalSize == 0xFFFFFFFF) {
;;;2706               address += 1;
;;;2707               pData = &pData[512];
;;;2708           }
;;;2709           else {
;;;2710               address += 1;
;;;2711               pData = &pData[512];
;;;2712           }
;;;2713       }
;;;2714       return error;
;;;2715   #endif
;;;2716   #if !defined(MCI2_INTERFACE)
;;;2717     #if !defined(AT91C_MCI_RDPROOF)
;;;2718       error = MoveToTransferState(pSd, address, nbBlocks, pData, 1);
;;;2719       pSd->state = SD_STATE_READ;
;;;2720     #else
;;;2721       if((pSd->state == SD_STATE_READ)
;;;2722           && ((pSd->preBlock + 1) == address)) {
;;;2723   
;;;2724         #if defined(at91rm9200)
;;;2725           error = Cmd12(pSd, 0);
;;;2726           if (error) {
;;;2727               return error;
;;;2728           }
;;;2729         #else
;;;2730           TRACE_DEBUG("SD_ReadBlock:ContinuousRead\n\r");
;;;2731           error = ContinuousRead(pSd,
;;;2732                                  nbBlocks,
;;;2733                                  pData,
;;;2734                                  0, 0);
;;;2735           pSd->preBlock = address + (nbBlocks-1);
;;;2736         #endif
;;;2737       }
;;;2738       else {
;;;2739           error = MoveToTransferState(pSd, address, nbBlocks, pData, 1);
;;;2740           pSd->state = SD_STATE_READ;
;;;2741       }
;;;2742     #endif
;;;2743   #else
;;;2744       if (   pSd->state != SD_STATE_READ
0011da  2113              MOVS     r1,#0x13
0011dc  0149              LSLS     r1,r1,#5
0011de  186f              ADDS     r7,r5,r1
0011e0  783a              LDRB     r2,[r7,#0]
;;;2745           || pSd->preBlock + 1 != address ) {
0011e2  2109              MOVS     r1,#9
0011e4  0189              LSLS     r1,r1,#6
0011e6  186c              ADDS     r4,r5,r1
0011e8  2a10              CMP      r2,#0x10              ;2744
0011ea  d103              BNE      |L1.4596|
0011ec  68a1              LDR      r1,[r4,#8]
0011ee  1c49              ADDS     r1,r1,#1
0011f0  42b1              CMP      r1,r6
0011f2  d007              BEQ      |L1.4612|
                  |L1.4596|
;;;2746           // Start infinite block reading
;;;2747           error = MoveToTransferState(pSd, address, 0, 0, 1);
0011f4  2001              MOVS     r0,#1
0011f6  2300              MOVS     r3,#0
0011f8  9000              STR      r0,[sp,#0]
0011fa  001a              MOVS     r2,r3
0011fc  0031              MOVS     r1,r6
0011fe  0028              MOVS     r0,r5
001200  f7fffffe          BL       MoveToTransferState
                  |L1.4612|
;;;2748       }
;;;2749       if (!error) {
001204  2800              CMP      r0,#0
001206  d10f              BNE      |L1.4648|
;;;2750           pSd->state = SD_STATE_READ;
001208  2010              MOVS     r0,#0x10
00120a  7038              STRB     r0,[r7,#0]
;;;2751           error = ContinuousRead(pSd,
00120c  2000              MOVS     r0,#0
00120e  0003              MOVS     r3,r0
001210  9000              STR      r0,[sp,#0]
001212  9a04              LDR      r2,[sp,#0x10]
001214  9903              LDR      r1,[sp,#0xc]
001216  0028              MOVS     r0,r5
001218  f7fffffe          BL       ContinuousRead
;;;2752                                  nbBlocks,
;;;2753                                  pData,
;;;2754                                  0, 0);
;;;2755           if (!error) pSd->preBlock = address + (nbBlocks - 1);
00121c  2800              CMP      r0,#0
00121e  d103              BNE      |L1.4648|
001220  9903              LDR      r1,[sp,#0xc]
001222  1871              ADDS     r1,r6,r1
001224  1e49              SUBS     r1,r1,#1
001226  60a1              STR      r1,[r4,#8]
                  |L1.4648|
;;;2756       }
;;;2757   #endif
;;;2758       return error;
;;;2759   }
001228  e66b              B        |L1.3842|
;;;2760   
                          ENDP

                  SD_WriteBlock PROC
;;;2771   //------------------------------------------------------------------------------
;;;2772   unsigned char SD_WriteBlock(SdCard *pSd,
00122a  b5ff              PUSH     {r0-r7,lr}
;;;2773                               unsigned int address,
;;;2774                               unsigned short nbBlocks,
;;;2775                               const unsigned char *pData)
;;;2776   {
00122c  0005              MOVS     r5,r0
00122e  000e              MOVS     r6,r1
001230  b081              SUB      sp,sp,#4
;;;2777       unsigned char error = 0;
001232  2000              MOVS     r0,#0
;;;2778   
;;;2779       SANITY_CHECK(pSd);
;;;2780       SANITY_CHECK(pData);
;;;2781       SANITY_CHECK(nbBlocks);
;;;2782   
;;;2783       TRACE_DEBUG("WriteBlk(%d,%d)\n\r", address, nbBlocks);
;;;2784   
;;;2785   #if defined(SINGLE_WRITE)
;;;2786       unsigned char *pB = (unsigned char*)pData;
;;;2787       while(nbBlocks --) {
;;;2788           error = PerformSingleTransfer(pSd, address, pB, 0);
;;;2789           if (error)
;;;2790               break;
;;;2791           // SDHC
;;;2792           if (pSd->totalSize == 0xFFFFFFFF) {
;;;2793               address += 1;
;;;2794               pB = &pB[512];
;;;2795           }
;;;2796           else {
;;;2797               address += 1;
;;;2798               pB = &pB[512];
;;;2799           }
;;;2800       }
;;;2801       return error;
;;;2802   #endif
;;;2803   #if !defined(MCI2_INTERFACE)
;;;2804     #if !defined(AT91C_MCI_WRPROOF)
;;;2805       error = MoveToTransferState(pSd, address, nbBlocks,
;;;2806                                   (unsigned char *)pData, 0);
;;;2807       pSd->state = SD_STATE_WRITE;
;;;2808     #else
;;;2809       if((pSd->state == SD_STATE_WRITE)
;;;2810           && ((pSd->preBlock + 1) == address)) {
;;;2811   
;;;2812           TRACE_DEBUG("SD_WriteBlock:ContinuousWrite\n\r");
;;;2813           error = ContinuousWrite(pSd,
;;;2814                                   nbBlocks,
;;;2815                                   pData,
;;;2816                                   0, 0);
;;;2817           pSd->preBlock = address + (nbBlocks-1);
;;;2818       }
;;;2819       else {
;;;2820   
;;;2821           //TRACE_FATAL("SD_WriteBlock:MoveToTransferState\n\r");
;;;2822           error = MoveToTransferState(pSd, address, nbBlocks,
;;;2823                                       (unsigned char *)pData, 0);
;;;2824           pSd->state = SD_STATE_WRITE;
;;;2825       }
;;;2826     #endif
;;;2827   #else
;;;2828       if (   pSd->state != SD_STATE_WRITE
001234  2113              MOVS     r1,#0x13
001236  0149              LSLS     r1,r1,#5
001238  186f              ADDS     r7,r5,r1
00123a  783a              LDRB     r2,[r7,#0]
;;;2829           || pSd->preBlock + 1 != address ) {
00123c  2109              MOVS     r1,#9
00123e  0189              LSLS     r1,r1,#6
001240  186c              ADDS     r4,r5,r1
001242  2a20              CMP      r2,#0x20              ;2828
001244  d103              BNE      |L1.4686|
001246  68a1              LDR      r1,[r4,#8]
001248  1c49              ADDS     r1,r1,#1
00124a  42b1              CMP      r1,r6
00124c  d007              BEQ      |L1.4702|
                  |L1.4686|
;;;2830           // Start infinite block writing
;;;2831           error = MoveToTransferState(pSd, address, 0, 0, 0);
00124e  2000              MOVS     r0,#0
001250  0003              MOVS     r3,r0
001252  0002              MOVS     r2,r0
001254  9000              STR      r0,[sp,#0]
001256  0031              MOVS     r1,r6
001258  0028              MOVS     r0,r5
00125a  f7fffffe          BL       MoveToTransferState
                  |L1.4702|
;;;2832       }
;;;2833       if (!error) {
00125e  2800              CMP      r0,#0
001260  d10f              BNE      |L1.4738|
;;;2834           pSd->state = SD_STATE_WRITE;
001262  2020              MOVS     r0,#0x20
001264  7038              STRB     r0,[r7,#0]
;;;2835           error = ContinuousWrite(pSd,
001266  2000              MOVS     r0,#0
001268  0003              MOVS     r3,r0
00126a  9000              STR      r0,[sp,#0]
00126c  9a04              LDR      r2,[sp,#0x10]
00126e  9903              LDR      r1,[sp,#0xc]
001270  0028              MOVS     r0,r5
001272  f7fffffe          BL       ContinuousWrite
;;;2836                                   nbBlocks,
;;;2837                                   pData,
;;;2838                                   0, 0);
;;;2839           if (!error) pSd->preBlock = address + (nbBlocks - 1);
001276  2800              CMP      r0,#0
001278  d103              BNE      |L1.4738|
00127a  9903              LDR      r1,[sp,#0xc]
00127c  1871              ADDS     r1,r6,r1
00127e  1e49              SUBS     r1,r1,#1
001280  60a1              STR      r1,[r4,#8]
                  |L1.4738|
;;;2840       }
;;;2841   #endif
;;;2842   
;;;2843       return error;
;;;2844   }
001282  e63e              B        |L1.3842|
;;;2845   
                          ENDP

                  SdMmcIdentify PROC
;;;2855   //------------------------------------------------------------------------------
;;;2856   static unsigned char SdMmcIdentify(SdCard *pSd)
001284  b5f8              PUSH     {r3-r7,lr}
;;;2857   {
001286  0007              MOVS     r7,r0
;;;2858       unsigned char mem = 0, io = 0, f8 = 0, mp = 1, ccs = 0;
001288  2500              MOVS     r5,#0
00128a  2000              MOVS     r0,#0
00128c  9000              STR      r0,[sp,#0]
;;;2859       unsigned char error = 0;
;;;2860   #if MCI_SDIO_ENABLE
;;;2861       unsigned int  status;
;;;2862   #endif
;;;2863   
;;;2864       // Reset HC to default HS and BusMode
;;;2865       MCI_EnableHsMode(pSd->pSdDriver, 0);
00128e  6838              LDR      r0,[r7,#0]
001290  2100              MOVS     r1,#0
001292  f7fffffe          BL       MCI_EnableHsMode
;;;2866       MCI_SetBusWidth(pSd->pSdDriver, MCI_SDCBUS_1BIT);
001296  6838              LDR      r0,[r7,#0]
001298  2100              MOVS     r1,#0
00129a  f7fffffe          BL       MCI_SetBusWidth
;;;2867   
;;;2868   #if MCI_SDIO_ENABLE
;;;2869       // Reset SDIO
;;;2870       // CMD52, write 1 to RES bit in the CCCR (bit 3 of register 6)
;;;2871       status = (0x1 << 3);
;;;2872       error = Cmd52(pSd, 0, 1, 0, 6, &status);
;;;2873       if (!error && ((status & STATUS_SDIO_CMD52) == 0)) {}
;;;2874       else if (error == MCI_STATUS_NORESPONSE) {}
;;;2875       else {
;;;2876           TRACE_DEBUG("SdMmcIdentify.Cmd52 fail: %d, %x", error, status);
;;;2877       }
;;;2878   #endif
;;;2879   
;;;2880       // Reset MEM
;;;2881       error = SwReset(pSd, 1);
00129e  2101              MOVS     r1,#1
0012a0  0038              MOVS     r0,r7
0012a2  f7fffffe          BL       SwReset
;;;2882       if (error) {
;;;2883           TRACE_DEBUG("SdMmcIdentify.SwReset: %d", error)
;;;2884       }
;;;2885   
;;;2886       // CMD8 is newly added in the Physical Layer Specification Version 2.00 to
;;;2887       // support multiple voltage ranges and used to check whether the card
;;;2888       // supports supplied voltage. The version 2.00 host shall issue CMD8 and
;;;2889       // verify voltage before card initialization.
;;;2890       // The host that does not support CMD8 shall supply high voltage range...
;;;2891       error = Cmd8(pSd, 1, (void*)1);
0012a6  2201              MOVS     r2,#1
0012a8  0011              MOVS     r1,r2
0012aa  0038              MOVS     r0,r7
0012ac  f7fffffe          BL       Cmd8
0012b0  0004              MOVS     r4,r0
;;;2892       if (error == 0) {
0012b2  2c00              CMP      r4,#0
0012b4  d07b              BEQ      |L1.5038|
;;;2893           f8 = 1;
;;;2894       }
;;;2895       else if (error != SD_ERROR_NORESPONSE) {
0012b6  2c02              CMP      r4,#2
0012b8  d07b              BEQ      |L1.5042|
;;;2896           TRACE_ERR("SdMmcIdentify.Cmd8: %d", error);
0012ba  201b              MOVS     r0,#0x1b
0012bc  f7fffffe          BL       ShellPutByte
0012c0  4804              LDR      r0,|L1.4820|
0012c2  f7fffffe          BL       ShellPrintf
0012c6  201b              MOVS     r0,#0x1b
0012c8  f7fffffe          BL       ShellPutByte
0012cc  a002              ADR      r0,|L1.4824|
0012ce  f7fffffe          BL       ShellPrintf
0012d2  e063              B        |L1.5020|
                  |L1.4820|
                          DCD      ||.text||+0x420
                  |L1.4824|
0012d8  5b6d00            DCB      "[m",0
0012db  00                DCB      0
                  |L1.4828|
0012dc  4d6d6353          DCB      "MmcSelectCard.Cmd13 (%d)"
0012e0  656c6563
0012e4  74436172
0012e8  642e436d
0012ec  64313320
0012f0  28256429
                  |L1.4852|
0012f4  0a0d00            DCB      "\n\r",0
0012f7  00                DCB      0
                  |L1.4856|
0012f8  4d6d6353          DCB      "MmcSelectCard, wrong state %x\n\r",0
0012fc  656c6563
001300  74436172
001304  642c2077
001308  726f6e67
00130c  20737461
001310  74652025
001314  780a0d00
                  |L1.4888|
001318  4d6d6353          DCB      "MmcSelectCard.Cmd7 (%d)\n\r",0
00131c  656c6563
001320  74436172
001324  642e436d
001328  64372028
00132c  2564290a
001330  0d00    
001332  00                DCB      0
001333  00                DCB      0
                  |L1.4916|
001334  4d6d6347          DCB      "MmcGetExt.Cmd8: %d\n\r",0
001338  65744578
00133c  742e436d
001340  64383a20
001344  25640a0d
001348  00      
001349  00                DCB      0
00134a  00                DCB      0
00134b  00                DCB      0
                  |L1.4940|
00134c  53644765          DCB      "SdGetExt.Acmd13: %d\n\r",0
001350  74457874
001354  2e41636d
001358  6431333a
00135c  2025640a
001360  0d00    
001362  00                DCB      0
001363  00                DCB      0
                  |L1.4964|
001364  53644765          DCB      "SdGetExt.Acmd51: %d\n\r",0
001368  74457874
00136c  2e41636d
001370  6435313a
001374  2025640a
001378  0d00    
00137a  00                DCB      0
00137b  00                DCB      0
                  |L1.4988|
00137c  53644d6d          DCB      "SdMmcUpdateInfo.Cmd9 (%d)\n\r",0
001380  63557064
001384  61746549
001388  6e666f2e
00138c  436d6439
001390  20282564
001394  290a0d00
001398  e009              B        |L1.5038|
00139a  e00a              B        |L1.5042|
                  |L1.5020|
00139c  0021              MOVS     r1,r4
00139e  a0fa              ADR      r0,|L1.6024|
0013a0  f7fffffe          BL       ShellPrintf
0013a4  a0fe              ADR      r0,|L1.6048|
0013a6  f7fffffe          BL       ShellPrintf
;;;2897           return SD_ERROR_DRIVER;
0013aa  2001              MOVS     r0,#1
;;;2898       }
;;;2899       else {
;;;2900           // Delay after "no response"
;;;2901           Delay(800);
;;;2902       }
;;;2903   
;;;2904   #if MCI_SDIO_ENABLE
;;;2905       // CMD5 is added for SDIO OCR check
;;;2906       status = 0;
;;;2907       error = Cmd5(pSd, &status);
;;;2908       if (error)
;;;2909   	{
;;;2910           DEBUG_MSG("SdMmcIdentify.Cmd5: %d", error);
;;;2911       }
;;;2912       // SDIO or SD COMBO: FN > 0
;;;2913       else if ((status & AT91C_SDIO_NF) > 0) {
;;;2914           // Set New Voltage
;;;2915           unsigned int   cmd5Retries = 10000;
;;;2916           do {
;;;2917               status &= AT91C_MMC_HOST_VOLTAGE_RANGE;
;;;2918               error = Cmd5(pSd, &status);
;;;2919               if (status & AT91C_CARD_POWER_UP_BUSY)
;;;2920                   break;
;;;2921           } while(!error && cmd5Retries --);
;;;2922           if (error) {
;;;2923               TRACE_ERROR("SdMmcIdentify.Cmd5 V: %d\n\r", error);
;;;2924               return SD_ERROR_DRIVER;
;;;2925           }
;;;2926           TRACE_INFO("SDIO\n\r");
;;;2927           io = 1;
;;;2928           // SDIO only?
;;;2929           if ((status & AT91C_SDIO_MP) == 0) mp = 0;
;;;2930       }
;;;2931   #endif
;;;2932       // SD or MMC or COMBO: mp is 1
;;;2933       if (mp) {
;;;2934           // Try SD memory initialize
;;;2935           error = Acmd41(pSd, f8, &ccs);
;;;2936           if (error) {
;;;2937               unsigned int   cmd1Retries = 10000;
;;;2938               TRACE_DEBUG("SdMmcIdentify.Acmd41: %d, try MMC\n\r", error);
;;;2939   
;;;2940               // Try MMC initialize
;;;2941               error = SwReset(pSd, 10);
;;;2942               if (error) {
;;;2943                   TRACE_ERROR("SdMmcIdentify.Mmc.SwReset: %d\n\r", error);
;;;2944                   return SD_ERROR_DRIVER;
;;;2945               }
;;;2946               // - Set Voltage
;;;2947               do {
;;;2948                   error = Cmd1(pSd, 1, &ccs);
;;;2949               }
;;;2950               while ((error) && (cmd1Retries-- > 0));
;;;2951               if (error) {
;;;2952                   TRACE_ERROR("SdMmcIdentify.Cmd1: %d\n\r", error);
;;;2953                   return SD_ERROR_DRIVER;
;;;2954               }
;;;2955               else if (ccs) {
;;;2956                   pSd->cardType = CARD_MMCHD;
;;;2957               }
;;;2958               else {
;;;2959                   pSd->cardType = CARD_MMC;
;;;2960               }
;;;2961   
;;;2962               // MMC Identified OK
;;;2963               return 0;
;;;2964           }
;;;2965           else if (ccs) {
;;;2966               DEBUG_MSG("SDHC MEM\n\r");
;;;2967           }
;;;2968           else {
;;;2969               DEBUG_MSG("SD MEM\n\r");
;;;2970           }
;;;2971           mem = 1;
;;;2972       }
;;;2973   
;;;2974       // SD(IO)+MEM ?
;;;2975       if (!mem) {
;;;2976           // SDIO only
;;;2977           if (io) {
;;;2978               pSd->cardType = CARD_SDIO;
;;;2979               return 0;
;;;2980           }
;;;2981       }
;;;2982       // SD COMBO, continue with memory initialize
;;;2983       else if (io) {
;;;2984           if (ccs) pSd->cardType = CARD_SDHCCOMBO;
;;;2985           else     pSd->cardType = CARD_SDCOMBO;
;;;2986       }
;;;2987       // SD(HC), continue with memory initialize
;;;2988       else {
;;;2989           if (ccs) pSd->cardType = CARD_SDHC;
;;;2990           else     pSd->cardType = CARD_SD;
;;;2991       }
;;;2992       return 0;
;;;2993   }
0013ac  bdf8              POP      {r3-r7,pc}
                  |L1.5038|
0013ae  2501              MOVS     r5,#1                 ;2893
0013b0  e003              B        |L1.5050|
                  |L1.5042|
0013b2  2019              MOVS     r0,#0x19              ;2901
0013b4  0140              LSLS     r0,r0,#5              ;2901
0013b6  f7fffffe          BL       Delay
                  |L1.5050|
0013ba  0029              MOVS     r1,r5                 ;2935
0013bc  0038              MOVS     r0,r7                 ;2935
0013be  466a              MOV      r2,sp                 ;2935
0013c0  f7fffffe          BL       Acmd41
0013c4  2109              MOVS     r1,#9                 ;2956
0013c6  0189              LSLS     r1,r1,#6              ;2956
0013c8  187e              ADDS     r6,r7,r1              ;2956
0013ca  2800              CMP      r0,#0                 ;2936
0013cc  d048              BEQ      |L1.5216|
0013ce  4df5              LDR      r5,|L1.6052|
0013d0  210a              MOVS     r1,#0xa               ;2941
0013d2  0038              MOVS     r0,r7                 ;2941
0013d4  f7fffffe          BL       SwReset
0013d8  0004              MOVS     r4,r0                 ;2941
0013da  2c00              CMP      r4,#0                 ;2942
0013dc  d014              BEQ      |L1.5128|
0013de  201b              MOVS     r0,#0x1b              ;2943
0013e0  f7fffffe          BL       ShellPutByte
0013e4  48f0              LDR      r0,|L1.6056|
0013e6  f7fffffe          BL       ShellPrintf
0013ea  201b              MOVS     r0,#0x1b              ;2943
0013ec  f7fffffe          BL       ShellPutByte
0013f0  a0ee              ADR      r0,|L1.6060|
0013f2  f7fffffe          BL       ShellPrintf
0013f6  0021              MOVS     r1,r4                 ;2943
0013f8  a0ed              ADR      r0,|L1.6064|
0013fa  f7fffffe          BL       ShellPrintf
0013fe  a0e8              ADR      r0,|L1.6048|
001400  f7fffffe          BL       ShellPrintf
001404  2001              MOVS     r0,#1                 ;2944
001406  bdf8              POP      {r3-r7,pc}
                  |L1.5128|
001408  2101              MOVS     r1,#1                 ;2948
00140a  0038              MOVS     r0,r7                 ;2948
00140c  466a              MOV      r2,sp                 ;2948
00140e  f7fffffe          BL       Cmd1
001412  0004              MOVS     r4,r0                 ;2948
001414  2c00              CMP      r4,#0                 ;2950
001416  d001              BEQ      |L1.5148|
001418  1e6d              SUBS     r5,r5,#1              ;2950
00141a  d2f5              BCS      |L1.5128|
                  |L1.5148|
00141c  2c00              CMP      r4,#0                 ;2951
00141e  d014              BEQ      |L1.5194|
001420  201b              MOVS     r0,#0x1b              ;2952
001422  f7fffffe          BL       ShellPutByte
001426  48e0              LDR      r0,|L1.6056|
001428  f7fffffe          BL       ShellPrintf
00142c  201b              MOVS     r0,#0x1b              ;2952
00142e  f7fffffe          BL       ShellPutByte
001432  a0de              ADR      r0,|L1.6060|
001434  f7fffffe          BL       ShellPrintf
001438  0021              MOVS     r1,r4                 ;2952
00143a  a0e5              ADR      r0,|L1.6096|
00143c  f7fffffe          BL       ShellPrintf
001440  a0d7              ADR      r0,|L1.6048|
001442  f7fffffe          BL       ShellPrintf
001446  2001              MOVS     r0,#1                 ;2953
001448  bdf8              POP      {r3-r7,pc}
                  |L1.5194|
00144a  4668              MOV      r0,sp                 ;2955
00144c  7800              LDRB     r0,[r0,#0]            ;2955
00144e  2800              CMP      r0,#0                 ;2955
001450  d002              BEQ      |L1.5208|
001452  2005              MOVS     r0,#5                 ;2956
001454  77b0              STRB     r0,[r6,#0x1e]         ;2956
001456  e001              B        |L1.5212|
                  |L1.5208|
001458  2004              MOVS     r0,#4                 ;2959
00145a  77b0              STRB     r0,[r6,#0x1e]         ;2959
                  |L1.5212|
00145c  2000              MOVS     r0,#0                 ;2963
00145e  bdf8              POP      {r3-r7,pc}
                  |L1.5216|
001460  4668              MOV      r0,sp                 ;2989
001462  7800              LDRB     r0,[r0,#0]            ;2989
001464  2800              CMP      r0,#0                 ;2989
001466  d002              BEQ      |L1.5230|
001468  2003              MOVS     r0,#3                 ;2989
00146a  77b0              STRB     r0,[r6,#0x1e]         ;2989
00146c  e001              B        |L1.5234|
                  |L1.5230|
00146e  2002              MOVS     r0,#2                 ;2990
001470  77b0              STRB     r0,[r6,#0x1e]         ;2990
                  |L1.5234|
001472  2000              MOVS     r0,#0                 ;2992
001474  bdf8              POP      {r3-r7,pc}
;;;2994   
                          ENDP

                  SdMmcEnum PROC
;;;3001   //------------------------------------------------------------------------------
;;;3002   static unsigned char SdMmcEnum(SdCard *pSd)
001476  b5f0              PUSH     {r4-r7,lr}
;;;3003   {
001478  b095              SUB      sp,sp,#0x54
00147a  0004              MOVS     r4,r0
;;;3004       unsigned char mem = 0, io = 0;
00147c  2500              MOVS     r5,#0
00147e  2000              MOVS     r0,#0
001480  9014              STR      r0,[sp,#0x50]
;;;3005       unsigned int   status;
;;;3006       unsigned short error;
;;;3007       unsigned char  isHsSupport = 0;
001482  9011              STR      r0,[sp,#0x44]
;;;3008       unsigned char  updateInformation = 0;
001484  2600              MOVS     r6,#0
;;;3009   
;;;3010       if (pSd->cardType & CARD_TYPE_bmSDMMC) mem = 1;
001486  2009              MOVS     r0,#9
001488  0180              LSLS     r0,r0,#6
00148a  1827              ADDS     r7,r4,r0
00148c  7fb8              LDRB     r0,[r7,#0x1e]
00148e  0741              LSLS     r1,r0,#29
001490  0f89              LSRS     r1,r1,#30
001492  d000              BEQ      |L1.5270|
001494  2501              MOVS     r5,#1
                  |L1.5270|
;;;3011       if (pSd->cardType & CARD_TYPE_bmSDIO)  io = 1;
001496  0700              LSLS     r0,r0,#28
001498  d501              BPL      |L1.5278|
00149a  2001              MOVS     r0,#1
00149c  9014              STR      r0,[sp,#0x50]
                  |L1.5278|
;;;3012   
;;;3013       // For MEM
;;;3014       // The host then issues the command ALL_SEND_CID (CMD2) to the card to get
;;;3015       // its unique card identification (CID) number.
;;;3016       // Card that is unidentified (i.e. which is in Ready State) sends its CID
;;;3017       // number as the response (on the CMD line).
;;;3018       if (mem) {
00149e  2d00              CMP      r5,#0
0014a0  d01c              BEQ      |L1.5340|
;;;3019           error = Cmd2(pSd);
0014a2  0020              MOVS     r0,r4
0014a4  f7fffffe          BL       Cmd2
0014a8  9012              STR      r0,[sp,#0x48]
;;;3020           if (error) {
0014aa  9812              LDR      r0,[sp,#0x48]
0014ac  2800              CMP      r0,#0
0014ae  d015              BEQ      |L1.5340|
;;;3021               TRACE_ERROR("SdMmcEnum.Cmd2: %d\n\r", error);
0014b0  201b              MOVS     r0,#0x1b
0014b2  f7fffffe          BL       ShellPutByte
0014b6  48bc              LDR      r0,|L1.6056|
0014b8  f7fffffe          BL       ShellPrintf
0014bc  201b              MOVS     r0,#0x1b
0014be  f7fffffe          BL       ShellPutByte
0014c2  a0ba              ADR      r0,|L1.6060|
0014c4  f7fffffe          BL       ShellPrintf
0014c8  9912              LDR      r1,[sp,#0x48]
0014ca  a0c8              ADR      r0,|L1.6124|
0014cc  f7fffffe          BL       ShellPrintf
0014d0  a0b3              ADR      r0,|L1.6048|
0014d2  f7fffffe          BL       ShellPrintf
;;;3022               return SD_ERROR_DRIVER;
0014d6  2001              MOVS     r0,#1
                  |L1.5336|
;;;3023           }
;;;3024       }
;;;3025   
;;;3026       // For SDIO & MEM
;;;3027       // Thereafter, the host issues CMD3 (SEND_RELATIVE_ADDR) asks the
;;;3028       // card to publish a new relative card address (RCA), which is shorter than
;;;3029       // CID and which is used to address the card in the future data transfer
;;;3030       // mode. Once the RCA is received the card state changes to the Stand-by
;;;3031       // State. At this point, if the host wants to assign another RCA number, it
;;;3032       // can ask the card to publish a new number by sending another CMD3 command
;;;3033       // to the card. The last published RCA is the actual RCA number of the card.
;;;3034       error = Cmd3(pSd);
;;;3035       if (error) {
;;;3036           TRACE_ERROR("SdMmcInit.Cmd3 %d\n\r", error);
;;;3037           return SD_ERROR_DRIVER;
;;;3038       }
;;;3039   
;;;3040       // For MEM
;;;3041       // SEND_CSD (CMD9) to obtain the Card Specific Data (CSD register),
;;;3042       // e.g. block length, card storage capacity, etc...
;;;3043       if (mem) {
;;;3044           error = Cmd9(pSd);
;;;3045           if (error) {
;;;3046               TRACE_ERROR("SdMmcInit.Cmd9 %d\n\r", error);
;;;3047               return SD_ERROR_DRIVER;
;;;3048           }
;;;3049       }
;;;3050   
;;;3051       // For SDIO & MEM
;;;3052       // Now select the card, to TRAN state
;;;3053       error = MmcSelectCard(pSd, pSd->cardAddress, 0);
;;;3054       if (error) {
;;;3055           TRACE_ERROR("SdMmcInit.Sel %d\n\r", error);
;;;3056           return SD_ERROR_DRIVER;
;;;3057       }
;;;3058       // SDIO only card, enumeration done
;;;3059       if (!mem && io) {
;;;3060           // Default tranSpeed: 25MHz
;;;3061           pSd->transSpeed = 25000000;
;;;3062           return 0;
;;;3063       }
;;;3064   
;;;3065       // For MEM cards or combo
;;;3066       // If the card support EXT_CSD, read it!
;;;3067       DEBUG_MSG("Card Type %d, CSD_STRUCTURE %d\n\r",
;;;3068                  pSd->cardType, SD_CSD_STRUCTURE(pSd));
;;;3069   
;;;3070       // Get extended information of the card
;;;3071       SdMmcUpdateInformation(pSd, 0, 0);
;;;3072   
;;;3073       // Advanced settings for HD & HS card
;;;3074       if (pSd->cardType >= CARD_MMC){
;;;3075   
;;;3076           MmcCmd6Arg cmd6Arg;
;;;3077   
;;;3078           // MMC4 or later
;;;3079           if (SD_CSD_SPEC_VERS(pSd) >= 4) {
;;;3080   
;;;3081               unsigned char busWidth, widthMode;
;;;3082   
;;;3083               // Calculate MMC busWidth (limited by slot information)
;;;3084               switch (pSd->pSdDriver->mciMode & AT91C_MCI_SCDBUS) {
;;;3085                 #if defined(AT91C_MCI_SCDBUS_8BITS)
;;;3086                   case AT91C_MCI_SCDBUS_8BITS:
;;;3087                       busWidth = 8;
;;;3088                       widthMode = MCI_SDCBUS_8BIT;
;;;3089                       break;
;;;3090                 #endif
;;;3091   
;;;3092                 #if defined(AT91C_MCI_SCDBUS_4BITS)
;;;3093                   case AT91C_MCI_SCDBUS_4BITS:
;;;3094                       busWidth = 4;
;;;3095                       widthMode = MCI_SDCBUS_4BIT;
;;;3096                       break;
;;;3097                 #endif
;;;3098   
;;;3099                   default:
;;;3100                       busWidth = 1;
;;;3101                       widthMode = MCI_SDCBUS_1BIT;
;;;3102               }
;;;3103   
;;;3104               // Switch to max bus width (4 now)
;;;3105               cmd6Arg.access = 0x1;
;;;3106               cmd6Arg.index  = SD_EXTCSD_BUS_WIDTH_INDEX;
;;;3107               cmd6Arg.value  = SD_EXTCSD_BUS_WIDTH_4BIT;
;;;3108               cmd6Arg.cmdSet = 0;
;;;3109               error = Cmd6(pSd, &cmd6Arg, 0, &status);
;;;3110               if (!error) {
;;;3111                   
;;;3112                 TRACE_WARNING_WP("-I- MMC %d-BIT BUS\n\r", busWidth);
;;;3113                 if (status
;;;3114                     & (STATUS_MMC_SWITCH
;;;3115                        & ~(STATUS_STATE | STATUS_READY_FOR_DATA))) {
;;;3116                     TRACE_ERROR("-E- Status %x\n\r", status);
;;;3117                 }
;;;3118                 else {
;;;3119                     MCI_SetBusWidth(pSd->pSdDriver, widthMode);
;;;3120                     updateInformation = 1;
;;;3121                 }
;;;3122               }
;;;3123               else {
;;;3124                   TRACE_WARNING("MMC %d-BIT not supported\n\r", busWidth)
;;;3125               }
;;;3126           }
;;;3127           
;;;3128           // CARD_TYPE 3
;;;3129           if (SD_CSD_STRUCTURE(pSd) >= 2
;;;3130               && (SD_EXTCSD_CARD_TYPE(pSd) & 0x2)) {
;;;3131   
;;;3132               #if !defined(OP_BOOTSTRAP_MCI_on)
;;;3133               // Switch to HS mode
;;;3134               if (gSdmmcAutoHsEnable) {
;;;3135                   cmd6Arg.access = 0x3;
;;;3136                   cmd6Arg.index  = SD_EXTCSD_HS_TIMING_INDEX;
;;;3137                   cmd6Arg.value  = SD_EXTCSD_HS_TIMING_ENABLE;
;;;3138                   cmd6Arg.cmdSet = 0;
;;;3139                   error = Cmd6(pSd, &cmd6Arg, 0, &status);
;;;3140                   if (error
;;;3141                       || (status
;;;3142                           & (STATUS_MMC_SWITCH
;;;3143                               & ~(STATUS_STATE | STATUS_READY_FOR_DATA)))) {
;;;3144                       TRACE_WARNING("MMC HS Fail, st %x\n\r", status);
;;;3145                   }
;;;3146                   else {
;;;3147                       MCI_EnableHsMode(pSd->pSdDriver, 1);
;;;3148                       TRACE_WARNING_WP("-I- MMC HS Enabled\n\r");
;;;3149                       isHsSupport = 1;
;;;3150                       updateInformation = 1;
;;;3151                   }
;;;3152               }
;;;3153               #endif // end of OP_BOOTSTRAP_MCI_on
;;;3154           }
;;;3155       }
;;;3156       else if (pSd->cardType >= CARD_SD) {
;;;3157         #if 1
;;;3158           // Switch to 4-bits bus width
;;;3159           // (All SD Card shall support 1-bit, 4 bitswidth)
;;;3160           error = Acmd6(pSd, 4);
;;;3161           DEBUG_MSG("SD 4-BITS BUS");
;;;3162           if (error) {
;;;3163               TRACE_ERROR("SdMmcInit.12 (%d)\n\r", error);
;;;3164               return error;
;;;3165           }
;;;3166           MCI_SetBusWidth(pSd->pSdDriver, MCI_SDCBUS_4BIT);
;;;3167   
;;;3168           #if !defined(OP_BOOTSTRAP_MCI_on)
;;;3169           // SD Spec V1.10 or higher, switch to high-speed mode
;;;3170           if (gSdmmcAutoHsEnable) {
;;;3171               if (SD_SCR_SD_SPEC(pSd) >= SD_SCR_SD_SPEC_1_10) {
;;;3172                   SdCmd6Arg cmd6Arg;
;;;3173                   unsigned int switchStatus[512/32];
;;;3174                   cmd6Arg.mode = 1;
;;;3175                   cmd6Arg.reserved = 0;
;;;3176                   cmd6Arg.reserveFG6 = 0xF;
;;;3177                   cmd6Arg.reserveFG5 = 0xF;
;;;3178                   cmd6Arg.reserveFG4 = 0xF;
;;;3179                   cmd6Arg.reserveFG3 = 0xF;
;;;3180                   cmd6Arg.command = 0;
;;;3181                   cmd6Arg.accessMode = 1;
;;;3182                   error = Cmd6(pSd,
;;;3183                                &cmd6Arg,
;;;3184                                switchStatus,
;;;3185                                &status);
;;;3186                 #if 0
;;;3187                   unsigned int i;
;;;3188                   printf("SD Switch status:");
;;;3189                   for(i = 0; i < 512 / 8; i ++) {
;;;3190                       if ((i % 8) == 0) printf("\n\r[%3d]", i);
;;;3191                       printf(" %02x", ((char*)switchStatus)[i]);
;;;3192                   }
;;;3193                   printf("\n\r");
;;;3194                   printf(" _FG1_INFO %x\n\r",
;;;3195                       SD_SW_STAT_FUN_GRP1_INFO(switchStatus));
;;;3196                   printf(" _FG1_RC   %x\n\r",
;;;3197                       SD_SW_STAT_FUN_GRP1_RC(switchStatus));
;;;3198                   printf(" _FG1_BUSY %x\n\r",
;;;3199                       SD_SW_STAT_FUN_GRP1_BUSY(switchStatus));
;;;3200                   printf(" _FG1_DS_V %x\n\r",
;;;3201                       SD_SW_STAT_DATA_STRUCT_VER(switchStatus));
;;;3202                 #endif
;;;3203                   if (error || (status & STATUS_SWITCH_ERROR)) {
;;;3204                       TRACE_WARNING("SD HS Fail\n\r");
;;;3205                   }
;;;3206                   else if (SD_SW_STAT_FUN_GRP1_RC(switchStatus)
;;;3207                                   == SD_SW_STAT_FUN_GRP_RC_ERROR) {
;;;3208                       TRACE_ERROR_WP("-I- SD HS Not Supported\n\r");
;;;3209                   }
;;;3210                   else if (SD_SW_STAT_FUN_GRP1_BUSY(switchStatus)) {
;;;3211                       DEBUG_MSG("SD HS Busy");
;;;3212                   }
;;;3213                   else {
;;;3214                       MCI_EnableHsMode(pSd->pSdDriver, 1);
;;;3215                       DEBUG_MSG("SD HS Enable");
;;;3216                       isHsSupport = 1;
;;;3217                   }
;;;3218               }
;;;3219           }
;;;3220           #endif
;;;3221           // Update
;;;3222           updateInformation = 1;
;;;3223         #endif
;;;3224       }
;;;3225   
;;;3226       if (updateInformation) {
;;;3227   
;;;3228           SdMmcUpdateInformation(pSd, isHsSupport, 1);
;;;3229       }
;;;3230       return 0;
;;;3231   }
0014d8  b015              ADD      sp,sp,#0x54
0014da  bdf0              POP      {r4-r7,pc}
                  |L1.5340|
0014dc  0020              MOVS     r0,r4                 ;3034
0014de  f7fffffe          BL       Cmd3
0014e2  9012              STR      r0,[sp,#0x48]         ;3034
0014e4  9812              LDR      r0,[sp,#0x48]         ;3035
0014e6  2800              CMP      r0,#0                 ;3035
0014e8  d014              BEQ      |L1.5396|
0014ea  201b              MOVS     r0,#0x1b              ;3036
0014ec  f7fffffe          BL       ShellPutByte
0014f0  48ad              LDR      r0,|L1.6056|
0014f2  f7fffffe          BL       ShellPrintf
0014f6  201b              MOVS     r0,#0x1b              ;3036
0014f8  f7fffffe          BL       ShellPutByte
0014fc  a0ab              ADR      r0,|L1.6060|
0014fe  f7fffffe          BL       ShellPrintf
001502  9912              LDR      r1,[sp,#0x48]         ;3036
001504  a0bf              ADR      r0,|L1.6148|
001506  f7fffffe          BL       ShellPrintf
00150a  a0a5              ADR      r0,|L1.6048|
00150c  f7fffffe          BL       ShellPrintf
001510  2001              MOVS     r0,#1                 ;3037
001512  e7e1              B        |L1.5336|
                  |L1.5396|
001514  2d00              CMP      r5,#0                 ;3043
001516  d01b              BEQ      |L1.5456|
001518  0020              MOVS     r0,r4                 ;3044
00151a  f7fffffe          BL       Cmd9
00151e  9012              STR      r0,[sp,#0x48]         ;3044
001520  9812              LDR      r0,[sp,#0x48]         ;3045
001522  2800              CMP      r0,#0                 ;3045
001524  d014              BEQ      |L1.5456|
001526  201b              MOVS     r0,#0x1b              ;3046
001528  f7fffffe          BL       ShellPutByte
00152c  489e              LDR      r0,|L1.6056|
00152e  f7fffffe          BL       ShellPrintf
001532  201b              MOVS     r0,#0x1b              ;3046
001534  f7fffffe          BL       ShellPutByte
001538  a09c              ADR      r0,|L1.6060|
00153a  f7fffffe          BL       ShellPrintf
00153e  9912              LDR      r1,[sp,#0x48]         ;3046
001540  a0b5              ADR      r0,|L1.6168|
001542  f7fffffe          BL       ShellPrintf
001546  a096              ADR      r0,|L1.6048|
001548  f7fffffe          BL       ShellPrintf
00154c  2001              MOVS     r0,#1                 ;3047
00154e  e7c3              B        |L1.5336|
                  |L1.5456|
001550  8bb9              LDRH     r1,[r7,#0x1c]         ;3053
001552  2200              MOVS     r2,#0                 ;3053
001554  0020              MOVS     r0,r4                 ;3053
001556  f7fffffe          BL       MmcSelectCard
00155a  9012              STR      r0,[sp,#0x48]         ;3053
00155c  9812              LDR      r0,[sp,#0x48]         ;3054
00155e  2800              CMP      r0,#0                 ;3054
001560  d014              BEQ      |L1.5516|
001562  201b              MOVS     r0,#0x1b              ;3055
001564  f7fffffe          BL       ShellPutByte
001568  488f              LDR      r0,|L1.6056|
00156a  f7fffffe          BL       ShellPrintf
00156e  201b              MOVS     r0,#0x1b              ;3055
001570  f7fffffe          BL       ShellPutByte
001574  a08d              ADR      r0,|L1.6060|
001576  f7fffffe          BL       ShellPrintf
00157a  9912              LDR      r1,[sp,#0x48]         ;3055
00157c  a0ab              ADR      r0,|L1.6188|
00157e  f7fffffe          BL       ShellPrintf
001582  a087              ADR      r0,|L1.6048|
001584  f7fffffe          BL       ShellPrintf
001588  2001              MOVS     r0,#1                 ;3056
00158a  e7a5              B        |L1.5336|
                  |L1.5516|
00158c  2d00              CMP      r5,#0                 ;3059
00158e  d106              BNE      |L1.5534|
001590  9814              LDR      r0,[sp,#0x50]         ;3059
001592  2800              CMP      r0,#0                 ;3059
001594  d003              BEQ      |L1.5534|
001596  48aa              LDR      r0,|L1.6208|
001598  61b8              STR      r0,[r7,#0x18]         ;3061
00159a  2000              MOVS     r0,#0                 ;3062
00159c  e79c              B        |L1.5336|
                  |L1.5534|
00159e  2200              MOVS     r2,#0                 ;3071
0015a0  0011              MOVS     r1,r2                 ;3071
0015a2  0020              MOVS     r0,r4                 ;3071
0015a4  f7fffffe          BL       SdMmcUpdateInformation
0015a8  7fb8              LDRB     r0,[r7,#0x1e]         ;3074
0015aa  2804              CMP      r0,#4                 ;3074
0015ac  d37e              BCC      |L1.5804|
0015ae  6ba0              LDR      r0,[r4,#0x38]         ;3079
0015b0  0080              LSLS     r0,r0,#2              ;3079
0015b2  0f00              LSRS     r0,r0,#28             ;3079
0015b4  2804              CMP      r0,#4                 ;3079
0015b6  d32b              BCC      |L1.5648|
0015b8  6820              LDR      r0,[r4,#0]            ;3084
0015ba  7a40              LDRB     r0,[r0,#9]            ;3084
0015bc  0980              LSRS     r0,r0,#6              ;3084
0015be  0180              LSLS     r0,r0,#6              ;3084
0015c0  2880              CMP      r0,#0x80              ;3084
0015c2  d05c              BEQ      |L1.5758|
0015c4  28c0              CMP      r0,#0xc0              ;3084
0015c6  d057              BEQ      |L1.5752|
0015c8  2501              MOVS     r5,#1                 ;3100
0015ca  2700              MOVS     r7,#0                 ;3101
                  |L1.5580|
0015cc  2001              MOVS     r0,#1                 ;3105
0015ce  a910              ADD      r1,sp,#0x40           ;3105
0015d0  7008              STRB     r0,[r1,#0]            ;3105
0015d2  22b7              MOVS     r2,#0xb7              ;3106
0015d4  704a              STRB     r2,[r1,#1]            ;3106
0015d6  7088              STRB     r0,[r1,#2]            ;3107
0015d8  2000              MOVS     r0,#0                 ;3108
0015da  70c8              STRB     r0,[r1,#3]            ;3108
0015dc  2200              MOVS     r2,#0                 ;3109
0015de  0020              MOVS     r0,r4                 ;3109
0015e0  ab13              ADD      r3,sp,#0x4c           ;3109
0015e2  f7fffffe          BL       Cmd6
0015e6  2800              CMP      r0,#0                 ;3110
0015e8  d04c              BEQ      |L1.5764|
0015ea  201b              MOVS     r0,#0x1b              ;3124
0015ec  f7fffffe          BL       ShellPutByte
0015f0  4894              LDR      r0,|L1.6212|
0015f2  f7fffffe          BL       ShellPrintf
0015f6  201b              MOVS     r0,#0x1b              ;3124
0015f8  f7fffffe          BL       ShellPutByte
0015fc  a06b              ADR      r0,|L1.6060|
0015fe  f7fffffe          BL       ShellPrintf
001602  0029              MOVS     r1,r5                 ;3124
001604  a090              ADR      r0,|L1.6216|
001606  f7fffffe          BL       ShellPrintf
00160a  a065              ADR      r0,|L1.6048|
00160c  f7fffffe          BL       ShellPrintf
                  |L1.5648|
001610  6ba0              LDR      r0,[r4,#0x38]         ;3129
001612  0f80              LSRS     r0,r0,#30             ;3129
001614  2802              CMP      r0,#2                 ;3129
001616  d32e              BCC      |L1.5750|
001618  20ff              MOVS     r0,#0xff              ;3130
00161a  300d              ADDS     r0,r0,#0xd            ;3130
00161c  5d00              LDRB     r0,[r0,r4]            ;3130
00161e  0780              LSLS     r0,r0,#30             ;3130
001620  d529              BPL      |L1.5750|
001622  4890              LDR      r0,|L1.6244|
001624  7800              LDRB     r0,[r0,#0]            ;3134  ; gSdmmcAutoHsEnable
001626  2800              CMP      r0,#0                 ;3134
001628  d025              BEQ      |L1.5750|
00162a  2003              MOVS     r0,#3                 ;3135
00162c  a910              ADD      r1,sp,#0x40           ;3135
00162e  7008              STRB     r0,[r1,#0]            ;3135
001630  20b9              MOVS     r0,#0xb9              ;3136
001632  7048              STRB     r0,[r1,#1]            ;3136
001634  2001              MOVS     r0,#1                 ;3137
001636  7088              STRB     r0,[r1,#2]            ;3137
001638  2000              MOVS     r0,#0                 ;3138
00163a  70c8              STRB     r0,[r1,#3]            ;3138
00163c  2200              MOVS     r2,#0                 ;3139
00163e  0020              MOVS     r0,r4                 ;3139
001640  ab13              ADD      r3,sp,#0x4c           ;3139
001642  f7fffffe          BL       Cmd6
001646  4a88              LDR      r2,|L1.6248|
001648  9913              LDR      r1,[sp,#0x4c]         ;3140
00164a  4011              ANDS     r1,r1,r2              ;3140
00164c  4301              ORRS     r1,r1,r0              ;3140
00164e  d049              BEQ      |L1.5860|
001650  201b              MOVS     r0,#0x1b              ;3144
001652  f7fffffe          BL       ShellPutByte
001656  487b              LDR      r0,|L1.6212|
001658  f7fffffe          BL       ShellPrintf
00165c  201b              MOVS     r0,#0x1b              ;3144
00165e  f7fffffe          BL       ShellPutByte
001662  a052              ADR      r0,|L1.6060|
001664  f7fffffe          BL       ShellPrintf
001668  9913              LDR      r1,[sp,#0x4c]         ;3144
00166a  a080              ADR      r0,|L1.6252|
00166c  f7fffffe          BL       ShellPrintf
001670  a04b              ADR      r0,|L1.6048|
001672  f7fffffe          BL       ShellPrintf
                  |L1.5750|
001676  e17a              B        |L1.6510|
                  |L1.5752|
001678  2508              MOVS     r5,#8                 ;3087
00167a  27c0              MOVS     r7,#0xc0              ;3088
00167c  e7a6              B        |L1.5580|
                  |L1.5758|
00167e  2504              MOVS     r5,#4                 ;3094
001680  2780              MOVS     r7,#0x80              ;3095
001682  e7a3              B        |L1.5580|
                  |L1.5764|
001684  201b              MOVS     r0,#0x1b              ;3112
001686  f7fffffe          BL       ShellPutByte
00168a  486e              LDR      r0,|L1.6212|
00168c  f7fffffe          BL       ShellPrintf
001690  201b              MOVS     r0,#0x1b              ;3112
001692  f7fffffe          BL       ShellPutByte
001696  a045              ADR      r0,|L1.6060|
001698  f7fffffe          BL       ShellPrintf
00169c  0029              MOVS     r1,r5                 ;3112
00169e  a079              ADR      r0,|L1.6276|
0016a0  f7fffffe          BL       ShellPrintf
0016a4  4970              LDR      r1,|L1.6248|
0016a6  9813              LDR      r0,[sp,#0x4c]         ;3113
0016a8  4208              TST      r0,r1                 ;3113
0016aa  e000              B        |L1.5806|
                  |L1.5804|
0016ac  e031              B        |L1.5906|
                  |L1.5806|
0016ae  d013              BEQ      |L1.5848|
0016b0  201b              MOVS     r0,#0x1b              ;3116
0016b2  f7fffffe          BL       ShellPutByte
0016b6  483c              LDR      r0,|L1.6056|
0016b8  f7fffffe          BL       ShellPrintf
0016bc  201b              MOVS     r0,#0x1b              ;3116
0016be  f7fffffe          BL       ShellPutByte
0016c2  a03a              ADR      r0,|L1.6060|
0016c4  f7fffffe          BL       ShellPrintf
0016c8  9913              LDR      r1,[sp,#0x4c]         ;3116
0016ca  a074              ADR      r0,|L1.6300|
0016cc  f7fffffe          BL       ShellPrintf
0016d0  a033              ADR      r0,|L1.6048|
0016d2  f7fffffe          BL       ShellPrintf
0016d6  e79b              B        |L1.5648|
                  |L1.5848|
0016d8  6820              LDR      r0,[r4,#0]            ;3119
0016da  0039              MOVS     r1,r7                 ;3119
0016dc  f7fffffe          BL       MCI_SetBusWidth
0016e0  2601              MOVS     r6,#1                 ;3120
0016e2  e795              B        |L1.5648|
                  |L1.5860|
0016e4  6820              LDR      r0,[r4,#0]            ;3147
0016e6  2101              MOVS     r1,#1                 ;3147
0016e8  f7fffffe          BL       MCI_EnableHsMode
0016ec  201b              MOVS     r0,#0x1b              ;3148
0016ee  f7fffffe          BL       ShellPutByte
0016f2  4854              LDR      r0,|L1.6212|
0016f4  f7fffffe          BL       ShellPrintf
0016f8  201b              MOVS     r0,#0x1b              ;3148
0016fa  f7fffffe          BL       ShellPutByte
0016fe  a02b              ADR      r0,|L1.6060|
001700  f7fffffe          BL       ShellPrintf
001704  a069              ADR      r0,|L1.6316|
001706  f7fffffe          BL       ShellPrintf
00170a  2001              MOVS     r0,#1                 ;3149
00170c  9011              STR      r0,[sp,#0x44]         ;3149
00170e  2601              MOVS     r6,#1                 ;3150
001710  e12d              B        |L1.6510|
                  |L1.5906|
001712  2802              CMP      r0,#2                 ;3156
001714  d3af              BCC      |L1.5750|
001716  2104              MOVS     r1,#4                 ;3160
001718  0020              MOVS     r0,r4                 ;3160
00171a  f7fffffe          BL       Acmd6
00171e  0005              MOVS     r5,r0                 ;3160
001720  2d00              CMP      r5,#0                 ;3162
001722  d015              BEQ      |L1.5968|
001724  201b              MOVS     r0,#0x1b              ;3163
001726  f7fffffe          BL       ShellPutByte
00172a  481f              LDR      r0,|L1.6056|
00172c  f7fffffe          BL       ShellPrintf
001730  201b              MOVS     r0,#0x1b              ;3163
001732  f7fffffe          BL       ShellPutByte
001736  a01d              ADR      r0,|L1.6060|
001738  f7fffffe          BL       ShellPrintf
00173c  0029              MOVS     r1,r5                 ;3163
00173e  a061              ADR      r0,|L1.6340|
001740  f7fffffe          BL       ShellPrintf
001744  a016              ADR      r0,|L1.6048|
001746  f7fffffe          BL       ShellPrintf
00174a  0628              LSLS     r0,r5,#24             ;3164
00174c  0e00              LSRS     r0,r0,#24             ;3164
00174e  e6c3              B        |L1.5336|
                  |L1.5968|
001750  6820              LDR      r0,[r4,#0]            ;3166
001752  2180              MOVS     r1,#0x80              ;3166
001754  f7fffffe          BL       MCI_SetBusWidth
001758  4842              LDR      r0,|L1.6244|
00175a  7800              LDRB     r0,[r0,#0]            ;3170  ; gSdmmcAutoHsEnable
00175c  2800              CMP      r0,#0                 ;3170
00175e  d011              BEQ      |L1.6020|
001760  2048              MOVS     r0,#0x48              ;3171
001762  5d00              LDRB     r0,[r0,r4]            ;3171
001764  0700              LSLS     r0,r0,#28             ;3171
001766  d00d              BEQ      |L1.6020|
001768  9810              LDR      r0,[sp,#0x40]         ;3174
00176a  2101              MOVS     r1,#1                 ;3174
00176c  07c9              LSLS     r1,r1,#31             ;3174
00176e  4308              ORRS     r0,r0,r1              ;3174
001770  217f              MOVS     r1,#0x7f              ;3175
001772  0609              LSLS     r1,r1,#24             ;3175
001774  4388              BICS     r0,r0,r1              ;3175
001776  210f              MOVS     r1,#0xf               ;3176
001778  0509              LSLS     r1,r1,#20             ;3176
00177a  4308              ORRS     r0,r0,r1              ;3176
00177c  1109              ASRS     r1,r1,#4              ;3177
00177e  4308              ORRS     r0,r0,r1              ;3177
001780  1109              ASRS     r1,r1,#4              ;3178
001782  e0a9              B        |L1.6360|
                  |L1.6020|
001784  e0eb              B        |L1.6494|
001786  0000              DCW      0x0000
                  |L1.6024|
001788  53644d6d          DCB      "SdMmcIdentify.Cmd8: %d",0
00178c  63496465
001790  6e746966
001794  792e436d
001798  64383a20
00179c  256400  
00179f  00                DCB      0
                  |L1.6048|
0017a0  0a0d00            DCB      "\n\r",0
0017a3  00                DCB      0
                  |L1.6052|
                          DCD      0x00002710
                  |L1.6056|
                          DCD      ||.text||+0x420
                  |L1.6060|
0017ac  5b6d00            DCB      "[m",0
0017af  00                DCB      0
                  |L1.6064|
0017b0  53644d6d          DCB      "SdMmcIdentify.Mmc.SwReset: %d\n\r",0
0017b4  63496465
0017b8  6e746966
0017bc  792e4d6d
0017c0  632e5377
0017c4  52657365
0017c8  743a2025
0017cc  640a0d00
                  |L1.6096|
0017d0  53644d6d          DCB      "SdMmcIdentify.Cmd1: %d\n\r",0
0017d4  63496465
0017d8  6e746966
0017dc  792e436d
0017e0  64313a20
0017e4  25640a0d
0017e8  00      
0017e9  00                DCB      0
0017ea  00                DCB      0
0017eb  00                DCB      0
                  |L1.6124|
0017ec  53644d6d          DCB      "SdMmcEnum.Cmd2: %d\n\r",0
0017f0  63456e75
0017f4  6d2e436d
0017f8  64323a20
0017fc  25640a0d
001800  00      
001801  00                DCB      0
001802  00                DCB      0
001803  00                DCB      0
                  |L1.6148|
001804  53644d6d          DCB      "SdMmcInit.Cmd3 %d\n\r",0
001808  63496e69
00180c  742e436d
001810  64332025
001814  640a0d00
                  |L1.6168|
001818  53644d6d          DCB      "SdMmcInit.Cmd9 %d\n\r",0
00181c  63496e69
001820  742e436d
001824  64392025
001828  640a0d00
                  |L1.6188|
00182c  53644d6d          DCB      "SdMmcInit.Sel %d\n\r",0
001830  63496e69
001834  742e5365
001838  6c202564
00183c  0a0d00  
00183f  00                DCB      0
                  |L1.6208|
                          DCD      0x017d7840
                  |L1.6212|
                          DCD      ||.text||+0xe1c
                  |L1.6216|
001848  4d4d4320          DCB      "MMC %d-BIT not supported\n\r",0
00184c  25642d42
001850  4954206e
001854  6f742073
001858  7570706f
00185c  72746564
001860  0a0d00  
001863  00                DCB      0
                  |L1.6244|
                          DCD      ||.data||
                  |L1.6248|
                          DCD      0x02d82080
                  |L1.6252|
00186c  4d4d4320          DCB      "MMC HS Fail, st %x\n\r",0
001870  48532046
001874  61696c2c
001878  20737420
00187c  25780a0d
001880  00      
001881  00                DCB      0
001882  00                DCB      0
001883  00                DCB      0
                  |L1.6276|
001884  2d492d20          DCB      "-I- MMC %d-BIT BUS\n\r",0
001888  4d4d4320
00188c  25642d42
001890  49542042
001894  55530a0d
001898  00      
001899  00                DCB      0
00189a  00                DCB      0
00189b  00                DCB      0
                  |L1.6300|
00189c  2d452d20          DCB      "-E- Status %x\n\r",0
0018a0  53746174
0018a4  75732025
0018a8  780a0d00
                  |L1.6316|
0018ac  2d492d20          DCB      "-I- MMC HS Enabled\n\r",0
0018b0  4d4d4320
0018b4  48532045
0018b8  6e61626c
0018bc  65640a0d
0018c0  00      
0018c1  00                DCB      0
0018c2  00                DCB      0
0018c3  00                DCB      0
                  |L1.6340|
0018c4  53644d6d          DCB      "SdMmcInit.12 (%d)\n\r",0
0018c8  63496e69
0018cc  742e3132
0018d0  20282564
0018d4  290a0d00
                  |L1.6360|
0018d8  4308              ORRS     r0,r0,r1              ;3178
0018da  1109              ASRS     r1,r1,#4              ;3179
0018dc  4308              ORRS     r0,r0,r1              ;3179
0018de  21f0              MOVS     r1,#0xf0              ;3180
0018e0  4388              BICS     r0,r0,r1              ;3180
0018e2  0900              LSRS     r0,r0,#4              ;3181
0018e4  0100              LSLS     r0,r0,#4              ;3181
0018e6  1c40              ADDS     r0,r0,#1              ;3181
0018e8  9010              STR      r0,[sp,#0x40]         ;3181
0018ea  0020              MOVS     r0,r4                 ;3182
0018ec  ab13              ADD      r3,sp,#0x4c           ;3182
0018ee  466a              MOV      r2,sp                 ;3182
0018f0  a910              ADD      r1,sp,#0x40           ;3182
0018f2  f7fffffe          BL       Cmd6
0018f6  9913              LDR      r1,[sp,#0x4c]         ;3203
0018f8  2280              MOVS     r2,#0x80              ;3203
0018fa  4011              ANDS     r1,r1,r2              ;3203
0018fc  4301              ORRS     r1,r1,r0              ;3203
0018fe  d012              BEQ      |L1.6438|
001900  201b              MOVS     r0,#0x1b              ;3204
001902  f7fffffe          BL       ShellPutByte
001906  48f8              LDR      r0,|L1.7400|
001908  f7fffffe          BL       ShellPrintf
00190c  201b              MOVS     r0,#0x1b              ;3204
00190e  f7fffffe          BL       ShellPutByte
001912  a0f6              ADR      r0,|L1.7404|
001914  f7fffffe          BL       ShellPrintf
001918  a0f5              ADR      r0,|L1.7408|
00191a  f7fffffe          BL       ShellPrintf
00191e  a0f8              ADR      r0,|L1.7424|
001920  f7fffffe          BL       ShellPrintf
001924  e022              B        |L1.6508|
                  |L1.6438|
001926  4668              MOV      r0,sp                 ;3206
001928  7c00              LDRB     r0,[r0,#0x10]         ;3206
00192a  43c0              MVNS     r0,r0                 ;3206
00192c  0700              LSLS     r0,r0,#28             ;3206
00192e  d006              BEQ      |L1.6462|
001930  4669              MOV      r1,sp                 ;3210
001932  7f48              LDRB     r0,[r1,#0x1d]         ;3210
001934  7f09              LDRB     r1,[r1,#0x1c]         ;3210
001936  0209              LSLS     r1,r1,#8              ;3210
001938  1840              ADDS     r0,r0,r1              ;3210
00193a  d117              BNE      |L1.6508|
00193c  e010              B        |L1.6496|
                  |L1.6462|
00193e  201b              MOVS     r0,#0x1b              ;3208
001940  f7fffffe          BL       ShellPutByte
001944  48ef              LDR      r0,|L1.7428|
001946  f7fffffe          BL       ShellPrintf
00194a  201b              MOVS     r0,#0x1b              ;3208
00194c  f7fffffe          BL       ShellPutByte
001950  a0e6              ADR      r0,|L1.7404|
001952  f7fffffe          BL       ShellPrintf
001956  48e4              LDR      r0,|L1.7400|
001958  3068              ADDS     r0,r0,#0x68           ;3208
00195a  f7fffffe          BL       ShellPrintf
                  |L1.6494|
00195e  e005              B        |L1.6508|
                  |L1.6496|
001960  6820              LDR      r0,[r4,#0]            ;3214
001962  2101              MOVS     r1,#1                 ;3214
001964  f7fffffe          BL       MCI_EnableHsMode
001968  2001              MOVS     r0,#1                 ;3216
00196a  9011              STR      r0,[sp,#0x44]         ;3216
                  |L1.6508|
00196c  2601              MOVS     r6,#1                 ;3222
                  |L1.6510|
00196e  2e00              CMP      r6,#0                 ;3226
001970  d004              BEQ      |L1.6524|
001972  9911              LDR      r1,[sp,#0x44]         ;3228
001974  2201              MOVS     r2,#1                 ;3228
001976  0020              MOVS     r0,r4                 ;3228
001978  f7fffffe          BL       SdMmcUpdateInformation
                  |L1.6524|
00197c  2000              MOVS     r0,#0                 ;3230
00197e  e5ab              B        |L1.5336|
;;;3232   
                          ENDP

                  SD_Init PROC
;;;3240   //------------------------------------------------------------------------------
;;;3241   unsigned char SD_Init(SdCard *pSd, SdDriver *pSdDriver)
001980  b5f8              PUSH     {r3-r7,lr}
;;;3242   {
001982  0005              MOVS     r5,r0
;;;3243       unsigned char error;
;;;3244   
;;;3245       //TRACE_DEBUG("SD_Init()\n\r");
;;;3246   
;;;3247       // Initialize SdCard structure
;;;3248       pSd->pSdDriver = pSdDriver;
001984  6029              STR      r1,[r5,#0]
;;;3249       pSd->cardAddress = 0;
001986  2009              MOVS     r0,#9
001988  2100              MOVS     r1,#0
00198a  0180              LSLS     r0,r0,#6
00198c  182c              ADDS     r4,r5,r0
00198e  83a1              STRH     r1,[r4,#0x1c]
;;;3250       pSd->preBlock = 0xffffffff;
001990  4edd              LDR      r6,|L1.7432|
001992  60a6              STR      r6,[r4,#8]
;;;3251       pSd->state = SD_STATE_INIT;
001994  2013              MOVS     r0,#0x13
001996  2201              MOVS     r2,#1
001998  0140              LSLS     r0,r0,#5
00199a  1828              ADDS     r0,r5,r0
00199c  9000              STR      r0,[sp,#0]
00199e  7002              STRB     r2,[r0,#0]
;;;3252       pSd->cardType = CARD_UNKNOWN;
0019a0  77a1              STRB     r1,[r4,#0x1e]
;;;3253       pSd->optCmdBitMap = 0xFFFFFFFF;
0019a2  6166              STR      r6,[r4,#0x14]
;;;3254       pSd->mode = 0;
0019a4  77e1              STRB     r1,[r4,#0x1f]
;;;3255       ResetCommand(&pSd->command);
0019a6  1d28              ADDS     r0,r5,#4
0019a8  f7fffffe          BL       ResetCommand
;;;3256   
;;;3257       // Initialization delay: The maximum of 1 msec, 74 clock cycles and supply
;;;3258       // ramp up time. Supply ramp up time provides the time that the power is
;;;3259       // built up to the operating level (the bus master supply voltage) and the
;;;3260       // time to wait until the SD card can accept the first command.
;;;3261   
;;;3262       // Power On Init Special Command
;;;3263   
;;;3264       error = Pon(pSd);
0019ac  0028              MOVS     r0,r5
0019ae  f7fffffe          BL       Pon
0019b2  0007              MOVS     r7,r0
;;;3265       if (error) {
0019b4  2f00              CMP      r7,#0
0019b6  d014              BEQ      |L1.6626|
;;;3266           TRACE_ERROR("SD_Init.1 (%d)\n\r", error);
0019b8  201b              MOVS     r0,#0x1b
0019ba  f7fffffe          BL       ShellPutByte
0019be  48d1              LDR      r0,|L1.7428|
0019c0  f7fffffe          BL       ShellPrintf
0019c4  201b              MOVS     r0,#0x1b
0019c6  f7fffffe          BL       ShellPutByte
0019ca  a0c8              ADR      r0,|L1.7404|
0019cc  f7fffffe          BL       ShellPrintf
0019d0  0039              MOVS     r1,r7
0019d2  a0ce              ADR      r0,|L1.7436|
0019d4  f7fffffe          BL       ShellPrintf
0019d8  a0c9              ADR      r0,|L1.7424|
0019da  f7fffffe          BL       ShellPrintf
;;;3267           return error;
0019de  0038              MOVS     r0,r7
;;;3268       }
;;;3269       // After power-on or CMD0, all cards?CMD lines are in input mode, waiting
;;;3270       // for start bit of the next command.
;;;3271       // The cards are initialized with a default relative card address
;;;3272       // (RCA=0x0000) and with a default driver stage register setting
;;;3273       // (lowest speed, highest driving current capability).
;;;3274       error = SdMmcIdentify(pSd);
;;;3275       if (error) {
;;;3276           TRACE_ERROR("SD_Init.Identify\n\r");
;;;3277           return error;
;;;3278       }
;;;3279       error = SdMmcEnum(pSd);
;;;3280       if (error) {
;;;3281           TRACE_ERROR("SD_Init.Enum\n\r");
;;;3282           return error;
;;;3283       }
;;;3284   
;;;3285       // In the case of a Standard Capacity SD Memory Card, this command sets the
;;;3286       // block length (in bytes) for all following block commands
;;;3287       // (read, write, lock).
;;;3288       // Default block length is fixed to 512 Bytes.
;;;3289       // Set length is valid for memory access commands only if partial block read
;;;3290       // operation are allowed in CSD.
;;;3291       // In the case of a High Capacity SD Memory Card, block length set by CMD16
;;;3292       // command does not affect the memory read and write commands. Always 512
;;;3293       // Bytes fixed block length is used. This command is effective for
;;;3294       // LOCK_UNLOCK command.
;;;3295       // In both cases, if block length is set larger than 512Bytes, the card sets
;;;3296       // the BLOCK_LEN_ERROR bit.
;;;3297       if (pSd->cardType == CARD_SD) {
;;;3298           error = Cmd16(pSd, SD_BLOCK_SIZE);
;;;3299           if (error) {
;;;3300               pSd->optCmdBitMap &= ~SD_CMD16_SUPPORT;
;;;3301               TRACE_INFO("SD_Init.Cmd16 (%d)\n\r", error);
;;;3302               TRACE_INFO("Fail to set BLK_LEN, default is 512\n\r");
;;;3303           }
;;;3304       }
;;;3305   
;;;3306       // Reset status for R/W
;;;3307       pSd->state = SD_STATE_READY;
;;;3308   
;;;3309       // If SDIO Card
;;;3310       if (pSd->cardType == CARD_SDIO) {
;;;3311           pSd->blockNr = 0;
;;;3312           pSd->totalSize = 0;
;;;3313       }
;;;3314       // If MMC Card & get size from EXT_CSD
;;;3315       else if (pSd->cardType >= CARD_MMC && SD_CSD_C_SIZE(pSd) == 0xFFF) {
;;;3316           pSd->blockNr = SD_EXTCSD_BLOCKNR(pSd);
;;;3317           // Block number less than 0x100000000/512
;;;3318           if (pSd->blockNr > 0x800000)
;;;3319               pSd->totalSize = 0xFFFFFFFF;
;;;3320           else
;;;3321               pSd->totalSize = SD_EXTCSD_TOTAL_SIZE(pSd);
;;;3322       }
;;;3323       // If SD CSD v2.0
;;;3324       else if(pSd->cardType >= CARD_SD
;;;3325               && pSd->cardType < CARD_MMC
;;;3326               && SD_CSD_STRUCTURE(pSd) >= 1) {
;;;3327           pSd->blockNr   = SD_CSD_BLOCKNR_HC(pSd);
;;;3328           pSd->totalSize = 0xFFFFFFFF;
;;;3329       }
;;;3330       // Normal card
;;;3331       else {
;;;3332           pSd->totalSize = SD_CSD_TOTAL_SIZE(pSd);
;;;3333           pSd->blockNr = SD_CSD_BLOCKNR(pSd);
;;;3334       }
;;;3335   
;;;3336       if (pSd->cardType == CARD_UNKNOWN) {
;;;3337           return SD_ERROR_NOT_INITIALIZED;
;;;3338       }
;;;3339       else {
;;;3340           return 0;
;;;3341       }
;;;3342   }
0019e0  bdf8              POP      {r3-r7,pc}
                  |L1.6626|
0019e2  0028              MOVS     r0,r5                 ;3274
0019e4  f7fffffe          BL       SdMmcIdentify
0019e8  0007              MOVS     r7,r0                 ;3274
0019ea  2f00              CMP      r7,#0                 ;3275
0019ec  d013              BEQ      |L1.6678|
0019ee  201b              MOVS     r0,#0x1b              ;3276
0019f0  f7fffffe          BL       ShellPutByte
0019f4  48c3              LDR      r0,|L1.7428|
0019f6  f7fffffe          BL       ShellPrintf
0019fa  201b              MOVS     r0,#0x1b              ;3276
0019fc  f7fffffe          BL       ShellPutByte
001a00  a0ba              ADR      r0,|L1.7404|
001a02  f7fffffe          BL       ShellPrintf
001a06  a0c6              ADR      r0,|L1.7456|
001a08  f7fffffe          BL       ShellPrintf
001a0c  a0bc              ADR      r0,|L1.7424|
001a0e  f7fffffe          BL       ShellPrintf
001a12  0038              MOVS     r0,r7                 ;3277
001a14  bdf8              POP      {r3-r7,pc}
                  |L1.6678|
001a16  0028              MOVS     r0,r5                 ;3279
001a18  f7fffffe          BL       SdMmcEnum
001a1c  0007              MOVS     r7,r0                 ;3279
001a1e  2f00              CMP      r7,#0                 ;3280
001a20  d013              BEQ      |L1.6730|
001a22  201b              MOVS     r0,#0x1b              ;3281
001a24  f7fffffe          BL       ShellPutByte
001a28  48b6              LDR      r0,|L1.7428|
001a2a  f7fffffe          BL       ShellPrintf
001a2e  201b              MOVS     r0,#0x1b              ;3281
001a30  f7fffffe          BL       ShellPutByte
001a34  a0ad              ADR      r0,|L1.7404|
001a36  f7fffffe          BL       ShellPrintf
001a3a  a0be              ADR      r0,|L1.7476|
001a3c  f7fffffe          BL       ShellPrintf
001a40  a0af              ADR      r0,|L1.7424|
001a42  f7fffffe          BL       ShellPrintf
001a46  0038              MOVS     r0,r7                 ;3282
001a48  bdf8              POP      {r3-r7,pc}
                  |L1.6730|
001a4a  7fa0              LDRB     r0,[r4,#0x1e]         ;3297
001a4c  2802              CMP      r0,#2                 ;3297
001a4e  d130              BNE      |L1.6834|
001a50  0201              LSLS     r1,r0,#8              ;3298
001a52  0028              MOVS     r0,r5                 ;3298
001a54  f7fffffe          BL       Cmd16
001a58  0007              MOVS     r7,r0                 ;3298
001a5a  2f00              CMP      r7,#0                 ;3299
001a5c  d029              BEQ      |L1.6834|
001a5e  6960              LDR      r0,[r4,#0x14]         ;3300
001a60  21ff              MOVS     r1,#0xff              ;3300
001a62  3101              ADDS     r1,#1                 ;3300
001a64  4388              BICS     r0,r0,r1              ;3300
001a66  6160              STR      r0,[r4,#0x14]         ;3300
001a68  201b              MOVS     r0,#0x1b              ;3301
001a6a  f7fffffe          BL       ShellPutByte
001a6e  a0b5              ADR      r0,|L1.7492|
001a70  f7fffffe          BL       ShellPrintf
001a74  201b              MOVS     r0,#0x1b              ;3301
001a76  f7fffffe          BL       ShellPutByte
001a7a  a09c              ADR      r0,|L1.7404|
001a7c  f7fffffe          BL       ShellPrintf
001a80  0039              MOVS     r1,r7                 ;3301
001a82  a0b3              ADR      r0,|L1.7504|
001a84  f7fffffe          BL       ShellPrintf
001a88  a09d              ADR      r0,|L1.7424|
001a8a  f7fffffe          BL       ShellPrintf
001a8e  201b              MOVS     r0,#0x1b              ;3302
001a90  f7fffffe          BL       ShellPutByte
001a94  a0ab              ADR      r0,|L1.7492|
001a96  f7fffffe          BL       ShellPrintf
001a9a  201b              MOVS     r0,#0x1b              ;3302
001a9c  f7fffffe          BL       ShellPutByte
001aa0  a092              ADR      r0,|L1.7404|
001aa2  f7fffffe          BL       ShellPrintf
001aa6  a0b0              ADR      r0,|L1.7528|
001aa8  f7fffffe          BL       ShellPrintf
001aac  a094              ADR      r0,|L1.7424|
001aae  f7fffffe          BL       ShellPrintf
                  |L1.6834|
001ab2  9800              LDR      r0,[sp,#0]            ;3307
001ab4  2102              MOVS     r1,#2                 ;3307
001ab6  7001              STRB     r1,[r0,#0]            ;3307
001ab8  7fa0              LDRB     r0,[r4,#0x1e]         ;3310
001aba  2808              CMP      r0,#8                 ;3310
001abc  d021              BEQ      |L1.6914|
001abe  2804              CMP      r0,#4                 ;3315
001ac0  d326              BCC      |L1.6928|
001ac2  6be9              LDR      r1,[r5,#0x3c]         ;3315
001ac4  058a              LSLS     r2,r1,#22             ;3315
001ac6  0f92              LSRS     r2,r2,#30             ;3315
001ac8  0609              LSLS     r1,r1,#24             ;3315
001aca  0292              LSLS     r2,r2,#10             ;3315
001acc  0d89              LSRS     r1,r1,#22             ;3315
001ace  1851              ADDS     r1,r2,r1              ;3315
001ad0  6c2a              LDR      r2,[r5,#0x40]         ;3315
001ad2  0f92              LSRS     r2,r2,#30             ;3315
001ad4  1889              ADDS     r1,r1,r2              ;3315
001ad6  4aae              LDR      r2,|L1.7568|
001ad8  4291              CMP      r1,r2                 ;3315
001ada  d119              BNE      |L1.6928|
001adc  35ff              ADDS     r5,r5,#0xff           ;3316
001ade  3501              ADDS     r5,#1                 ;3316
001ae0  7f6a              LDRB     r2,[r5,#0x1d]         ;3316
001ae2  7f29              LDRB     r1,[r5,#0x1c]         ;3316
001ae4  7feb              LDRB     r3,[r5,#0x1f]         ;3316
001ae6  0212              LSLS     r2,r2,#8              ;3316
001ae8  1889              ADDS     r1,r1,r2              ;3316
001aea  7faa              LDRB     r2,[r5,#0x1e]         ;3316
001aec  061b              LSLS     r3,r3,#24             ;3316
001aee  0412              LSLS     r2,r2,#16             ;3316
001af0  18d2              ADDS     r2,r2,r3              ;3316
001af2  1889              ADDS     r1,r1,r2              ;3316
001af4  6121              STR      r1,[r4,#0x10]         ;3316
001af6  2201              MOVS     r2,#1                 ;3318
001af8  05d2              LSLS     r2,r2,#23             ;3318
001afa  4291              CMP      r1,r2                 ;3318
001afc  d905              BLS      |L1.6922|
001afe  60e6              STR      r6,[r4,#0xc]          ;3319
001b00  e02f              B        |L1.7010|
                  |L1.6914|
001b02  2100              MOVS     r1,#0                 ;3311
001b04  6121              STR      r1,[r4,#0x10]         ;3311
001b06  60e1              STR      r1,[r4,#0xc]          ;3312
001b08  e02b              B        |L1.7010|
                  |L1.6922|
001b0a  0249              LSLS     r1,r1,#9              ;3321
001b0c  60e1              STR      r1,[r4,#0xc]          ;3321
001b0e  e028              B        |L1.7010|
                  |L1.6928|
001b10  1e81              SUBS     r1,r0,#2              ;3324
001b12  2902              CMP      r1,#2                 ;3324
001b14  d210              BCS      |L1.6968|
001b16  6ba9              LDR      r1,[r5,#0x38]         ;3326
001b18  0f89              LSRS     r1,r1,#30             ;3326
001b1a  d00d              BEQ      |L1.6968|
001b1c  6be9              LDR      r1,[r5,#0x3c]         ;3327
001b1e  040a              LSLS     r2,r1,#16             ;3327
001b20  6c29              LDR      r1,[r5,#0x40]         ;3327
001b22  0e0b              LSRS     r3,r1,#24             ;3327
001b24  021b              LSLS     r3,r3,#8              ;3327
001b26  0209              LSLS     r1,r1,#8              ;3327
001b28  18d2              ADDS     r2,r2,r3              ;3327
001b2a  0e09              LSRS     r1,r1,#24             ;3327
001b2c  1851              ADDS     r1,r2,r1              ;3327
001b2e  1c49              ADDS     r1,r1,#1              ;3327
001b30  0289              LSLS     r1,r1,#10             ;3327
001b32  6121              STR      r1,[r4,#0x10]         ;3327
001b34  60e6              STR      r6,[r4,#0xc]          ;3328
001b36  e014              B        |L1.7010|
                  |L1.6968|
001b38  6be9              LDR      r1,[r5,#0x3c]         ;3332
001b3a  058a              LSLS     r2,r1,#22             ;3332
001b3c  0f92              LSRS     r2,r2,#30             ;3332
001b3e  060b              LSLS     r3,r1,#24             ;3332
001b40  0292              LSLS     r2,r2,#10             ;3332
001b42  0d9b              LSRS     r3,r3,#22             ;3332
001b44  18d2              ADDS     r2,r2,r3              ;3332
001b46  6c2b              LDR      r3,[r5,#0x40]         ;3332
001b48  0f9d              LSRS     r5,r3,#30             ;3332
001b4a  1952              ADDS     r2,r2,r5              ;3332
001b4c  039b              LSLS     r3,r3,#14             ;3332
001b4e  1c52              ADDS     r2,r2,#1              ;3332
001b50  0f5b              LSRS     r3,r3,#29             ;3332
001b52  1c9b              ADDS     r3,r3,#2              ;3332
001b54  409a              LSLS     r2,r2,r3              ;3332
001b56  0309              LSLS     r1,r1,#12             ;3332
001b58  0f0b              LSRS     r3,r1,#28             ;3332
001b5a  0011              MOVS     r1,r2                 ;3332
001b5c  4099              LSLS     r1,r1,r3              ;3332
001b5e  60e1              STR      r1,[r4,#0xc]          ;3332
001b60  6122              STR      r2,[r4,#0x10]         ;3333
                  |L1.7010|
001b62  2800              CMP      r0,#0                 ;3336
001b64  d001              BEQ      |L1.7018|
001b66  2000              MOVS     r0,#0                 ;3340
001b68  bdf8              POP      {r3-r7,pc}
                  |L1.7018|
001b6a  2003              MOVS     r0,#3                 ;3337
001b6c  bdf8              POP      {r3-r7,pc}
;;;3343   
                          ENDP

                  SD_Stop PROC
;;;3349   //------------------------------------------------------------------------------
;;;3350   unsigned char SD_Stop(SdCard *pSd, SdDriver *pSdDriver)
001b6e  b510              PUSH     {r4,lr}
;;;3351   {
001b70  000c              MOVS     r4,r1
;;;3352       unsigned char error;
;;;3353       SdCmd *pCommand = &(pSd->command);
001b72  1d01              ADDS     r1,r0,#4
;;;3354   
;;;3355       if (pSd == 0 || pSdDriver == 0)
001b74  2800              CMP      r0,#0
001b76  d005              BEQ      |L1.7044|
001b78  2c00              CMP      r4,#0
001b7a  d003              BEQ      |L1.7044|
;;;3356           return 0;
;;;3357   
;;;3358       if(pCommand->tranType == MCI_CONTINUE_TRANSFER)
001b7c  7f89              LDRB     r1,[r1,#0x1e]
001b7e  2901              CMP      r1,#1
001b80  d002              BEQ      |L1.7048|
001b82  e00f              B        |L1.7076|
                  |L1.7044|
001b84  2000              MOVS     r0,#0                 ;3356
                  |L1.7046|
;;;3359       {
;;;3360           TRACE_DEBUG("SD_StopTransmission()\n\r");
;;;3361   
;;;3362           error = Cmd12(pSd, (pSd->state != SD_STATE_WRITE), 0);
;;;3363           if(error) {
;;;3364               return error;
;;;3365           }
;;;3366       }
;;;3367   
;;;3368       MCI_Close((Mci *)pSdDriver);
;;;3369       return 0;
;;;3370   }
001b86  bd10              POP      {r4,pc}
                  |L1.7048|
001b88  2113              MOVS     r1,#0x13              ;3362
001b8a  0149              LSLS     r1,r1,#5              ;3362
001b8c  1841              ADDS     r1,r0,r1              ;3362
001b8e  7809              LDRB     r1,[r1,#0]            ;3362
001b90  2920              CMP      r1,#0x20              ;3362
001b92  d001              BEQ      |L1.7064|
001b94  2101              MOVS     r1,#1                 ;3362
001b96  e000              B        |L1.7066|
                  |L1.7064|
001b98  2100              MOVS     r1,#0                 ;3362
                  |L1.7066|
001b9a  2200              MOVS     r2,#0                 ;3362
001b9c  f7fffffe          BL       Cmd12
001ba0  2800              CMP      r0,#0                 ;3363
001ba2  d1f0              BNE      |L1.7046|
                  |L1.7076|
001ba4  0020              MOVS     r0,r4                 ;3368
001ba6  f7fffffe          BL       MCI_Close
001baa  2000              MOVS     r0,#0                 ;3369
001bac  bd10              POP      {r4,pc}
;;;3371   
                          ENDP

                  SD_HighSpeedMode PROC
;;;3382   //------------------------------------------------------------------------------
;;;3383   unsigned char SD_HighSpeedMode(SdCard *pSd,
001bae  b5f8              PUSH     {r3-r7,lr}
;;;3384                                  unsigned char hsMode)
;;;3385   {
001bb0  0007              MOVS     r7,r0
001bb2  000d              MOVS     r5,r1
;;;3386       unsigned char error = 0;
;;;3387   
;;;3388       if (hsMode == 0xFF)
;;;3389           return pSd->mode;
001bb4  2009              MOVS     r0,#9
001bb6  0180              LSLS     r0,r0,#6
001bb8  183e              ADDS     r6,r7,r0
001bba  2dff              CMP      r5,#0xff              ;3388
001bbc  d01c              BEQ      |L1.7160|
;;;3390       if (hsMode == 0) {
001bbe  2d00              CMP      r5,#0
001bc0  d01c              BEQ      |L1.7164|
;;;3391           TRACE_WARNING("Can not switch, do re-init to disable HS mode\n\r");
;;;3392           return SD_ERROR_DRIVER;
;;;3393       }
;;;3394   
;;;3395       // Quit transfer state
;;;3396       error = MoveToTranState(pSd);
001bc2  0038              MOVS     r0,r7
001bc4  f7fffffe          BL       MoveToTranState
001bc8  0004              MOVS     r4,r0
;;;3397       if (error) {
001bca  2c00              CMP      r4,#0
001bcc  d02a              BEQ      |L1.7204|
;;;3398           TRACE_ERROR("SD_HighSpeedMode.Tran: %d\n\r", error);
001bce  201b              MOVS     r0,#0x1b
001bd0  f7fffffe          BL       ShellPutByte
001bd4  484b              LDR      r0,|L1.7428|
001bd6  f7fffffe          BL       ShellPrintf
001bda  201b              MOVS     r0,#0x1b
001bdc  f7fffffe          BL       ShellPutByte
001be0  a042              ADR      r0,|L1.7404|
001be2  f7fffffe          BL       ShellPrintf
001be6  0021              MOVS     r1,r4
001be8  a06a              ADR      r0,|L1.7572|
001bea  f7fffffe          BL       ShellPrintf
001bee  a044              ADR      r0,|L1.7424|
001bf0  f7fffffe          BL       ShellPrintf
;;;3399           return error;
001bf4  0020              MOVS     r0,r4
;;;3400       }
;;;3401   
;;;3402       if (pSd->mode != hsMode) {
;;;3403           error = SdMmcSwitchHsMode(pSd, hsMode);
;;;3404           if (error == 0)
;;;3405               error = SdMmcUpdateInformation(pSd, 1, 1);
;;;3406       }
;;;3407       // Reset state for data R/W
;;;3408       pSd->state = SD_STATE_READY;
;;;3409   
;;;3410       return error;
;;;3411   }
001bf6  bdf8              POP      {r3-r7,pc}
                  |L1.7160|
001bf8  7ff0              LDRB     r0,[r6,#0x1f]         ;3389
001bfa  bdf8              POP      {r3-r7,pc}
                  |L1.7164|
001bfc  201b              MOVS     r0,#0x1b              ;3391
001bfe  f7fffffe          BL       ShellPutByte
001c02  4839              LDR      r0,|L1.7400|
001c04  f7fffffe          BL       ShellPrintf
001c08  201b              MOVS     r0,#0x1b              ;3391
001c0a  f7fffffe          BL       ShellPutByte
001c0e  a037              ADR      r0,|L1.7404|
001c10  f7fffffe          BL       ShellPrintf
001c14  a066              ADR      r0,|L1.7600|
001c16  f7fffffe          BL       ShellPrintf
001c1a  a039              ADR      r0,|L1.7424|
001c1c  f7fffffe          BL       ShellPrintf
001c20  2001              MOVS     r0,#1                 ;3392
001c22  bdf8              POP      {r3-r7,pc}
                  |L1.7204|
001c24  7ff0              LDRB     r0,[r6,#0x1f]         ;3402
001c26  42a8              CMP      r0,r5                 ;3402
001c28  d00c              BEQ      |L1.7236|
001c2a  0029              MOVS     r1,r5                 ;3403
001c2c  0038              MOVS     r0,r7                 ;3403
001c2e  f7fffffe          BL       SdMmcSwitchHsMode
001c32  0004              MOVS     r4,r0                 ;3403
001c34  2c00              CMP      r4,#0                 ;3404
001c36  d105              BNE      |L1.7236|
001c38  2201              MOVS     r2,#1                 ;3405
001c3a  0011              MOVS     r1,r2                 ;3405
001c3c  0038              MOVS     r0,r7                 ;3405
001c3e  f7fffffe          BL       SdMmcUpdateInformation
001c42  0004              MOVS     r4,r0                 ;3405
                  |L1.7236|
001c44  2113              MOVS     r1,#0x13              ;3408
001c46  2002              MOVS     r0,#2                 ;3408
001c48  0149              LSLS     r1,r1,#5              ;3408
001c4a  1879              ADDS     r1,r7,r1              ;3408
001c4c  7008              STRB     r0,[r1,#0]            ;3408
001c4e  0020              MOVS     r0,r4                 ;3410
001c50  bdf8              POP      {r3-r7,pc}
;;;3412   
                          ENDP

                  SD_BusWidth PROC
;;;3413   unsigned char SD_BusWidth(SdCard *pSd,
001c52  2000              MOVS     r0,#0
;;;3414                             unsigned char busWidth)
;;;3415   {
;;;3416       return 0;
;;;3417   }
001c54  4770              BX       lr
;;;3418   
                          ENDP

                  MMC_GetTotalSizeKB PROC
;;;3631   //------------------------------------------------------------------------------
;;;3632   unsigned int MMC_GetTotalSizeKB(SdCard *pSd)
001c56  2109              MOVS     r1,#9
;;;3633   {
;;;3634       SANITY_CHECK(pSd);
;;;3635   
;;;3636       if (pSd->totalSize == 0xFFFFFFFF) {
001c58  0189              LSLS     r1,r1,#6
001c5a  1841              ADDS     r1,r0,r1
001c5c  68c8              LDR      r0,[r1,#0xc]
001c5e  1c42              ADDS     r2,r0,#1
001c60  d001              BEQ      |L1.7270|
;;;3637   
;;;3638           return pSd->blockNr / 2;
;;;3639       }
;;;3640       
;;;3641       return pSd->totalSize / 1024;
001c62  0a80              LSRS     r0,r0,#10
;;;3642   }
001c64  4770              BX       lr
                  |L1.7270|
001c66  6908              LDR      r0,[r1,#0x10]         ;3638
001c68  0840              LSRS     r0,r0,#1              ;3638
001c6a  4770              BX       lr
;;;3643   
                          ENDP

                  MMC_GetBootSizeKB PROC
;;;3647   //------------------------------------------------------------------------------
;;;3648   unsigned int MMC_GetBootSizeKB(SdCard *pSd)
001c6c  2109              MOVS     r1,#9
;;;3649   {
;;;3650       SANITY_CHECK(pSd);
;;;3651       if (   pSd->cardType >= CARD_MMC
001c6e  0189              LSLS     r1,r1,#6
001c70  1841              ADDS     r1,r0,r1
001c72  7f89              LDRB     r1,[r1,#0x1e]
001c74  2904              CMP      r1,#4
001c76  d308              BCC      |L1.7306|
;;;3652           && SD_CSD_STRUCTURE(pSd) >= 2) {
001c78  6b81              LDR      r1,[r0,#0x38]
001c7a  0f89              LSRS     r1,r1,#30
001c7c  2902              CMP      r1,#2
001c7e  d304              BCC      |L1.7306|
;;;3653   
;;;3654           return SD_EXTCSD_BOOT_SIZE_MULTI(pSd) * 128;
001c80  30ff              ADDS     r0,r0,#0xff
001c82  3021              ADDS     r0,r0,#0x21
001c84  7a80              LDRB     r0,[r0,#0xa]
001c86  01c0              LSLS     r0,r0,#7
;;;3655       }
;;;3656       return 0;
;;;3657   }
001c88  4770              BX       lr
                  |L1.7306|
001c8a  2000              MOVS     r0,#0                 ;3656
001c8c  4770              BX       lr
;;;3658   
                          ENDP

                  SD_DisplayRegisterCID PROC
;;;3755   //------------------------------------------------------------------------------
;;;3756   void SD_DisplayRegisterCID(SdCard *pSd)
001c8e  b51c              PUSH     {r2-r4,lr}
;;;3757   {
001c90  0004              MOVS     r4,r0
;;;3758       // CID for memory card only
;;;3759       if (pSd->cardType == CARD_UNKNOWN || pSd->cardType >= CARD_SDIO)
001c92  2009              MOVS     r0,#9
001c94  0180              LSLS     r0,r0,#6
001c96  1820              ADDS     r0,r4,r0
001c98  7f80              LDRB     r0,[r0,#0x1e]
001c9a  2800              CMP      r0,#0
001c9c  d022              BEQ      |L1.7396|
001c9e  2808              CMP      r0,#8
001ca0  d220              BCS      |L1.7396|
;;;3760           return;
;;;3761   
;;;3762       TRACE_INFO("======= CID =======\n\r");
001ca2  201b              MOVS     r0,#0x1b
001ca4  f7fffffe          BL       ShellPutByte
001ca8  a026              ADR      r0,|L1.7492|
001caa  f7fffffe          BL       ShellPrintf
001cae  201b              MOVS     r0,#0x1b
001cb0  f7fffffe          BL       ShellPutByte
001cb4  a00d              ADR      r0,|L1.7404|
001cb6  f7fffffe          BL       ShellPrintf
001cba  a049              ADR      r0,|L1.7648|
001cbc  f7fffffe          BL       ShellPrintf
001cc0  a00f              ADR      r0,|L1.7424|
001cc2  f7fffffe          BL       ShellPrintf
;;;3763     #if 0
;;;3764       TRACE_INFO(" .Card/BGA         %X\n\r", SD_CID_BGA(pSd));
;;;3765     #else
;;;3766       TRACE_INFO("CID MID Manufacturer ID       %02X\n\r",
001cc6  201b              MOVS     r0,#0x1b
001cc8  f7fffffe          BL       ShellPutByte
001ccc  a01d              ADR      r0,|L1.7492|
001cce  f7fffffe          BL       ShellPrintf
001cd2  201b              MOVS     r0,#0x1b
001cd4  f7fffffe          BL       ShellPutByte
001cd8  a004              ADR      r0,|L1.7404|
001cda  f7fffffe          BL       ShellPrintf
001cde  6aa0              LDR      r0,[r4,#0x28]
001ce0  0e01              LSRS     r1,r0,#24
001ce2  e089              B        |L1.7672|
                  |L1.7396|
001ce4  e10a              B        |L1.7932|
001ce6  0000              DCW      0x0000
                  |L1.7400|
                          DCD      ||.text||+0xe1c
                  |L1.7404|
001cec  5b6d00            DCB      "[m",0
001cef  00                DCB      0
                  |L1.7408|
001cf0  53442048          DCB      "SD HS Fail\n\r",0
001cf4  53204661
001cf8  696c0a0d
001cfc  00      
001cfd  00                DCB      0
001cfe  00                DCB      0
001cff  00                DCB      0
                  |L1.7424|
001d00  0a0d00            DCB      "\n\r",0
001d03  00                DCB      0
                  |L1.7428|
                          DCD      ||.text||+0x420
                  |L1.7432|
                          DCD      0xffffffff
                  |L1.7436|
001d0c  53445f49          DCB      "SD_Init.1 (%d)\n\r",0
001d10  6e69742e
001d14  31202825
001d18  64290a0d
001d1c  00      
001d1d  00                DCB      0
001d1e  00                DCB      0
001d1f  00                DCB      0
                  |L1.7456|
001d20  53445f49          DCB      "SD_Init.Identify\n\r",0
001d24  6e69742e
001d28  4964656e
001d2c  74696679
001d30  0a0d00  
001d33  00                DCB      0
                  |L1.7476|
001d34  53445f49          DCB      "SD_Init.Enum\n\r",0
001d38  6e69742e
001d3c  456e756d
001d40  0a0d00  
001d43  00                DCB      0
                  |L1.7492|
001d44  5b313b31          DCB      "[1;1;34mI: ",0
001d48  3b33346d
001d4c  493a2000
                  |L1.7504|
001d50  53445f49          DCB      "SD_Init.Cmd16 (%d)\n\r",0
001d54  6e69742e
001d58  436d6431
001d5c  36202825
001d60  64290a0d
001d64  00      
001d65  00                DCB      0
001d66  00                DCB      0
001d67  00                DCB      0
                  |L1.7528|
001d68  4661696c          DCB      "Fail to set BLK_LEN, default is 512\n\r",0
001d6c  20746f20
001d70  73657420
001d74  424c4b5f
001d78  4c454e2c
001d7c  20646566
001d80  61756c74
001d84  20697320
001d88  3531320a
001d8c  0d00    
001d8e  00                DCB      0
001d8f  00                DCB      0
                  |L1.7568|
                          DCD      0x00000fff
                  |L1.7572|
001d94  53445f48          DCB      "SD_HighSpeedMode.Tran: %d\n\r",0
001d98  69676853
001d9c  70656564
001da0  4d6f6465
001da4  2e547261
001da8  6e3a2025
001dac  640a0d00
                  |L1.7600|
001db0  43616e20          DCB      "Can not switch, do re-init to disable HS mode\n\r",0
001db4  6e6f7420
001db8  73776974
001dbc  63682c20
001dc0  646f2072
001dc4  652d696e
001dc8  69742074
001dcc  6f206469
001dd0  7361626c
001dd4  65204853
001dd8  206d6f64
001ddc  650a0d00
                  |L1.7648|
001de0  3d3d3d3d          DCB      "======= CID =======\n\r",0
001de4  3d3d3d20
001de8  43494420
001dec  3d3d3d3d
001df0  3d3d3d0a
001df4  0d00    
001df6  00                DCB      0
001df7  00                DCB      0
                  |L1.7672|
001df8  a0f5              ADR      r0,|L1.8656|
001dfa  f7fffffe          BL       ShellPrintf
001dfe  a0fe              ADR      r0,|L1.8696|
001e00  f7fffffe          BL       ShellPrintf
;;;3767           SD_CID_MID(pSd));
;;;3768       
;;;3769       TRACE_INFO("CID OID OEM/Application ID    %c%c\n\r",
001e04  201b              MOVS     r0,#0x1b
001e06  f7fffffe          BL       ShellPutByte
001e0a  48fc              LDR      r0,|L1.8700|
001e0c  f7fffffe          BL       ShellPrintf
001e10  201b              MOVS     r0,#0x1b
001e12  f7fffffe          BL       ShellPutByte
001e16  a0fa              ADR      r0,|L1.8704|
001e18  f7fffffe          BL       ShellPrintf
001e1c  6aa0              LDR      r0,[r4,#0x28]
001e1e  0401              LSLS     r1,r0,#16
001e20  0e0a              LSRS     r2,r1,#24
001e22  0200              LSLS     r0,r0,#8
001e24  0e01              LSRS     r1,r0,#24
001e26  a0f7              ADR      r0,|L1.8708|
001e28  f7fffffe          BL       ShellPrintf
001e2c  a0f2              ADR      r0,|L1.8696|
001e2e  f7fffffe          BL       ShellPrintf
;;;3770           (char)SD_CID_OID_BYTE_1(pSd),
;;;3771           (char)SD_CID_OID_BYTE_0(pSd));
;;;3772       
;;;3773       TRACE_INFO("CID PNM Product revision      %c%c%c%c%c\n\r",
001e32  201b              MOVS     r0,#0x1b
001e34  f7fffffe          BL       ShellPutByte
001e38  48f0              LDR      r0,|L1.8700|
001e3a  f7fffffe          BL       ShellPrintf
001e3e  201b              MOVS     r0,#0x1b
001e40  f7fffffe          BL       ShellPutByte
001e44  a0ee              ADR      r0,|L1.8704|
001e46  f7fffffe          BL       ShellPrintf
001e4a  6ae0              LDR      r0,[r4,#0x2c]
001e4c  0601              LSLS     r1,r0,#24
001e4e  0402              LSLS     r2,r0,#16
001e50  0e09              LSRS     r1,r1,#24
001e52  0e12              LSRS     r2,r2,#24
001e54  9200              STR      r2,[sp,#0]
001e56  9101              STR      r1,[sp,#4]
001e58  0201              LSLS     r1,r0,#8
001e5a  0e02              LSRS     r2,r0,#24
001e5c  6aa0              LDR      r0,[r4,#0x28]
001e5e  0e0b              LSRS     r3,r1,#24
001e60  0601              LSLS     r1,r0,#24
001e62  0e09              LSRS     r1,r1,#24
001e64  a0f1              ADR      r0,|L1.8748|
001e66  f7fffffe          BL       ShellPrintf
001e6a  a0e3              ADR      r0,|L1.8696|
001e6c  f7fffffe          BL       ShellPrintf
;;;3774           (char)SD_CID_PNM_BYTE_4(pSd),
;;;3775           (char)SD_CID_PNM_BYTE_3(pSd),
;;;3776           (char)SD_CID_PNM_BYTE_2(pSd),
;;;3777           (char)SD_CID_PNM_BYTE_1(pSd),
;;;3778           (char)SD_CID_PNM_BYTE_0(pSd));
;;;3779       
;;;3780       TRACE_INFO("CID PRV Product serial number %02X%04X\n\r", 
001e70  201b              MOVS     r0,#0x1b
001e72  f7fffffe          BL       ShellPutByte
001e76  48e1              LDR      r0,|L1.8700|
001e78  f7fffffe          BL       ShellPrintf
001e7c  201b              MOVS     r0,#0x1b
001e7e  f7fffffe          BL       ShellPutByte
001e82  a0df              ADR      r0,|L1.8704|
001e84  f7fffffe          BL       ShellPrintf
001e88  6b60              LDR      r0,[r4,#0x34]
001e8a  0e02              LSRS     r2,r0,#24
001e8c  6b20              LDR      r0,[r4,#0x30]
001e8e  0201              LSLS     r1,r0,#8
001e90  0a09              LSRS     r1,r1,#8
001e92  a0f1              ADR      r0,|L1.8792|
001e94  f7fffffe          BL       ShellPrintf
001e98  a0d7              ADR      r0,|L1.8696|
001e9a  f7fffffe          BL       ShellPrintf
;;;3781            SD_CID_PRV_2(pSd),
;;;3782            SD_CID_PRV_1(pSd));
;;;3783   
;;;3784       TRACE_INFO("CID MDT Manufacturing date    %04d/%02d\n\r",
001e9e  201b              MOVS     r0,#0x1b
001ea0  f7fffffe          BL       ShellPutByte
001ea4  48d5              LDR      r0,|L1.8700|
001ea6  f7fffffe          BL       ShellPrintf
001eaa  201b              MOVS     r0,#0x1b
001eac  f7fffffe          BL       ShellPutByte
001eb0  a0d3              ADR      r0,|L1.8704|
001eb2  f7fffffe          BL       ShellPrintf
001eb6  6b60              LDR      r0,[r4,#0x34]
001eb8  0501              LSLS     r1,r0,#20
001eba  0f0a              LSRS     r2,r1,#28
001ebc  0300              LSLS     r0,r0,#12
001ebe  217d              MOVS     r1,#0x7d
001ec0  0e00              LSRS     r0,r0,#24
001ec2  0109              LSLS     r1,r1,#4
001ec4  1841              ADDS     r1,r0,r1
001ec6  a0ef              ADR      r0,|L1.8836|
001ec8  f7fffffe          BL       ShellPrintf
001ecc  a0ca              ADR      r0,|L1.8696|
001ece  f7fffffe          BL       ShellPrintf
;;;3785           (unsigned short)SD_CID_MDT_YEAR(pSd),
;;;3786           (unsigned char)SD_CID_MDT_MONTH(pSd));               
;;;3787       
;;;3788       TRACE_INFO("CID CRC checksum              %02X\n\r",   
001ed2  201b              MOVS     r0,#0x1b
001ed4  f7fffffe          BL       ShellPutByte
001ed8  48c8              LDR      r0,|L1.8700|
001eda  f7fffffe          BL       ShellPrintf
001ede  201b              MOVS     r0,#0x1b
001ee0  f7fffffe          BL       ShellPutByte
001ee4  a0c6              ADR      r0,|L1.8704|
001ee6  f7fffffe          BL       ShellPrintf
001eea  6b60              LDR      r0,[r4,#0x34]
001eec  0600              LSLS     r0,r0,#24
001eee  0e41              LSRS     r1,r0,#25
001ef0  a0ef              ADR      r0,|L1.8880|
001ef2  f7fffffe          BL       ShellPrintf
001ef6  a0c0              ADR      r0,|L1.8696|
001ef8  f7fffffe          BL       ShellPrintf
                  |L1.7932|
;;;3789            SD_CID_CRC(pSd));
;;;3790     #endif
;;;3791   }
001efc  bd1c              POP      {r2-r4,pc}
;;;3792   
                          ENDP

                  SD_DisplayRegisterCSD PROC
;;;3796   //------------------------------------------------------------------------------
;;;3797   void SD_DisplayRegisterCSD(SdCard *pSd)
001efe  b570              PUSH     {r4-r6,lr}
;;;3798   { 
001f00  0004              MOVS     r4,r0
;;;3799       // CID for memory card only
;;;3800       if (pSd->cardType == CARD_UNKNOWN || pSd->cardType >= CARD_SDIO)
001f02  2009              MOVS     r0,#9
001f04  0180              LSLS     r0,r0,#6
001f06  1825              ADDS     r5,r4,r0
001f08  7fa8              LDRB     r0,[r5,#0x1e]
001f0a  2800              CMP      r0,#0
001f0c  d07d              BEQ      |L1.8202|
001f0e  2808              CMP      r0,#8
001f10  d27b              BCS      |L1.8202|
;;;3801           return;
;;;3802   
;;;3803       TRACE_INFO("======== CSD ========");
001f12  201b              MOVS     r0,#0x1b
001f14  f7fffffe          BL       ShellPutByte
001f18  48b8              LDR      r0,|L1.8700|
001f1a  f7fffffe          BL       ShellPrintf
001f1e  201b              MOVS     r0,#0x1b
001f20  f7fffffe          BL       ShellPutByte
001f24  a0b6              ADR      r0,|L1.8704|
001f26  f7fffffe          BL       ShellPrintf
001f2a  a0eb              ADR      r0,|L1.8920|
001f2c  f7fffffe          BL       ShellPrintf
001f30  a0b1              ADR      r0,|L1.8696|
001f32  f7fffffe          BL       ShellPrintf
;;;3804     #if 0
;;;3805     {
;;;3806       unsigned int i;
;;;3807       unsigned char *p = (unsigned char *)pSd->csd;
;;;3808       for(i = 0; i < 128 / 8; i++) {
;;;3809           if ((i % 16) == 0) TRACE_INFO_WP("\n\r [%3d]:", i);
;;;3810           TRACE_INFO_WP(" %2x", p[i]);
;;;3811       }
;;;3812       TRACE_INFO_WP("\n\r");
;;;3813       TRACE_INFO("------------------------\n\r");
;;;3814     }
;;;3815     #else
;;;3816       TRACE_INFO_WP("\n\r");
001f36  201b              MOVS     r0,#0x1b
001f38  f7fffffe          BL       ShellPutByte
001f3c  48af              LDR      r0,|L1.8700|
001f3e  f7fffffe          BL       ShellPrintf
001f42  201b              MOVS     r0,#0x1b
001f44  f7fffffe          BL       ShellPutByte
001f48  a0ad              ADR      r0,|L1.8704|
001f4a  f7fffffe          BL       ShellPrintf
001f4e  a0aa              ADR      r0,|L1.8696|
001f50  f7fffffe          BL       ShellPrintf
;;;3817     #endif
;;;3818       TRACE_INFO(" .CSD_STRUCTURE      0x%x\r\n", SD_CSD_STRUCTURE(pSd));
001f54  201b              MOVS     r0,#0x1b
001f56  f7fffffe          BL       ShellPutByte
001f5a  48a8              LDR      r0,|L1.8700|
001f5c  f7fffffe          BL       ShellPrintf
001f60  201b              MOVS     r0,#0x1b
001f62  f7fffffe          BL       ShellPutByte
001f66  a0a6              ADR      r0,|L1.8704|
001f68  f7fffffe          BL       ShellPrintf
001f6c  6ba0              LDR      r0,[r4,#0x38]
001f6e  0f81              LSRS     r1,r0,#30
001f70  a0df              ADR      r0,|L1.8944|
001f72  f7fffffe          BL       ShellPrintf
001f76  a0a0              ADR      r0,|L1.8696|
001f78  f7fffffe          BL       ShellPrintf
;;;3819       TRACE_INFO(" .SPEC_VERS          0x%x\r\n", SD_CSD_SPEC_VERS(pSd));
001f7c  201b              MOVS     r0,#0x1b
001f7e  f7fffffe          BL       ShellPutByte
001f82  489e              LDR      r0,|L1.8700|
001f84  f7fffffe          BL       ShellPrintf
001f88  201b              MOVS     r0,#0x1b
001f8a  f7fffffe          BL       ShellPutByte
001f8e  a09c              ADR      r0,|L1.8704|
001f90  f7fffffe          BL       ShellPrintf
001f94  6ba0              LDR      r0,[r4,#0x38]
001f96  0080              LSLS     r0,r0,#2
001f98  0f01              LSRS     r1,r0,#28
001f9a  a0dc              ADR      r0,|L1.8972|
001f9c  f7fffffe          BL       ShellPrintf
001fa0  a095              ADR      r0,|L1.8696|
001fa2  f7fffffe          BL       ShellPrintf
;;;3820       TRACE_INFO(" .TAAC               0x%X\r\n", SD_CSD_TAAC(pSd)              );
001fa6  201b              MOVS     r0,#0x1b
001fa8  f7fffffe          BL       ShellPutByte
001fac  4893              LDR      r0,|L1.8700|
001fae  f7fffffe          BL       ShellPrintf
001fb2  201b              MOVS     r0,#0x1b
001fb4  f7fffffe          BL       ShellPutByte
001fb8  a091              ADR      r0,|L1.8704|
001fba  f7fffffe          BL       ShellPrintf
001fbe  6ba0              LDR      r0,[r4,#0x38]
001fc0  0200              LSLS     r0,r0,#8
001fc2  0e01              LSRS     r1,r0,#24
001fc4  a0d8              ADR      r0,|L1.9000|
001fc6  f7fffffe          BL       ShellPrintf
001fca  a08b              ADR      r0,|L1.8696|
001fcc  f7fffffe          BL       ShellPrintf
;;;3821       TRACE_INFO(" .NSAC               0x%X\r\n", SD_CSD_NSAC(pSd)              );
001fd0  201b              MOVS     r0,#0x1b
001fd2  f7fffffe          BL       ShellPutByte
001fd6  4889              LDR      r0,|L1.8700|
001fd8  f7fffffe          BL       ShellPrintf
001fdc  201b              MOVS     r0,#0x1b
001fde  f7fffffe          BL       ShellPutByte
001fe2  a087              ADR      r0,|L1.8704|
001fe4  f7fffffe          BL       ShellPrintf
001fe8  6ba0              LDR      r0,[r4,#0x38]
001fea  0400              LSLS     r0,r0,#16
001fec  0e01              LSRS     r1,r0,#24
001fee  a0d5              ADR      r0,|L1.9028|
001ff0  f7fffffe          BL       ShellPrintf
001ff4  a080              ADR      r0,|L1.8696|
001ff6  f7fffffe          BL       ShellPrintf
;;;3822       TRACE_INFO(" .TRAN_SPEED         0x%X\r\n", SD_CSD_TRAN_SPEED(pSd)        );
001ffa  201b              MOVS     r0,#0x1b
001ffc  f7fffffe          BL       ShellPutByte
002000  487e              LDR      r0,|L1.8700|
002002  f7fffffe          BL       ShellPrintf
002006  201b              MOVS     r0,#0x1b
002008  e000              B        |L1.8204|
                  |L1.8202|
00200a  e3fd              B        |L1.10248|
                  |L1.8204|
00200c  f7fffffe          BL       ShellPutByte
002010  a07b              ADR      r0,|L1.8704|
002012  f7fffffe          BL       ShellPrintf
002016  6ba0              LDR      r0,[r4,#0x38]
002018  0601              LSLS     r1,r0,#24
00201a  0e09              LSRS     r1,r1,#24
00201c  a0d0              ADR      r0,|L1.9056|
00201e  f7fffffe          BL       ShellPrintf
002022  a075              ADR      r0,|L1.8696|
002024  f7fffffe          BL       ShellPrintf
;;;3823       TRACE_INFO(" .CCC                0x%X\r\n", SD_CSD_CCC(pSd)               );
002028  201b              MOVS     r0,#0x1b
00202a  f7fffffe          BL       ShellPutByte
00202e  4873              LDR      r0,|L1.8700|
002030  f7fffffe          BL       ShellPrintf
002034  201b              MOVS     r0,#0x1b
002036  f7fffffe          BL       ShellPutByte
00203a  a071              ADR      r0,|L1.8704|
00203c  f7fffffe          BL       ShellPrintf
002040  6be0              LDR      r0,[r4,#0x3c]
002042  0d01              LSRS     r1,r0,#20
002044  a0cd              ADR      r0,|L1.9084|
002046  f7fffffe          BL       ShellPrintf
00204a  a06b              ADR      r0,|L1.8696|
00204c  f7fffffe          BL       ShellPrintf
;;;3824       TRACE_INFO(" .READ_BL_LEN        0x%X\r\n", SD_CSD_READ_BL_LEN(pSd)       );
002050  201b              MOVS     r0,#0x1b
002052  f7fffffe          BL       ShellPutByte
002056  4869              LDR      r0,|L1.8700|
002058  f7fffffe          BL       ShellPrintf
00205c  201b              MOVS     r0,#0x1b
00205e  f7fffffe          BL       ShellPutByte
002062  a067              ADR      r0,|L1.8704|
002064  f7fffffe          BL       ShellPrintf
002068  6be0              LDR      r0,[r4,#0x3c]
00206a  0300              LSLS     r0,r0,#12
00206c  0f01              LSRS     r1,r0,#28
00206e  a0ca              ADR      r0,|L1.9112|
002070  f7fffffe          BL       ShellPrintf
002074  a060              ADR      r0,|L1.8696|
002076  f7fffffe          BL       ShellPrintf
;;;3825       TRACE_INFO(" .READ_BL_PARTIAL    0x%X\r\n", SD_CSD_READ_BL_PARTIAL(pSd)   );
00207a  201b              MOVS     r0,#0x1b
00207c  f7fffffe          BL       ShellPutByte
002080  485e              LDR      r0,|L1.8700|
002082  f7fffffe          BL       ShellPrintf
002086  201b              MOVS     r0,#0x1b
002088  f7fffffe          BL       ShellPutByte
00208c  a05c              ADR      r0,|L1.8704|
00208e  f7fffffe          BL       ShellPrintf
002092  6be0              LDR      r0,[r4,#0x3c]
002094  0400              LSLS     r0,r0,#16
002096  0fc1              LSRS     r1,r0,#31
002098  a0c6              ADR      r0,|L1.9140|
00209a  f7fffffe          BL       ShellPrintf
00209e  a056              ADR      r0,|L1.8696|
0020a0  f7fffffe          BL       ShellPrintf
;;;3826       TRACE_INFO(" .WRITE_BLK_MISALIGN 0x%X\r\n", SD_CSD_WRITE_BLK_MISALIGN(pSd));
0020a4  201b              MOVS     r0,#0x1b
0020a6  f7fffffe          BL       ShellPutByte
0020aa  4854              LDR      r0,|L1.8700|
0020ac  f7fffffe          BL       ShellPrintf
0020b0  201b              MOVS     r0,#0x1b
0020b2  f7fffffe          BL       ShellPutByte
0020b6  a052              ADR      r0,|L1.8704|
0020b8  f7fffffe          BL       ShellPrintf
0020bc  6be0              LDR      r0,[r4,#0x3c]
0020be  0440              LSLS     r0,r0,#17
0020c0  0fc1              LSRS     r1,r0,#31
0020c2  a0c3              ADR      r0,|L1.9168|
0020c4  f7fffffe          BL       ShellPrintf
0020c8  a04b              ADR      r0,|L1.8696|
0020ca  f7fffffe          BL       ShellPrintf
;;;3827       TRACE_INFO(" .READ_BLK_MISALIGN  0x%X\r\n", SD_CSD_READ_BLK_MISALIGN(pSd) );
0020ce  201b              MOVS     r0,#0x1b
0020d0  f7fffffe          BL       ShellPutByte
0020d4  4849              LDR      r0,|L1.8700|
0020d6  f7fffffe          BL       ShellPrintf
0020da  201b              MOVS     r0,#0x1b
0020dc  f7fffffe          BL       ShellPutByte
0020e0  a047              ADR      r0,|L1.8704|
0020e2  f7fffffe          BL       ShellPrintf
0020e6  6be0              LDR      r0,[r4,#0x3c]
0020e8  0480              LSLS     r0,r0,#18
0020ea  0fc1              LSRS     r1,r0,#31
0020ec  a0bf              ADR      r0,|L1.9196|
0020ee  f7fffffe          BL       ShellPrintf
0020f2  a041              ADR      r0,|L1.8696|
0020f4  f7fffffe          BL       ShellPrintf
;;;3828       TRACE_INFO(" .DSR_IMP            0x%X\r\n", SD_CSD_DSR_IMP(pSd)           );
0020f8  201b              MOVS     r0,#0x1b
0020fa  f7fffffe          BL       ShellPutByte
0020fe  483f              LDR      r0,|L1.8700|
002100  f7fffffe          BL       ShellPrintf
002104  201b              MOVS     r0,#0x1b
002106  f7fffffe          BL       ShellPutByte
00210a  a03d              ADR      r0,|L1.8704|
00210c  f7fffffe          BL       ShellPrintf
002110  6be0              LDR      r0,[r4,#0x3c]
002112  04c0              LSLS     r0,r0,#19
002114  0fc1              LSRS     r1,r0,#31
002116  a0bc              ADR      r0,|L1.9224|
002118  f7fffffe          BL       ShellPrintf
00211c  a036              ADR      r0,|L1.8696|
00211e  f7fffffe          BL       ShellPrintf
;;;3829       TRACE_INFO(" .C_SIZE             0x%X\r\n", SD_CSD_C_SIZE(pSd)            );
002122  201b              MOVS     r0,#0x1b
002124  f7fffffe          BL       ShellPutByte
002128  4834              LDR      r0,|L1.8700|
00212a  f7fffffe          BL       ShellPrintf
00212e  201b              MOVS     r0,#0x1b
002130  f7fffffe          BL       ShellPutByte
002134  a032              ADR      r0,|L1.8704|
002136  f7fffffe          BL       ShellPrintf
00213a  6be0              LDR      r0,[r4,#0x3c]
00213c  0581              LSLS     r1,r0,#22
00213e  0f89              LSRS     r1,r1,#30
002140  0600              LSLS     r0,r0,#24
002142  0289              LSLS     r1,r1,#10
002144  0d80              LSRS     r0,r0,#22
002146  1808              ADDS     r0,r1,r0
002148  6c21              LDR      r1,[r4,#0x40]
00214a  0f89              LSRS     r1,r1,#30
00214c  1841              ADDS     r1,r0,r1
00214e  a0b5              ADR      r0,|L1.9252|
002150  f7fffffe          BL       ShellPrintf
002154  a028              ADR      r0,|L1.8696|
002156  f7fffffe          BL       ShellPrintf
;;;3830       TRACE_INFO(" .C_SIZE_HC          0x%X\r\n", SD_CSD_C_SIZE_HC(pSd)         );
00215a  201b              MOVS     r0,#0x1b
00215c  f7fffffe          BL       ShellPutByte
002160  4826              LDR      r0,|L1.8700|
002162  f7fffffe          BL       ShellPrintf
002166  201b              MOVS     r0,#0x1b
002168  f7fffffe          BL       ShellPutByte
00216c  a024              ADR      r0,|L1.8704|
00216e  f7fffffe          BL       ShellPrintf
002172  6be0              LDR      r0,[r4,#0x3c]
002174  0680              LSLS     r0,r0,#26
002176  0a81              LSRS     r1,r0,#10
002178  6c20              LDR      r0,[r4,#0x40]
00217a  0e02              LSRS     r2,r0,#24
00217c  0212              LSLS     r2,r2,#8
00217e  0200              LSLS     r0,r0,#8
002180  1889              ADDS     r1,r1,r2
002182  0e00              LSRS     r0,r0,#24
002184  1809              ADDS     r1,r1,r0
002186  a0ae              ADR      r0,|L1.9280|
002188  f7fffffe          BL       ShellPrintf
00218c  a01a              ADR      r0,|L1.8696|
00218e  f7fffffe          BL       ShellPrintf
;;;3831       TRACE_INFO(" .VDD_R_CURR_MIN     0x%X\r\n", SD_CSD_VDD_R_CURR_MIN(pSd)    );
002192  201b              MOVS     r0,#0x1b
002194  f7fffffe          BL       ShellPutByte
002198  4818              LDR      r0,|L1.8700|
00219a  f7fffffe          BL       ShellPrintf
00219e  201b              MOVS     r0,#0x1b
0021a0  f7fffffe          BL       ShellPutByte
0021a4  a016              ADR      r0,|L1.8704|
0021a6  f7fffffe          BL       ShellPrintf
0021aa  6c20              LDR      r0,[r4,#0x40]
0021ac  0080              LSLS     r0,r0,#2
0021ae  0f41              LSRS     r1,r0,#29
0021b0  a0aa              ADR      r0,|L1.9308|
0021b2  f7fffffe          BL       ShellPrintf
0021b6  a010              ADR      r0,|L1.8696|
0021b8  f7fffffe          BL       ShellPrintf
;;;3832       TRACE_INFO(" .VDD_R_CURR_MAX     0x%X\r\n", SD_CSD_VDD_R_CURR_MAX(pSd)    );
0021bc  201b              MOVS     r0,#0x1b
0021be  f7fffffe          BL       ShellPutByte
0021c2  480e              LDR      r0,|L1.8700|
0021c4  f7fffffe          BL       ShellPrintf
0021c8  201b              MOVS     r0,#0x1b
0021ca  f7fffffe          BL       ShellPutByte
0021ce  e153              B        |L1.9336|
                  |L1.8656|
0021d0  43494420          DCB      "CID MID Manufacturer ID       %02X\n\r",0
0021d4  4d494420
0021d8  4d616e75
0021dc  66616374
0021e0  75726572
0021e4  20494420
0021e8  20202020
0021ec  20202530
0021f0  32580a0d
0021f4  00      
0021f5  00                DCB      0
0021f6  00                DCB      0
0021f7  00                DCB      0
                  |L1.8696|
0021f8  0a0d00            DCB      "\n\r",0
0021fb  00                DCB      0
                  |L1.8700|
                          DCD      ||.text||+0x1d44
                  |L1.8704|
002200  5b6d00            DCB      "[m",0
002203  00                DCB      0
                  |L1.8708|
002204  43494420          DCB      "CID OID OEM/Application ID    %c%c\n\r",0
002208  4f494420
00220c  4f454d2f
002210  4170706c
002214  69636174
002218  696f6e20
00221c  49442020
002220  20202563
002224  25630a0d
002228  00      
002229  00                DCB      0
00222a  00                DCB      0
00222b  00                DCB      0
                  |L1.8748|
00222c  43494420          DCB      "CID PNM Product revision      %c%c%c%c%c\n\r",0
002230  504e4d20
002234  50726f64
002238  75637420
00223c  72657669
002240  73696f6e
002244  20202020
002248  20202563
00224c  25632563
002250  25632563
002254  0a0d00  
002257  00                DCB      0
                  |L1.8792|
002258  43494420          DCB      "CID PRV Product serial number %02X%04X\n\r",0
00225c  50525620
002260  50726f64
002264  75637420
002268  73657269
00226c  616c206e
002270  756d6265
002274  72202530
002278  32582530
00227c  34580a0d
002280  00      
002281  00                DCB      0
002282  00                DCB      0
002283  00                DCB      0
                  |L1.8836|
002284  43494420          DCB      "CID MDT Manufacturing date    %04d/%02d\n\r",0
002288  4d445420
00228c  4d616e75
002290  66616374
002294  7572696e
002298  67206461
00229c  74652020
0022a0  20202530
0022a4  34642f25
0022a8  3032640a
0022ac  0d00    
0022ae  00                DCB      0
0022af  00                DCB      0
                  |L1.8880|
0022b0  43494420          DCB      "CID CRC checksum              %02X\n\r",0
0022b4  43524320
0022b8  63686563
0022bc  6b73756d
0022c0  20202020
0022c4  20202020
0022c8  20202020
0022cc  20202530
0022d0  32580a0d
0022d4  00      
0022d5  00                DCB      0
0022d6  00                DCB      0
0022d7  00                DCB      0
                  |L1.8920|
0022d8  3d3d3d3d          DCB      "======== CSD ========",0
0022dc  3d3d3d3d
0022e0  20435344
0022e4  203d3d3d
0022e8  3d3d3d3d
0022ec  3d00    
0022ee  00                DCB      0
0022ef  00                DCB      0
                  |L1.8944|
0022f0  202e4353          DCB      " .CSD_STRUCTURE      0x%x\r\n",0
0022f4  445f5354
0022f8  52554354
0022fc  55524520
002300  20202020
002304  20307825
002308  780d0a00
                  |L1.8972|
00230c  202e5350          DCB      " .SPEC_VERS          0x%x\r\n",0
002310  45435f56
002314  45525320
002318  20202020
00231c  20202020
002320  20307825
002324  780d0a00
                  |L1.9000|
002328  202e5441          DCB      " .TAAC               0x%X\r\n",0
00232c  41432020
002330  20202020
002334  20202020
002338  20202020
00233c  20307825
002340  580d0a00
                  |L1.9028|
002344  202e4e53          DCB      " .NSAC               0x%X\r\n",0
002348  41432020
00234c  20202020
002350  20202020
002354  20202020
002358  20307825
00235c  580d0a00
                  |L1.9056|
002360  202e5452          DCB      " .TRAN_SPEED         0x%X\r\n",0
002364  414e5f53
002368  50454544
00236c  20202020
002370  20202020
002374  20307825
002378  580d0a00
                  |L1.9084|
00237c  202e4343          DCB      " .CCC                0x%X\r\n",0
002380  43202020
002384  20202020
002388  20202020
00238c  20202020
002390  20307825
002394  580d0a00
                  |L1.9112|
002398  202e5245          DCB      " .READ_BL_LEN        0x%X\r\n",0
00239c  41445f42
0023a0  4c5f4c45
0023a4  4e202020
0023a8  20202020
0023ac  20307825
0023b0  580d0a00
                  |L1.9140|
0023b4  202e5245          DCB      " .READ_BL_PARTIAL    0x%X\r\n",0
0023b8  41445f42
0023bc  4c5f5041
0023c0  52544941
0023c4  4c202020
0023c8  20307825
0023cc  580d0a00
                  |L1.9168|
0023d0  202e5752          DCB      " .WRITE_BLK_MISALIGN 0x%X\r\n",0
0023d4  4954455f
0023d8  424c4b5f
0023dc  4d495341
0023e0  4c49474e
0023e4  20307825
0023e8  580d0a00
                  |L1.9196|
0023ec  202e5245          DCB      " .READ_BLK_MISALIGN  0x%X\r\n",0
0023f0  41445f42
0023f4  4c4b5f4d
0023f8  4953414c
0023fc  49474e20
002400  20307825
002404  580d0a00
                  |L1.9224|
002408  202e4453          DCB      " .DSR_IMP            0x%X\r\n",0
00240c  525f494d
002410  50202020
002414  20202020
002418  20202020
00241c  20307825
002420  580d0a00
                  |L1.9252|
002424  202e435f          DCB      " .C_SIZE             0x%X\r\n",0
002428  53495a45
00242c  20202020
002430  20202020
002434  20202020
002438  20307825
00243c  580d0a00
                  |L1.9280|
002440  202e435f          DCB      " .C_SIZE_HC          0x%X\r\n",0
002444  53495a45
002448  5f484320
00244c  20202020
002450  20202020
002454  20307825
002458  580d0a00
                  |L1.9308|
00245c  202e5644          DCB      " .VDD_R_CURR_MIN     0x%X\r\n",0
002460  445f525f
002464  43555252
002468  5f4d494e
00246c  20202020
002470  20307825
002474  580d0a00
                  |L1.9336|
002478  a0fa              ADR      r0,|L1.10340|
00247a  f7fffffe          BL       ShellPrintf
00247e  6c20              LDR      r0,[r4,#0x40]
002480  0140              LSLS     r0,r0,#5
002482  0f41              LSRS     r1,r0,#29
002484  a0f8              ADR      r0,|L1.10344|
002486  f7fffffe          BL       ShellPrintf
00248a  a0fe              ADR      r0,|L1.10372|
00248c  f7fffffe          BL       ShellPrintf
;;;3833       TRACE_INFO(" .VDD_W_CURR_MIN     0x%X\r\n", SD_CSD_VDD_W_CURR_MIN(pSd)    );
002490  201b              MOVS     r0,#0x1b
002492  f7fffffe          BL       ShellPutByte
002496  48fc              LDR      r0,|L1.10376|
002498  f7fffffe          BL       ShellPrintf
00249c  201b              MOVS     r0,#0x1b
00249e  f7fffffe          BL       ShellPutByte
0024a2  a0f0              ADR      r0,|L1.10340|
0024a4  f7fffffe          BL       ShellPrintf
0024a8  6c20              LDR      r0,[r4,#0x40]
0024aa  0200              LSLS     r0,r0,#8
0024ac  0f41              LSRS     r1,r0,#29
0024ae  a0f7              ADR      r0,|L1.10380|
0024b0  f7fffffe          BL       ShellPrintf
0024b4  a0f3              ADR      r0,|L1.10372|
0024b6  f7fffffe          BL       ShellPrintf
;;;3834       TRACE_INFO(" .VDD_W_CURR_MAX     0x%X\r\n", SD_CSD_VDD_W_CURR_MAX(pSd)    );
0024ba  201b              MOVS     r0,#0x1b
0024bc  f7fffffe          BL       ShellPutByte
0024c0  48f1              LDR      r0,|L1.10376|
0024c2  f7fffffe          BL       ShellPrintf
0024c6  201b              MOVS     r0,#0x1b
0024c8  f7fffffe          BL       ShellPutByte
0024cc  a0e5              ADR      r0,|L1.10340|
0024ce  f7fffffe          BL       ShellPrintf
0024d2  6c20              LDR      r0,[r4,#0x40]
0024d4  02c0              LSLS     r0,r0,#11
0024d6  0f41              LSRS     r1,r0,#29
0024d8  a0f3              ADR      r0,|L1.10408|
0024da  f7fffffe          BL       ShellPrintf
0024de  a0e9              ADR      r0,|L1.10372|
0024e0  f7fffffe          BL       ShellPrintf
;;;3835       TRACE_INFO(" .C_SIZE_MULT        0x%X\r\n", SD_CSD_C_SIZE_MULT(pSd)       );
0024e4  201b              MOVS     r0,#0x1b
0024e6  f7fffffe          BL       ShellPutByte
0024ea  48e7              LDR      r0,|L1.10376|
0024ec  f7fffffe          BL       ShellPrintf
0024f0  201b              MOVS     r0,#0x1b
0024f2  f7fffffe          BL       ShellPutByte
0024f6  a0db              ADR      r0,|L1.10340|
0024f8  f7fffffe          BL       ShellPrintf
0024fc  6c20              LDR      r0,[r4,#0x40]
0024fe  0380              LSLS     r0,r0,#14
002500  0f41              LSRS     r1,r0,#29
002502  a0f0              ADR      r0,|L1.10436|
002504  f7fffffe          BL       ShellPrintf
002508  a0de              ADR      r0,|L1.10372|
00250a  f7fffffe          BL       ShellPrintf
;;;3836       TRACE_INFO(" .ERASE_BLK_EN       0x%X\r\n", SD_CSD_ERASE_BLK_EN(pSd)      );
00250e  201b              MOVS     r0,#0x1b
002510  f7fffffe          BL       ShellPutByte
002514  48dc              LDR      r0,|L1.10376|
002516  f7fffffe          BL       ShellPrintf
00251a  201b              MOVS     r0,#0x1b
00251c  f7fffffe          BL       ShellPutByte
002520  a0d0              ADR      r0,|L1.10340|
002522  f7fffffe          BL       ShellPrintf
002526  6c20              LDR      r0,[r4,#0x40]
002528  0440              LSLS     r0,r0,#17
00252a  0fc1              LSRS     r1,r0,#31
00252c  a0ec              ADR      r0,|L1.10464|
00252e  f7fffffe          BL       ShellPrintf
002532  a0d4              ADR      r0,|L1.10372|
002534  f7fffffe          BL       ShellPrintf
;;;3837       TRACE_INFO(" .SECTOR_SIZE        0x%X\r\n", SD_CSD_SECTOR_SIZE(pSd)       );
002538  201b              MOVS     r0,#0x1b
00253a  f7fffffe          BL       ShellPutByte
00253e  48d2              LDR      r0,|L1.10376|
002540  f7fffffe          BL       ShellPrintf
002544  201b              MOVS     r0,#0x1b
002546  f7fffffe          BL       ShellPutByte
00254a  a0c6              ADR      r0,|L1.10340|
00254c  f7fffffe          BL       ShellPrintf
002550  6c20              LDR      r0,[r4,#0x40]
002552  0481              LSLS     r1,r0,#18
002554  0e89              LSRS     r1,r1,#26
002556  0600              LSLS     r0,r0,#24
002558  0049              LSLS     r1,r1,#1
00255a  0fc0              LSRS     r0,r0,#31
00255c  1809              ADDS     r1,r1,r0
00255e  a0e7              ADR      r0,|L1.10492|
002560  f7fffffe          BL       ShellPrintf
002564  a0c7              ADR      r0,|L1.10372|
002566  f7fffffe          BL       ShellPrintf
;;;3838       TRACE_INFO(" .WP_GRP_SIZE        0x%X\r\n", SD_CSD_WP_GRP_SIZE(pSd)       );
00256a  201b              MOVS     r0,#0x1b
00256c  f7fffffe          BL       ShellPutByte
002570  48c5              LDR      r0,|L1.10376|
002572  f7fffffe          BL       ShellPrintf
002576  201b              MOVS     r0,#0x1b
002578  f7fffffe          BL       ShellPutByte
00257c  a0b9              ADR      r0,|L1.10340|
00257e  f7fffffe          BL       ShellPrintf
002582  6c20              LDR      r0,[r4,#0x40]
002584  0641              LSLS     r1,r0,#25
002586  0e49              LSRS     r1,r1,#25
002588  a0e3              ADR      r0,|L1.10520|
00258a  f7fffffe          BL       ShellPrintf
00258e  a0bd              ADR      r0,|L1.10372|
002590  f7fffffe          BL       ShellPrintf
;;;3839       TRACE_INFO(" .WP_GRP_ENABLE      0x%X\r\n", SD_CSD_WP_GRP_ENABLE(pSd)     );
002594  201b              MOVS     r0,#0x1b
002596  f7fffffe          BL       ShellPutByte
00259a  48bb              LDR      r0,|L1.10376|
00259c  f7fffffe          BL       ShellPrintf
0025a0  201b              MOVS     r0,#0x1b
0025a2  f7fffffe          BL       ShellPutByte
0025a6  a0af              ADR      r0,|L1.10340|
0025a8  f7fffffe          BL       ShellPrintf
0025ac  6c60              LDR      r0,[r4,#0x44]
0025ae  0fc1              LSRS     r1,r0,#31
0025b0  a0e0              ADR      r0,|L1.10548|
0025b2  f7fffffe          BL       ShellPrintf
0025b6  a0b3              ADR      r0,|L1.10372|
0025b8  f7fffffe          BL       ShellPrintf
;;;3840       TRACE_INFO(" .R2W_FACTOR         0x%X\r\n", SD_CSD_R2W_FACTOR(pSd)        );
0025bc  201b              MOVS     r0,#0x1b
0025be  f7fffffe          BL       ShellPutByte
0025c2  48b1              LDR      r0,|L1.10376|
0025c4  f7fffffe          BL       ShellPrintf
0025c8  201b              MOVS     r0,#0x1b
0025ca  f7fffffe          BL       ShellPutByte
0025ce  a0a5              ADR      r0,|L1.10340|
0025d0  f7fffffe          BL       ShellPrintf
0025d4  6c60              LDR      r0,[r4,#0x44]
0025d6  00c0              LSLS     r0,r0,#3
0025d8  0f41              LSRS     r1,r0,#29
0025da  a0dd              ADR      r0,|L1.10576|
0025dc  f7fffffe          BL       ShellPrintf
0025e0  a0a8              ADR      r0,|L1.10372|
0025e2  f7fffffe          BL       ShellPrintf
;;;3841       TRACE_INFO(" .WRITE_BL_LEN       0x%X\r\n", SD_CSD_WRITE_BL_LEN(pSd)      );
0025e6  201b              MOVS     r0,#0x1b
0025e8  f7fffffe          BL       ShellPutByte
0025ec  48a6              LDR      r0,|L1.10376|
0025ee  f7fffffe          BL       ShellPrintf
0025f2  201b              MOVS     r0,#0x1b
0025f4  f7fffffe          BL       ShellPutByte
0025f8  a09a              ADR      r0,|L1.10340|
0025fa  f7fffffe          BL       ShellPrintf
0025fe  6c60              LDR      r0,[r4,#0x44]
002600  0181              LSLS     r1,r0,#6
002602  0f89              LSRS     r1,r1,#30
002604  0200              LSLS     r0,r0,#8
002606  0089              LSLS     r1,r1,#2
002608  0f80              LSRS     r0,r0,#30
00260a  1809              ADDS     r1,r1,r0
00260c  a0d7              ADR      r0,|L1.10604|
00260e  f7fffffe          BL       ShellPrintf
002612  a09c              ADR      r0,|L1.10372|
002614  f7fffffe          BL       ShellPrintf
;;;3842       TRACE_INFO(" .WRITE_BL_PARTIAL   0x%X\r\n", SD_CSD_WRITE_BL_PARTIAL(pSd)  );
002618  201b              MOVS     r0,#0x1b
00261a  f7fffffe          BL       ShellPutByte
00261e  489a              LDR      r0,|L1.10376|
002620  f7fffffe          BL       ShellPrintf
002624  201b              MOVS     r0,#0x1b
002626  f7fffffe          BL       ShellPutByte
00262a  a08e              ADR      r0,|L1.10340|
00262c  f7fffffe          BL       ShellPrintf
002630  6c60              LDR      r0,[r4,#0x44]
002632  0280              LSLS     r0,r0,#10
002634  0fc1              LSRS     r1,r0,#31
002636  a0d4              ADR      r0,|L1.10632|
002638  f7fffffe          BL       ShellPrintf
00263c  a091              ADR      r0,|L1.10372|
00263e  f7fffffe          BL       ShellPrintf
;;;3843       TRACE_INFO(" .FILE_FORMAT_GRP    0x%X\r\n", SD_CSD_FILE_FORMAT_GRP(pSd)   );
002642  201b              MOVS     r0,#0x1b
002644  f7fffffe          BL       ShellPutByte
002648  488f              LDR      r0,|L1.10376|
00264a  f7fffffe          BL       ShellPrintf
00264e  201b              MOVS     r0,#0x1b
002650  f7fffffe          BL       ShellPutByte
002654  a083              ADR      r0,|L1.10340|
002656  f7fffffe          BL       ShellPrintf
00265a  6c60              LDR      r0,[r4,#0x44]
00265c  0400              LSLS     r0,r0,#16
00265e  0fc1              LSRS     r1,r0,#31
002660  a0d0              ADR      r0,|L1.10660|
002662  f7fffffe          BL       ShellPrintf
002666  a087              ADR      r0,|L1.10372|
002668  f7fffffe          BL       ShellPrintf
;;;3844       TRACE_INFO(" .COPY               0x%X\r\n", SD_CSD_COPY(pSd)              );
00266c  201b              MOVS     r0,#0x1b
00266e  f7fffffe          BL       ShellPutByte
002672  4885              LDR      r0,|L1.10376|
002674  f7fffffe          BL       ShellPrintf
002678  201b              MOVS     r0,#0x1b
00267a  f7fffffe          BL       ShellPutByte
00267e  a079              ADR      r0,|L1.10340|
002680  f7fffffe          BL       ShellPrintf
002684  6c60              LDR      r0,[r4,#0x44]
002686  0440              LSLS     r0,r0,#17
002688  0fc1              LSRS     r1,r0,#31
00268a  a0cd              ADR      r0,|L1.10688|
00268c  f7fffffe          BL       ShellPrintf
002690  a07c              ADR      r0,|L1.10372|
002692  f7fffffe          BL       ShellPrintf
;;;3845       TRACE_INFO(" .PERM_WRITE_PROTECT 0x%X\r\n", SD_CSD_PERM_WRITE_PROTECT(pSd));
002696  201b              MOVS     r0,#0x1b
002698  f7fffffe          BL       ShellPutByte
00269c  487a              LDR      r0,|L1.10376|
00269e  f7fffffe          BL       ShellPrintf
0026a2  201b              MOVS     r0,#0x1b
0026a4  f7fffffe          BL       ShellPutByte
0026a8  a06e              ADR      r0,|L1.10340|
0026aa  f7fffffe          BL       ShellPrintf
0026ae  6c60              LDR      r0,[r4,#0x44]
0026b0  0480              LSLS     r0,r0,#18
0026b2  0fc1              LSRS     r1,r0,#31
0026b4  a0c9              ADR      r0,|L1.10716|
0026b6  f7fffffe          BL       ShellPrintf
0026ba  a072              ADR      r0,|L1.10372|
0026bc  f7fffffe          BL       ShellPrintf
;;;3846       TRACE_INFO(" .TMP_WRITE_PROTECT  0x%X\r\n", SD_CSD_TMP_WRITE_PROTECT(pSd) );
0026c0  201b              MOVS     r0,#0x1b
0026c2  f7fffffe          BL       ShellPutByte
0026c6  4870              LDR      r0,|L1.10376|
0026c8  f7fffffe          BL       ShellPrintf
0026cc  201b              MOVS     r0,#0x1b
0026ce  f7fffffe          BL       ShellPutByte
0026d2  a064              ADR      r0,|L1.10340|
0026d4  f7fffffe          BL       ShellPrintf
0026d8  6c60              LDR      r0,[r4,#0x44]
0026da  04c0              LSLS     r0,r0,#19
0026dc  0fc1              LSRS     r1,r0,#31
0026de  a0c6              ADR      r0,|L1.10744|
0026e0  f7fffffe          BL       ShellPrintf
0026e4  a067              ADR      r0,|L1.10372|
0026e6  f7fffffe          BL       ShellPrintf
;;;3847       TRACE_INFO(" .FILE_FORMAT        0x%X\r\n", SD_CSD_FILE_FORMAT(pSd)       );
0026ea  201b              MOVS     r0,#0x1b
0026ec  f7fffffe          BL       ShellPutByte
0026f0  4865              LDR      r0,|L1.10376|
0026f2  f7fffffe          BL       ShellPrintf
0026f6  201b              MOVS     r0,#0x1b
0026f8  f7fffffe          BL       ShellPutByte
0026fc  a059              ADR      r0,|L1.10340|
0026fe  f7fffffe          BL       ShellPrintf
002702  6c60              LDR      r0,[r4,#0x44]
002704  0500              LSLS     r0,r0,#20
002706  0f81              LSRS     r1,r0,#30
002708  a0c2              ADR      r0,|L1.10772|
00270a  f7fffffe          BL       ShellPrintf
00270e  a05d              ADR      r0,|L1.10372|
002710  f7fffffe          BL       ShellPrintf
;;;3848       TRACE_INFO(" .ECC                0x%X\r\n", SD_CSD_ECC(pSd)               );
002714  201b              MOVS     r0,#0x1b
002716  f7fffffe          BL       ShellPutByte
00271a  485b              LDR      r0,|L1.10376|
00271c  f7fffffe          BL       ShellPrintf
002720  201b              MOVS     r0,#0x1b
002722  f7fffffe          BL       ShellPutByte
002726  a04f              ADR      r0,|L1.10340|
002728  f7fffffe          BL       ShellPrintf
00272c  6c60              LDR      r0,[r4,#0x44]
00272e  0580              LSLS     r0,r0,#22
002730  0f81              LSRS     r1,r0,#30
002732  a0bf              ADR      r0,|L1.10800|
002734  f7fffffe          BL       ShellPrintf
002738  a052              ADR      r0,|L1.10372|
00273a  f7fffffe          BL       ShellPrintf
;;;3849       TRACE_INFO(" .CRC                0x%X\r\n", SD_CSD_CRC(pSd)               );
00273e  201b              MOVS     r0,#0x1b
002740  f7fffffe          BL       ShellPutByte
002744  4850              LDR      r0,|L1.10376|
002746  f7fffffe          BL       ShellPrintf
00274a  201b              MOVS     r0,#0x1b
00274c  f7fffffe          BL       ShellPutByte
002750  a044              ADR      r0,|L1.10340|
002752  f7fffffe          BL       ShellPrintf
002756  6c60              LDR      r0,[r4,#0x44]
002758  0600              LSLS     r0,r0,#24
00275a  0e41              LSRS     r1,r0,#25
00275c  a0bb              ADR      r0,|L1.10828|
00275e  f7fffffe          BL       ShellPrintf
002762  a048              ADR      r0,|L1.10372|
002764  f7fffffe          BL       ShellPrintf
;;;3850       TRACE_INFO(" .MULT               0x%X\r\n", SD_CSD_MULT(pSd)              );
002768  201b              MOVS     r0,#0x1b
00276a  f7fffffe          BL       ShellPutByte
00276e  4846              LDR      r0,|L1.10376|
002770  f7fffffe          BL       ShellPrintf
002774  201b              MOVS     r0,#0x1b
002776  f7fffffe          BL       ShellPutByte
00277a  a03a              ADR      r0,|L1.10340|
00277c  f7fffffe          BL       ShellPrintf
002780  6c20              LDR      r0,[r4,#0x40]
002782  2601              MOVS     r6,#1
002784  0380              LSLS     r0,r0,#14
002786  0f40              LSRS     r0,r0,#29
002788  1c80              ADDS     r0,r0,#2
00278a  0031              MOVS     r1,r6
00278c  4081              LSLS     r1,r1,r0
00278e  a0b6              ADR      r0,|L1.10856|
002790  f7fffffe          BL       ShellPrintf
002794  a03b              ADR      r0,|L1.10372|
002796  f7fffffe          BL       ShellPrintf
;;;3851       TRACE_INFO(" .BLOCKNR            0x%X\r\n", SD_CSD_BLOCKNR(pSd)           );
00279a  201b              MOVS     r0,#0x1b
00279c  f7fffffe          BL       ShellPutByte
0027a0  4839              LDR      r0,|L1.10376|
0027a2  f7fffffe          BL       ShellPrintf
0027a6  201b              MOVS     r0,#0x1b
0027a8  f7fffffe          BL       ShellPutByte
0027ac  a02d              ADR      r0,|L1.10340|
0027ae  f7fffffe          BL       ShellPrintf
0027b2  6be0              LDR      r0,[r4,#0x3c]
0027b4  0581              LSLS     r1,r0,#22
0027b6  0f89              LSRS     r1,r1,#30
0027b8  0600              LSLS     r0,r0,#24
0027ba  0289              LSLS     r1,r1,#10
0027bc  0d80              LSRS     r0,r0,#22
0027be  1809              ADDS     r1,r1,r0
0027c0  6c20              LDR      r0,[r4,#0x40]
0027c2  0f82              LSRS     r2,r0,#30
0027c4  1889              ADDS     r1,r1,r2
0027c6  0380              LSLS     r0,r0,#14
0027c8  1c49              ADDS     r1,r1,#1
0027ca  0f40              LSRS     r0,r0,#29
0027cc  1c80              ADDS     r0,r0,#2
0027ce  4081              LSLS     r1,r1,r0
0027d0  a0ac              ADR      r0,|L1.10884|
0027d2  f7fffffe          BL       ShellPrintf
0027d6  a02b              ADR      r0,|L1.10372|
0027d8  f7fffffe          BL       ShellPrintf
;;;3852       TRACE_INFO(" .BLOCKNR_HC         0x%X\r\n", SD_CSD_BLOCKNR_HC(pSd)        );
0027dc  201b              MOVS     r0,#0x1b
0027de  f7fffffe          BL       ShellPutByte
0027e2  4829              LDR      r0,|L1.10376|
0027e4  f7fffffe          BL       ShellPrintf
0027e8  201b              MOVS     r0,#0x1b
0027ea  f7fffffe          BL       ShellPutByte
0027ee  a01d              ADR      r0,|L1.10340|
0027f0  f7fffffe          BL       ShellPrintf
0027f4  6be0              LDR      r0,[r4,#0x3c]
0027f6  0401              LSLS     r1,r0,#16
0027f8  6c20              LDR      r0,[r4,#0x40]
0027fa  0e02              LSRS     r2,r0,#24
0027fc  0212              LSLS     r2,r2,#8
0027fe  0200              LSLS     r0,r0,#8
002800  1889              ADDS     r1,r1,r2
002802  0e00              LSRS     r0,r0,#24
002804  1808              ADDS     r0,r1,r0
002806  e000              B        |L1.10250|
                  |L1.10248|
002808  e1c0              B        |L1.11148|
                  |L1.10250|
00280a  1c40              ADDS     r0,r0,#1
00280c  0281              LSLS     r1,r0,#10
00280e  a0a4              ADR      r0,|L1.10912|
002810  f7fffffe          BL       ShellPrintf
002814  a01b              ADR      r0,|L1.10372|
002816  f7fffffe          BL       ShellPrintf
;;;3853       TRACE_INFO(" .BLOCK_LEN          0x%X\r\n", SD_CSD_BLOCK_LEN(pSd)         );
00281a  201b              MOVS     r0,#0x1b
00281c  f7fffffe          BL       ShellPutByte
002820  4819              LDR      r0,|L1.10376|
002822  f7fffffe          BL       ShellPrintf
002826  201b              MOVS     r0,#0x1b
002828  f7fffffe          BL       ShellPutByte
00282c  a00d              ADR      r0,|L1.10340|
00282e  f7fffffe          BL       ShellPrintf
002832  6be0              LDR      r0,[r4,#0x3c]
002834  0031              MOVS     r1,r6
002836  0300              LSLS     r0,r0,#12
002838  0f00              LSRS     r0,r0,#28
00283a  4081              LSLS     r1,r1,r0
00283c  a09f              ADR      r0,|L1.10940|
00283e  f7fffffe          BL       ShellPrintf
002842  a010              ADR      r0,|L1.10372|
002844  f7fffffe          BL       ShellPrintf
;;;3854       TRACE_INFO(" .TOTAL_SIZE         0x%X\r\n", SD_CSD_TOTAL_SIZE(pSd)        );
002848  201b              MOVS     r0,#0x1b
00284a  f7fffffe          BL       ShellPutByte
00284e  480e              LDR      r0,|L1.10376|
002850  f7fffffe          BL       ShellPrintf
002854  201b              MOVS     r0,#0x1b
002856  f7fffffe          BL       ShellPutByte
00285a  a002              ADR      r0,|L1.10340|
00285c  f7fffffe          BL       ShellPrintf
002860  6be0              LDR      r0,[r4,#0x3c]
002862  e139              B        |L1.10968|
                  |L1.10340|
002864  5b6d00            DCB      "[m",0
002867  00                DCB      0
                  |L1.10344|
002868  202e5644          DCB      " .VDD_R_CURR_MAX     0x%X\r\n",0
00286c  445f525f
002870  43555252
002874  5f4d4158
002878  20202020
00287c  20307825
002880  580d0a00
                  |L1.10372|
002884  0a0d00            DCB      "\n\r",0
002887  00                DCB      0
                  |L1.10376|
                          DCD      ||.text||+0x1d44
                  |L1.10380|
00288c  202e5644          DCB      " .VDD_W_CURR_MIN     0x%X\r\n",0
002890  445f575f
002894  43555252
002898  5f4d494e
00289c  20202020
0028a0  20307825
0028a4  580d0a00
                  |L1.10408|
0028a8  202e5644          DCB      " .VDD_W_CURR_MAX     0x%X\r\n",0
0028ac  445f575f
0028b0  43555252
0028b4  5f4d4158
0028b8  20202020
0028bc  20307825
0028c0  580d0a00
                  |L1.10436|
0028c4  202e435f          DCB      " .C_SIZE_MULT        0x%X\r\n",0
0028c8  53495a45
0028cc  5f4d554c
0028d0  54202020
0028d4  20202020
0028d8  20307825
0028dc  580d0a00
                  |L1.10464|
0028e0  202e4552          DCB      " .ERASE_BLK_EN       0x%X\r\n",0
0028e4  4153455f
0028e8  424c4b5f
0028ec  454e2020
0028f0  20202020
0028f4  20307825
0028f8  580d0a00
                  |L1.10492|
0028fc  202e5345          DCB      " .SECTOR_SIZE        0x%X\r\n",0
002900  43544f52
002904  5f53495a
002908  45202020
00290c  20202020
002910  20307825
002914  580d0a00
                  |L1.10520|
002918  202e5750          DCB      " .WP_GRP_SIZE        0x%X\r\n",0
00291c  5f475250
002920  5f53495a
002924  45202020
002928  20202020
00292c  20307825
002930  580d0a00
                  |L1.10548|
002934  202e5750          DCB      " .WP_GRP_ENABLE      0x%X\r\n",0
002938  5f475250
00293c  5f454e41
002940  424c4520
002944  20202020
002948  20307825
00294c  580d0a00
                  |L1.10576|
002950  202e5232          DCB      " .R2W_FACTOR         0x%X\r\n",0
002954  575f4641
002958  43544f52
00295c  20202020
002960  20202020
002964  20307825
002968  580d0a00
                  |L1.10604|
00296c  202e5752          DCB      " .WRITE_BL_LEN       0x%X\r\n",0
002970  4954455f
002974  424c5f4c
002978  454e2020
00297c  20202020
002980  20307825
002984  580d0a00
                  |L1.10632|
002988  202e5752          DCB      " .WRITE_BL_PARTIAL   0x%X\r\n",0
00298c  4954455f
002990  424c5f50
002994  41525449
002998  414c2020
00299c  20307825
0029a0  580d0a00
                  |L1.10660|
0029a4  202e4649          DCB      " .FILE_FORMAT_GRP    0x%X\r\n",0
0029a8  4c455f46
0029ac  4f524d41
0029b0  545f4752
0029b4  50202020
0029b8  20307825
0029bc  580d0a00
                  |L1.10688|
0029c0  202e434f          DCB      " .COPY               0x%X\r\n",0
0029c4  50592020
0029c8  20202020
0029cc  20202020
0029d0  20202020
0029d4  20307825
0029d8  580d0a00
                  |L1.10716|
0029dc  202e5045          DCB      " .PERM_WRITE_PROTECT 0x%X\r\n",0
0029e0  524d5f57
0029e4  52495445
0029e8  5f50524f
0029ec  54454354
0029f0  20307825
0029f4  580d0a00
                  |L1.10744|
0029f8  202e544d          DCB      " .TMP_WRITE_PROTECT  0x%X\r\n",0
0029fc  505f5752
002a00  4954455f
002a04  50524f54
002a08  45435420
002a0c  20307825
002a10  580d0a00
                  |L1.10772|
002a14  202e4649          DCB      " .FILE_FORMAT        0x%X\r\n",0
002a18  4c455f46
002a1c  4f524d41
002a20  54202020
002a24  20202020
002a28  20307825
002a2c  580d0a00
                  |L1.10800|
002a30  202e4543          DCB      " .ECC                0x%X\r\n",0
002a34  43202020
002a38  20202020
002a3c  20202020
002a40  20202020
002a44  20307825
002a48  580d0a00
                  |L1.10828|
002a4c  202e4352          DCB      " .CRC                0x%X\r\n",0
002a50  43202020
002a54  20202020
002a58  20202020
002a5c  20202020
002a60  20307825
002a64  580d0a00
                  |L1.10856|
002a68  202e4d55          DCB      " .MULT               0x%X\r\n",0
002a6c  4c542020
002a70  20202020
002a74  20202020
002a78  20202020
002a7c  20307825
002a80  580d0a00
                  |L1.10884|
002a84  202e424c          DCB      " .BLOCKNR            0x%X\r\n",0
002a88  4f434b4e
002a8c  52202020
002a90  20202020
002a94  20202020
002a98  20307825
002a9c  580d0a00
                  |L1.10912|
002aa0  202e424c          DCB      " .BLOCKNR_HC         0x%X\r\n",0
002aa4  4f434b4e
002aa8  525f4843
002aac  20202020
002ab0  20202020
002ab4  20307825
002ab8  580d0a00
                  |L1.10940|
002abc  202e424c          DCB      " .BLOCK_LEN          0x%X\r\n",0
002ac0  4f434b5f
002ac4  4c454e20
002ac8  20202020
002acc  20202020
002ad0  20307825
002ad4  580d0a00
                  |L1.10968|
002ad8  0581              LSLS     r1,r0,#22
002ada  0f89              LSRS     r1,r1,#30
002adc  0602              LSLS     r2,r0,#24
002ade  0289              LSLS     r1,r1,#10
002ae0  0d92              LSRS     r2,r2,#22
002ae2  1889              ADDS     r1,r1,r2
002ae4  6c22              LDR      r2,[r4,#0x40]
002ae6  0f93              LSRS     r3,r2,#30
002ae8  18c9              ADDS     r1,r1,r3
002aea  0392              LSLS     r2,r2,#14
002aec  1c49              ADDS     r1,r1,#1
002aee  0f52              LSRS     r2,r2,#29
002af0  1c92              ADDS     r2,r2,#2
002af2  4091              LSLS     r1,r1,r2
002af4  0300              LSLS     r0,r0,#12
002af6  0f00              LSRS     r0,r0,#28
002af8  4081              LSLS     r1,r1,r0
002afa  a0f9              ADR      r0,|L1.12000|
002afc  f7fffffe          BL       ShellPrintf
002b00  a0fe              ADR      r0,|L1.12028|
002b02  f7fffffe          BL       ShellPrintf
;;;3855       TRACE_INFO(" .TOTAL_SIZE_HC      0x%X\r\n", SD_CSD_TOTAL_SIZE_HC(pSd)     );
002b06  201b              MOVS     r0,#0x1b
002b08  f7fffffe          BL       ShellPutByte
002b0c  48fc              LDR      r0,|L1.12032|
002b0e  f7fffffe          BL       ShellPrintf
002b12  201b              MOVS     r0,#0x1b
002b14  f7fffffe          BL       ShellPutByte
002b18  a0fa              ADR      r0,|L1.12036|
002b1a  f7fffffe          BL       ShellPrintf
002b1e  6be0              LDR      r0,[r4,#0x3c]
002b20  0401              LSLS     r1,r0,#16
002b22  6c20              LDR      r0,[r4,#0x40]
002b24  0e02              LSRS     r2,r0,#24
002b26  0212              LSLS     r2,r2,#8
002b28  0200              LSLS     r0,r0,#8
002b2a  1889              ADDS     r1,r1,r2
002b2c  0e00              LSRS     r0,r0,#24
002b2e  1808              ADDS     r0,r1,r0
002b30  1c40              ADDS     r0,r0,#1
002b32  04c1              LSLS     r1,r0,#19
002b34  a0f4              ADR      r0,|L1.12040|
002b36  f7fffffe          BL       ShellPrintf
002b3a  a0f0              ADR      r0,|L1.12028|
002b3c  f7fffffe          BL       ShellPrintf
;;;3856       TRACE_INFO(" -SD_TOTAL_SIZE      0x%X\r\n", SD_TOTAL_SIZE(pSd)            );
002b40  201b              MOVS     r0,#0x1b
002b42  f7fffffe          BL       ShellPutByte
002b46  48ee              LDR      r0,|L1.12032|
002b48  f7fffffe          BL       ShellPrintf
002b4c  201b              MOVS     r0,#0x1b
002b4e  f7fffffe          BL       ShellPutByte
002b52  a0ec              ADR      r0,|L1.12036|
002b54  f7fffffe          BL       ShellPrintf
002b58  68e9              LDR      r1,[r5,#0xc]
002b5a  a0f2              ADR      r0,|L1.12068|
002b5c  f7fffffe          BL       ShellPrintf
002b60  a0e6              ADR      r0,|L1.12028|
002b62  f7fffffe          BL       ShellPrintf
;;;3857       TRACE_INFO(" -SD_TOTAL_BLOCK     0x%X\r\n", SD_TOTAL_BLOCK(pSd)           );
002b66  201b              MOVS     r0,#0x1b
002b68  f7fffffe          BL       ShellPutByte
002b6c  48e4              LDR      r0,|L1.12032|
002b6e  f7fffffe          BL       ShellPrintf
002b72  201b              MOVS     r0,#0x1b
002b74  f7fffffe          BL       ShellPutByte
002b78  a0e2              ADR      r0,|L1.12036|
002b7a  f7fffffe          BL       ShellPrintf
002b7e  6929              LDR      r1,[r5,#0x10]
002b80  a0ef              ADR      r0,|L1.12096|
002b82  f7fffffe          BL       ShellPrintf
002b86  a0dd              ADR      r0,|L1.12028|
002b88  f7fffffe          BL       ShellPrintf
                  |L1.11148|
;;;3858   }   
002b8c  bd70              POP      {r4-r6,pc}
;;;3859   
                          ENDP

                  SD_DisplayRegisterECSD PROC
;;;3863   //------------------------------------------------------------------------------
;;;3864   void SD_DisplayRegisterECSD(SdCard *pSd)
002b8e  b570              PUSH     {r4-r6,lr}
;;;3865   {
002b90  0006              MOVS     r6,r0
;;;3866       if (pSd->cardType >= CARD_MMC && pSd->cardType <= CARD_MMCHD
002b92  2009              MOVS     r0,#9
002b94  0180              LSLS     r0,r0,#6
002b96  1834              ADDS     r4,r6,r0
002b98  7fa0              LDRB     r0,[r4,#0x1e]
002b9a  1f00              SUBS     r0,r0,#4
002b9c  2801              CMP      r0,#1
002b9e  d803              BHI      |L1.11176|
;;;3867           && SD_CSD_STRUCTURE(pSd) >= 2) {}
002ba0  6bb0              LDR      r0,[r6,#0x38]
002ba2  0f80              LSRS     r0,r0,#30
002ba4  2802              CMP      r0,#2
002ba6  d212              BCS      |L1.11214|
                  |L1.11176|
;;;3868       else {
;;;3869           TRACE_INFO("** EXT_CSD NOT SUPPORTED\n\r");
002ba8  201b              MOVS     r0,#0x1b
002baa  f7fffffe          BL       ShellPutByte
002bae  48d4              LDR      r0,|L1.12032|
002bb0  f7fffffe          BL       ShellPrintf
002bb4  201b              MOVS     r0,#0x1b
002bb6  f7fffffe          BL       ShellPutByte
002bba  a0d2              ADR      r0,|L1.12036|
002bbc  f7fffffe          BL       ShellPrintf
002bc0  a0e6              ADR      r0,|L1.12124|
002bc2  f7fffffe          BL       ShellPrintf
002bc6  a0cd              ADR      r0,|L1.12028|
002bc8  f7fffffe          BL       ShellPrintf
;;;3870           return;
;;;3871       }
;;;3872       TRACE_INFO("======= EXT_CSD =======");
;;;3873     #if 0
;;;3874     {
;;;3875       unsigned int i;
;;;3876       unsigned char *p = (unsigned char *)pSd->extData;
;;;3877       for(i = 0; i < 512; i++) {
;;;3878           if ((i % 16) == 0) TRACE_INFO_WP("\n\r [%3d]:", i);
;;;3879           TRACE_INFO_WP(" %2x", p[i]);
;;;3880       }
;;;3881       TRACE_INFO_WP("\n\r");
;;;3882       TRACE_INFO("------------------------\n\r");
;;;3883     }
;;;3884     #else
;;;3885       TRACE_INFO_WP("\n\r");
;;;3886     #endif
;;;3887       TRACE_INFO(" .S_CMD_SET            : 0x%X\n\r",
;;;3888           SD_EXTCSD_S_CMD_SET(pSd));
;;;3889       TRACE_INFO(" .BOOT_INFO            : 0x%X\n\r",
;;;3890           SD_EXTCSD_BOOT_INFO(pSd));
;;;3891       TRACE_INFO(" .BOOT_SIZE_MULTI      : 0x%X\n\r",
;;;3892           SD_EXTCSD_BOOT_SIZE_MULTI(pSd));
;;;3893       TRACE_INFO(" .ACC_SIZE             : 0x%X\n\r",
;;;3894           SD_EXTCSD_ACC_SIZE(pSd));
;;;3895       TRACE_INFO(" .HC_ERASE_GRP_SIZE    : 0x%X\n\r",
;;;3896           SD_EXTCSD_HC_ERASE_GRP_SIZE(pSd));
;;;3897       TRACE_INFO(" .ERASE_TIMEOUT_MULT   : 0x%X\n\r",
;;;3898           SD_EXTCSD_ERASE_TIMEOUT_MULT(pSd));
;;;3899       TRACE_INFO(" .REL_WR_SEC_C         : 0x%X\n\r",
;;;3900           SD_EXTCSD_REL_WR_SEC_C(pSd));
;;;3901       TRACE_INFO(" .HC_WP_GRP_SIZE       : 0x%X\n\r",
;;;3902           SD_EXTCSD_HC_WP_GRP_SIZE(pSd));
;;;3903       TRACE_INFO(" .S_C_VCC              : 0x%X\n\r",
;;;3904           SD_EXTCSD_S_C_VCC(pSd));
;;;3905       TRACE_INFO(" .S_C_VCCQ             : 0x%X\n\r",
;;;3906           SD_EXTCSD_S_C_VCCQ(pSd));
;;;3907       TRACE_INFO(" .S_A_TIMEOUT          : 0x%X\n\r",
;;;3908           SD_EXTCSD_S_A_TIMEOUT(pSd));
;;;3909       TRACE_INFO(" .SEC_COUNT            : 0x%X\n\r",
;;;3910           SD_EXTCSD_SEC_COUNT(pSd));
;;;3911       TRACE_INFO(" .MIN_PERF_W_8_52      : 0x%X\n\r",
;;;3912           SD_EXTCSD_MIN_PERF_W_8_52(pSd));
;;;3913       TRACE_INFO(" .MIN_PERF_R_8_52      : 0x%X\n\r",
;;;3914           SD_EXTCSD_MIN_PERF_R_8_52(pSd));
;;;3915       TRACE_INFO(" .MIN_PERF_W_8_26_4_52 : 0x%X\n\r",
;;;3916           SD_EXTCSD_MIN_PERF_W_8_26_4_52(pSd));
;;;3917       TRACE_INFO(" .MIN_PERF_R_8_26_4_52 : 0x%X\n\r",
;;;3918           SD_EXTCSD_MIN_PERF_R_8_26_4_52(pSd));
;;;3919       TRACE_INFO(" .MIN_PERF_W_4_26      : 0x%X\n\r",
;;;3920           SD_EXTCSD_MIN_PERF_W_4_26(pSd));
;;;3921       TRACE_INFO(" .MIN_PERF_R_4_26      : 0x%X\n\r",
;;;3922           SD_EXTCSD_MIN_PERF_R_4_26(pSd));
;;;3923       TRACE_INFO(" .PWR_CL_26_360        : 0x%X\n\r",
;;;3924           SD_EXTCSD_PWR_CL_26_360(pSd));
;;;3925       TRACE_INFO(" .PWR_CL_52_360        : 0x%X\n\r",
;;;3926           SD_EXTCSD_PWR_CL_52_360(pSd));
;;;3927       TRACE_INFO(" .PWR_CL_26_195        : 0x%X\n\r",
;;;3928           SD_EXTCSD_PWR_CL_26_195(pSd));
;;;3929       TRACE_INFO(" .PWR_CL_52_195        : 0x%X\n\r",
;;;3930           SD_EXTCSD_PWR_CL_52_195(pSd));
;;;3931       TRACE_INFO(" .CARD_TYPE            : 0x%X\n\r",
;;;3932           SD_EXTCSD_CARD_TYPE(pSd));
;;;3933       TRACE_INFO(" .CSD_STRUCTURE        : 0x%X\n\r",
;;;3934           SD_EXTCSD_CSD_STRUCTURE(pSd));
;;;3935       TRACE_INFO(" .EXT_CSD_REV          : 0x%X\n\r",
;;;3936           SD_EXTCSD_EXT_CSD_REV(pSd));
;;;3937       TRACE_INFO(" .CMD_SET              : 0x%X\n\r",
;;;3938           SD_EXTCSD_CMD_SET(pSd));
;;;3939       TRACE_INFO(" .CMD_SET_REV          : 0x%X\n\r",
;;;3940           SD_EXTCSD_CMD_SET_REV(pSd));
;;;3941       TRACE_INFO(" .POWER_CLASS          : 0x%X\n\r",
;;;3942           SD_EXTCSD_POWER_CLASS(pSd));
;;;3943       TRACE_INFO(" .HS_TIMING            : 0x%X\n\r",
;;;3944           SD_EXTCSD_HS_TIMING(pSd));
;;;3945       TRACE_INFO(" .BUS_WIDTH            : 0x%X\n\r",
;;;3946           SD_EXTCSD_BUS_WIDTH(pSd));
;;;3947       TRACE_INFO(" .ERASED_MEM_CONT      : 0x%X\n\r",
;;;3948           SD_EXTCSD_ERASED_MEM_CONT(pSd));
;;;3949       TRACE_INFO(" .BOOT_CONFIG          : 0x%X\n\r",
;;;3950           SD_EXTCSD_BOOT_CONFIG(pSd));
;;;3951       TRACE_INFO(" .BOOT_BUS_WIDTH       : 0x%X\n\r",
;;;3952           SD_EXTCSD_BOOT_BUS_WIDTH(pSd));
;;;3953       TRACE_INFO(" .ERASE_GROUP_DEF      : 0x%X\n\r",
;;;3954           SD_EXTCSD_ERASE_GROUP_DEF(pSd));
;;;3955   }
002bcc  bd70              POP      {r4-r6,pc}
                  |L1.11214|
002bce  201b              MOVS     r0,#0x1b              ;3872
002bd0  f7fffffe          BL       ShellPutByte
002bd4  48ca              LDR      r0,|L1.12032|
002bd6  f7fffffe          BL       ShellPrintf
002bda  201b              MOVS     r0,#0x1b              ;3872
002bdc  f7fffffe          BL       ShellPutByte
002be0  a0c8              ADR      r0,|L1.12036|
002be2  f7fffffe          BL       ShellPrintf
002be6  a0e4              ADR      r0,|L1.12152|
002be8  f7fffffe          BL       ShellPrintf
002bec  a0c3              ADR      r0,|L1.12028|
002bee  f7fffffe          BL       ShellPrintf
002bf2  201b              MOVS     r0,#0x1b              ;3885
002bf4  f7fffffe          BL       ShellPutByte
002bf8  48c1              LDR      r0,|L1.12032|
002bfa  f7fffffe          BL       ShellPrintf
002bfe  201b              MOVS     r0,#0x1b              ;3885
002c00  f7fffffe          BL       ShellPutByte
002c04  a0bf              ADR      r0,|L1.12036|
002c06  f7fffffe          BL       ShellPrintf
002c0a  a0bc              ADR      r0,|L1.12028|
002c0c  f7fffffe          BL       ShellPrintf
002c10  201b              MOVS     r0,#0x1b              ;3887
002c12  f7fffffe          BL       ShellPutByte
002c16  48ba              LDR      r0,|L1.12032|
002c18  f7fffffe          BL       ShellPrintf
002c1c  201b              MOVS     r0,#0x1b              ;3887
002c1e  f7fffffe          BL       ShellPutByte
002c22  a0b8              ADR      r0,|L1.12036|
002c24  f7fffffe          BL       ShellPrintf
002c28  7821              LDRB     r1,[r4,#0]            ;3887
002c2a  a0d9              ADR      r0,|L1.12176|
002c2c  f7fffffe          BL       ShellPrintf
002c30  a0b2              ADR      r0,|L1.12028|
002c32  f7fffffe          BL       ShellPrintf
002c36  201b              MOVS     r0,#0x1b              ;3889
002c38  f7fffffe          BL       ShellPutByte
002c3c  48b0              LDR      r0,|L1.12032|
002c3e  f7fffffe          BL       ShellPrintf
002c42  201b              MOVS     r0,#0x1b              ;3889
002c44  f7fffffe          BL       ShellPutByte
002c48  a0ae              ADR      r0,|L1.12036|
002c4a  f7fffffe          BL       ShellPrintf
002c4e  0035              MOVS     r5,r6                 ;3889
002c50  35ff              ADDS     r5,r5,#0xff           ;3889
002c52  3521              ADDS     r5,r5,#0x21           ;3889
002c54  7b29              LDRB     r1,[r5,#0xc]          ;3889
002c56  a0d6              ADR      r0,|L1.12208|
002c58  f7fffffe          BL       ShellPrintf
002c5c  a0a7              ADR      r0,|L1.12028|
002c5e  f7fffffe          BL       ShellPrintf
002c62  201b              MOVS     r0,#0x1b              ;3891
002c64  f7fffffe          BL       ShellPutByte
002c68  48a5              LDR      r0,|L1.12032|
002c6a  f7fffffe          BL       ShellPrintf
002c6e  201b              MOVS     r0,#0x1b              ;3891
002c70  f7fffffe          BL       ShellPutByte
002c74  a0a3              ADR      r0,|L1.12036|
002c76  f7fffffe          BL       ShellPrintf
002c7a  7aa9              LDRB     r1,[r5,#0xa]          ;3891
002c7c  a0d4              ADR      r0,|L1.12240|
002c7e  f7fffffe          BL       ShellPrintf
002c82  a09e              ADR      r0,|L1.12028|
002c84  f7fffffe          BL       ShellPrintf
002c88  201b              MOVS     r0,#0x1b              ;3893
002c8a  f7fffffe          BL       ShellPutByte
002c8e  489c              LDR      r0,|L1.12032|
002c90  f7fffffe          BL       ShellPrintf
002c94  201b              MOVS     r0,#0x1b              ;3893
002c96  f7fffffe          BL       ShellPutByte
002c9a  a09a              ADR      r0,|L1.12036|
002c9c  f7fffffe          BL       ShellPrintf
002ca0  7a69              LDRB     r1,[r5,#9]            ;3893
002ca2  a0d3              ADR      r0,|L1.12272|
002ca4  f7fffffe          BL       ShellPrintf
002ca8  a094              ADR      r0,|L1.12028|
002caa  f7fffffe          BL       ShellPrintf
002cae  201b              MOVS     r0,#0x1b              ;3895
002cb0  f7fffffe          BL       ShellPutByte
002cb4  4892              LDR      r0,|L1.12032|
002cb6  f7fffffe          BL       ShellPrintf
002cba  201b              MOVS     r0,#0x1b              ;3895
002cbc  f7fffffe          BL       ShellPutByte
002cc0  a090              ADR      r0,|L1.12036|
002cc2  f7fffffe          BL       ShellPrintf
002cc6  7a29              LDRB     r1,[r5,#8]            ;3895
002cc8  a0d1              ADR      r0,|L1.12304|
002cca  f7fffffe          BL       ShellPrintf
002cce  a08b              ADR      r0,|L1.12028|
002cd0  f7fffffe          BL       ShellPrintf
002cd4  201b              MOVS     r0,#0x1b              ;3897
002cd6  f7fffffe          BL       ShellPutByte
002cda  4889              LDR      r0,|L1.12032|
002cdc  f7fffffe          BL       ShellPrintf
002ce0  201b              MOVS     r0,#0x1b              ;3897
002ce2  f7fffffe          BL       ShellPutByte
002ce6  a087              ADR      r0,|L1.12036|
002ce8  f7fffffe          BL       ShellPrintf
002cec  79e9              LDRB     r1,[r5,#7]            ;3897
002cee  a0d0              ADR      r0,|L1.12336|
002cf0  f7fffffe          BL       ShellPrintf
002cf4  a081              ADR      r0,|L1.12028|
002cf6  f7fffffe          BL       ShellPrintf
002cfa  201b              MOVS     r0,#0x1b              ;3899
002cfc  f7fffffe          BL       ShellPutByte
002d00  487f              LDR      r0,|L1.12032|
002d02  f7fffffe          BL       ShellPrintf
002d06  201b              MOVS     r0,#0x1b              ;3899
002d08  f7fffffe          BL       ShellPutByte
002d0c  a07d              ADR      r0,|L1.12036|
002d0e  f7fffffe          BL       ShellPrintf
002d12  79a9              LDRB     r1,[r5,#6]            ;3899
002d14  a0ce              ADR      r0,|L1.12368|
002d16  f7fffffe          BL       ShellPrintf
002d1a  a078              ADR      r0,|L1.12028|
002d1c  f7fffffe          BL       ShellPrintf
002d20  201b              MOVS     r0,#0x1b              ;3901
002d22  f7fffffe          BL       ShellPutByte
002d26  4876              LDR      r0,|L1.12032|
002d28  f7fffffe          BL       ShellPrintf
002d2c  201b              MOVS     r0,#0x1b              ;3901
002d2e  f7fffffe          BL       ShellPutByte
002d32  a074              ADR      r0,|L1.12036|
002d34  f7fffffe          BL       ShellPrintf
002d38  7969              LDRB     r1,[r5,#5]            ;3901
002d3a  a0cd              ADR      r0,|L1.12400|
002d3c  f7fffffe          BL       ShellPrintf
002d40  a06e              ADR      r0,|L1.12028|
002d42  f7fffffe          BL       ShellPrintf
002d46  201b              MOVS     r0,#0x1b              ;3903
002d48  f7fffffe          BL       ShellPutByte
002d4c  486c              LDR      r0,|L1.12032|
002d4e  f7fffffe          BL       ShellPrintf
002d52  201b              MOVS     r0,#0x1b              ;3903
002d54  f7fffffe          BL       ShellPutByte
002d58  a06a              ADR      r0,|L1.12036|
002d5a  f7fffffe          BL       ShellPrintf
002d5e  7929              LDRB     r1,[r5,#4]            ;3903
002d60  a0cb              ADR      r0,|L1.12432|
002d62  f7fffffe          BL       ShellPrintf
002d66  a065              ADR      r0,|L1.12028|
002d68  f7fffffe          BL       ShellPrintf
002d6c  201b              MOVS     r0,#0x1b              ;3905
002d6e  f7fffffe          BL       ShellPutByte
002d72  4863              LDR      r0,|L1.12032|
002d74  f7fffffe          BL       ShellPrintf
002d78  201b              MOVS     r0,#0x1b              ;3905
002d7a  f7fffffe          BL       ShellPutByte
002d7e  a061              ADR      r0,|L1.12036|
002d80  f7fffffe          BL       ShellPrintf
002d84  78e9              LDRB     r1,[r5,#3]            ;3905
002d86  a0ca              ADR      r0,|L1.12464|
002d88  f7fffffe          BL       ShellPrintf
002d8c  a05b              ADR      r0,|L1.12028|
002d8e  f7fffffe          BL       ShellPrintf
002d92  201b              MOVS     r0,#0x1b              ;3907
002d94  f7fffffe          BL       ShellPutByte
002d98  4859              LDR      r0,|L1.12032|
002d9a  f7fffffe          BL       ShellPrintf
002d9e  201b              MOVS     r0,#0x1b              ;3907
002da0  f7fffffe          BL       ShellPutByte
002da4  a057              ADR      r0,|L1.12036|
002da6  f7fffffe          BL       ShellPrintf
002daa  7869              LDRB     r1,[r5,#1]            ;3907
002dac  a0c8              ADR      r0,|L1.12496|
002dae  f7fffffe          BL       ShellPrintf
002db2  a052              ADR      r0,|L1.12028|
002db4  f7fffffe          BL       ShellPrintf
002db8  201b              MOVS     r0,#0x1b              ;3909
002dba  f7fffffe          BL       ShellPutByte
002dbe  4850              LDR      r0,|L1.12032|
002dc0  f7fffffe          BL       ShellPrintf
002dc4  201b              MOVS     r0,#0x1b              ;3909
002dc6  f7fffffe          BL       ShellPutByte
002dca  a04e              ADR      r0,|L1.12036|
002dcc  f7fffffe          BL       ShellPrintf
002dd0  1df4              ADDS     r4,r6,#7              ;3909
002dd2  34f9              ADDS     r4,r4,#0xf9           ;3909
002dd4  7f61              LDRB     r1,[r4,#0x1d]         ;3909
002dd6  7f20              LDRB     r0,[r4,#0x1c]         ;3909
002dd8  7fe2              LDRB     r2,[r4,#0x1f]         ;3909
002dda  0209              LSLS     r1,r1,#8              ;3909
002ddc  1840              ADDS     r0,r0,r1              ;3909
002dde  7fa1              LDRB     r1,[r4,#0x1e]         ;3909
002de0  0612              LSLS     r2,r2,#24             ;3909
002de2  0409              LSLS     r1,r1,#16             ;3909
002de4  1889              ADDS     r1,r1,r2              ;3909
002de6  1841              ADDS     r1,r0,r1              ;3909
002de8  a0c1              ADR      r0,|L1.12528|
002dea  f7fffffe          BL       ShellPrintf
002dee  a043              ADR      r0,|L1.12028|
002df0  f7fffffe          BL       ShellPrintf
002df4  201b              MOVS     r0,#0x1b              ;3911
002df6  f7fffffe          BL       ShellPutByte
002dfa  4841              LDR      r0,|L1.12032|
002dfc  f7fffffe          BL       ShellPrintf
002e00  201b              MOVS     r0,#0x1b              ;3911
002e02  f7fffffe          BL       ShellPutByte
002e06  a03f              ADR      r0,|L1.12036|
002e08  f7fffffe          BL       ShellPrintf
002e0c  7ea1              LDRB     r1,[r4,#0x1a]         ;3911
002e0e  a0c0              ADR      r0,|L1.12560|
002e10  f7fffffe          BL       ShellPrintf
002e14  a039              ADR      r0,|L1.12028|
002e16  f7fffffe          BL       ShellPrintf
002e1a  201b              MOVS     r0,#0x1b              ;3913
002e1c  f7fffffe          BL       ShellPutByte
002e20  4837              LDR      r0,|L1.12032|
002e22  f7fffffe          BL       ShellPrintf
002e26  201b              MOVS     r0,#0x1b              ;3913
002e28  f7fffffe          BL       ShellPutByte
002e2c  a035              ADR      r0,|L1.12036|
002e2e  f7fffffe          BL       ShellPrintf
002e32  7e61              LDRB     r1,[r4,#0x19]         ;3913
002e34  a0be              ADR      r0,|L1.12592|
002e36  f7fffffe          BL       ShellPrintf
002e3a  a030              ADR      r0,|L1.12028|
002e3c  f7fffffe          BL       ShellPrintf
002e40  201b              MOVS     r0,#0x1b              ;3915
002e42  f7fffffe          BL       ShellPutByte
002e46  482e              LDR      r0,|L1.12032|
002e48  f7fffffe          BL       ShellPrintf
002e4c  201b              MOVS     r0,#0x1b              ;3915
002e4e  f7fffffe          BL       ShellPutByte
002e52  a02c              ADR      r0,|L1.12036|
002e54  f7fffffe          BL       ShellPrintf
002e58  7e21              LDRB     r1,[r4,#0x18]         ;3915
002e5a  a0bd              ADR      r0,|L1.12624|
002e5c  f7fffffe          BL       ShellPrintf
002e60  a026              ADR      r0,|L1.12028|
002e62  f7fffffe          BL       ShellPrintf
002e66  201b              MOVS     r0,#0x1b              ;3917
002e68  f7fffffe          BL       ShellPutByte
002e6c  4824              LDR      r0,|L1.12032|
002e6e  f7fffffe          BL       ShellPrintf
002e72  201b              MOVS     r0,#0x1b              ;3917
002e74  f7fffffe          BL       ShellPutByte
002e78  a022              ADR      r0,|L1.12036|
002e7a  f7fffffe          BL       ShellPrintf
002e7e  7de1              LDRB     r1,[r4,#0x17]         ;3917
002e80  a0bb              ADR      r0,|L1.12656|
002e82  f7fffffe          BL       ShellPrintf
002e86  a01d              ADR      r0,|L1.12028|
002e88  f7fffffe          BL       ShellPrintf
002e8c  201b              MOVS     r0,#0x1b              ;3919
002e8e  f7fffffe          BL       ShellPutByte
002e92  481b              LDR      r0,|L1.12032|
002e94  f7fffffe          BL       ShellPrintf
002e98  201b              MOVS     r0,#0x1b              ;3919
002e9a  f7fffffe          BL       ShellPutByte
002e9e  a019              ADR      r0,|L1.12036|
002ea0  f7fffffe          BL       ShellPrintf
002ea4  7da1              LDRB     r1,[r4,#0x16]         ;3919
002ea6  a0ba              ADR      r0,|L1.12688|
002ea8  f7fffffe          BL       ShellPrintf
002eac  a013              ADR      r0,|L1.12028|
002eae  f7fffffe          BL       ShellPrintf
002eb2  201b              MOVS     r0,#0x1b              ;3921
002eb4  f7fffffe          BL       ShellPutByte
002eb8  4811              LDR      r0,|L1.12032|
002eba  f7fffffe          BL       ShellPrintf
002ebe  201b              MOVS     r0,#0x1b              ;3921
002ec0  f7fffffe          BL       ShellPutByte
002ec4  a00f              ADR      r0,|L1.12036|
002ec6  f7fffffe          BL       ShellPrintf
002eca  7d61              LDRB     r1,[r4,#0x15]         ;3921
002ecc  a0b8              ADR      r0,|L1.12720|
002ece  f7fffffe          BL       ShellPrintf
002ed2  a00a              ADR      r0,|L1.12028|
002ed4  f7fffffe          BL       ShellPrintf
002ed8  201b              MOVS     r0,#0x1b              ;3923
002eda  f7fffffe          BL       ShellPutByte
002ede  e177              B        |L1.12752|
                  |L1.12000|
002ee0  202e544f          DCB      " .TOTAL_SIZE         0x%X\r\n",0
002ee4  54414c5f
002ee8  53495a45
002eec  20202020
002ef0  20202020
002ef4  20307825
002ef8  580d0a00
                  |L1.12028|
002efc  0a0d00            DCB      "\n\r",0
002eff  00                DCB      0
                  |L1.12032|
                          DCD      ||.text||+0x1d44
                  |L1.12036|
002f04  5b6d00            DCB      "[m",0
002f07  00                DCB      0
                  |L1.12040|
002f08  202e544f          DCB      " .TOTAL_SIZE_HC      0x%X\r\n",0
002f0c  54414c5f
002f10  53495a45
002f14  5f484320
002f18  20202020
002f1c  20307825
002f20  580d0a00
                  |L1.12068|
002f24  202d5344          DCB      " -SD_TOTAL_SIZE      0x%X\r\n",0
002f28  5f544f54
002f2c  414c5f53
002f30  495a4520
002f34  20202020
002f38  20307825
002f3c  580d0a00
                  |L1.12096|
002f40  202d5344          DCB      " -SD_TOTAL_BLOCK     0x%X\r\n",0
002f44  5f544f54
002f48  414c5f42
002f4c  4c4f434b
002f50  20202020
002f54  20307825
002f58  580d0a00
                  |L1.12124|
002f5c  2a2a2045          DCB      "** EXT_CSD NOT SUPPORTED\n\r",0
002f60  58545f43
002f64  5344204e
002f68  4f542053
002f6c  5550504f
002f70  52544544
002f74  0a0d00  
002f77  00                DCB      0
                  |L1.12152|
002f78  3d3d3d3d          DCB      "======= EXT_CSD =======",0
002f7c  3d3d3d20
002f80  4558545f
002f84  43534420
002f88  3d3d3d3d
002f8c  3d3d3d00
                  |L1.12176|
002f90  202e535f          DCB      " .S_CMD_SET            : 0x%X\n\r",0
002f94  434d445f
002f98  53455420
002f9c  20202020
002fa0  20202020
002fa4  2020203a
002fa8  20307825
002fac  580a0d00
                  |L1.12208|
002fb0  202e424f          DCB      " .BOOT_INFO            : 0x%X\n\r",0
002fb4  4f545f49
002fb8  4e464f20
002fbc  20202020
002fc0  20202020
002fc4  2020203a
002fc8  20307825
002fcc  580a0d00
                  |L1.12240|
002fd0  202e424f          DCB      " .BOOT_SIZE_MULTI      : 0x%X\n\r",0
002fd4  4f545f53
002fd8  495a455f
002fdc  4d554c54
002fe0  49202020
002fe4  2020203a
002fe8  20307825
002fec  580a0d00
                  |L1.12272|
002ff0  202e4143          DCB      " .ACC_SIZE             : 0x%X\n\r",0
002ff4  435f5349
002ff8  5a452020
002ffc  20202020
003000  20202020
003004  2020203a
003008  20307825
00300c  580a0d00
                  |L1.12304|
003010  202e4843          DCB      " .HC_ERASE_GRP_SIZE    : 0x%X\n\r",0
003014  5f455241
003018  53455f47
00301c  52505f53
003020  495a4520
003024  2020203a
003028  20307825
00302c  580a0d00
                  |L1.12336|
003030  202e4552          DCB      " .ERASE_TIMEOUT_MULT   : 0x%X\n\r",0
003034  4153455f
003038  54494d45
00303c  4f55545f
003040  4d554c54
003044  2020203a
003048  20307825
00304c  580a0d00
                  |L1.12368|
003050  202e5245          DCB      " .REL_WR_SEC_C         : 0x%X\n\r",0
003054  4c5f5752
003058  5f534543
00305c  5f432020
003060  20202020
003064  2020203a
003068  20307825
00306c  580a0d00
                  |L1.12400|
003070  202e4843          DCB      " .HC_WP_GRP_SIZE       : 0x%X\n\r",0
003074  5f57505f
003078  4752505f
00307c  53495a45
003080  20202020
003084  2020203a
003088  20307825
00308c  580a0d00
                  |L1.12432|
003090  202e535f          DCB      " .S_C_VCC              : 0x%X\n\r",0
003094  435f5643
003098  43202020
00309c  20202020
0030a0  20202020
0030a4  2020203a
0030a8  20307825
0030ac  580a0d00
                  |L1.12464|
0030b0  202e535f          DCB      " .S_C_VCCQ             : 0x%X\n\r",0
0030b4  435f5643
0030b8  43512020
0030bc  20202020
0030c0  20202020
0030c4  2020203a
0030c8  20307825
0030cc  580a0d00
                  |L1.12496|
0030d0  202e535f          DCB      " .S_A_TIMEOUT          : 0x%X\n\r",0
0030d4  415f5449
0030d8  4d454f55
0030dc  54202020
0030e0  20202020
0030e4  2020203a
0030e8  20307825
0030ec  580a0d00
                  |L1.12528|
0030f0  202e5345          DCB      " .SEC_COUNT            : 0x%X\n\r",0
0030f4  435f434f
0030f8  554e5420
0030fc  20202020
003100  20202020
003104  2020203a
003108  20307825
00310c  580a0d00
                  |L1.12560|
003110  202e4d49          DCB      " .MIN_PERF_W_8_52      : 0x%X\n\r",0
003114  4e5f5045
003118  52465f57
00311c  5f385f35
003120  32202020
003124  2020203a
003128  20307825
00312c  580a0d00
                  |L1.12592|
003130  202e4d49          DCB      " .MIN_PERF_R_8_52      : 0x%X\n\r",0
003134  4e5f5045
003138  52465f52
00313c  5f385f35
003140  32202020
003144  2020203a
003148  20307825
00314c  580a0d00
                  |L1.12624|
003150  202e4d49          DCB      " .MIN_PERF_W_8_26_4_52 : 0x%X\n\r",0
003154  4e5f5045
003158  52465f57
00315c  5f385f32
003160  365f345f
003164  3532203a
003168  20307825
00316c  580a0d00
                  |L1.12656|
003170  202e4d49          DCB      " .MIN_PERF_R_8_26_4_52 : 0x%X\n\r",0
003174  4e5f5045
003178  52465f52
00317c  5f385f32
003180  365f345f
003184  3532203a
003188  20307825
00318c  580a0d00
                  |L1.12688|
003190  202e4d49          DCB      " .MIN_PERF_W_4_26      : 0x%X\n\r",0
003194  4e5f5045
003198  52465f57
00319c  5f345f32
0031a0  36202020
0031a4  2020203a
0031a8  20307825
0031ac  580a0d00
                  |L1.12720|
0031b0  202e4d49          DCB      " .MIN_PERF_R_4_26      : 0x%X\n\r",0
0031b4  4e5f5045
0031b8  52465f52
0031bc  5f345f32
0031c0  36202020
0031c4  2020203a
0031c8  20307825
0031cc  580a0d00
                  |L1.12752|
0031d0  48f7              LDR      r0,|L1.13744|
0031d2  f7fffffe          BL       ShellPrintf
0031d6  201b              MOVS     r0,#0x1b              ;3923
0031d8  f7fffffe          BL       ShellPutByte
0031dc  a0f5              ADR      r0,|L1.13748|
0031de  f7fffffe          BL       ShellPrintf
0031e2  7ce1              LDRB     r1,[r4,#0x13]         ;3923
0031e4  a0f4              ADR      r0,|L1.13752|
0031e6  f7fffffe          BL       ShellPrintf
0031ea  a0fb              ADR      r0,|L1.13784|
0031ec  f7fffffe          BL       ShellPrintf
0031f0  201b              MOVS     r0,#0x1b              ;3925
0031f2  f7fffffe          BL       ShellPutByte
0031f6  48ee              LDR      r0,|L1.13744|
0031f8  f7fffffe          BL       ShellPrintf
0031fc  201b              MOVS     r0,#0x1b              ;3925
0031fe  f7fffffe          BL       ShellPutByte
003202  a0ec              ADR      r0,|L1.13748|
003204  f7fffffe          BL       ShellPrintf
003208  7ca1              LDRB     r1,[r4,#0x12]         ;3925
00320a  a0f4              ADR      r0,|L1.13788|
00320c  f7fffffe          BL       ShellPrintf
003210  a0f1              ADR      r0,|L1.13784|
003212  f7fffffe          BL       ShellPrintf
003216  201b              MOVS     r0,#0x1b              ;3927
003218  f7fffffe          BL       ShellPutByte
00321c  48e4              LDR      r0,|L1.13744|
00321e  f7fffffe          BL       ShellPrintf
003222  201b              MOVS     r0,#0x1b              ;3927
003224  f7fffffe          BL       ShellPutByte
003228  a0e2              ADR      r0,|L1.13748|
00322a  f7fffffe          BL       ShellPrintf
00322e  7c61              LDRB     r1,[r4,#0x11]         ;3927
003230  a0f2              ADR      r0,|L1.13820|
003232  f7fffffe          BL       ShellPrintf
003236  a0e8              ADR      r0,|L1.13784|
003238  f7fffffe          BL       ShellPrintf
00323c  201b              MOVS     r0,#0x1b              ;3929
00323e  f7fffffe          BL       ShellPutByte
003242  48db              LDR      r0,|L1.13744|
003244  f7fffffe          BL       ShellPrintf
003248  201b              MOVS     r0,#0x1b              ;3929
00324a  f7fffffe          BL       ShellPutByte
00324e  a0d9              ADR      r0,|L1.13748|
003250  f7fffffe          BL       ShellPrintf
003254  7c21              LDRB     r1,[r4,#0x10]         ;3929
003256  a0f1              ADR      r0,|L1.13852|
003258  f7fffffe          BL       ShellPrintf
00325c  a0de              ADR      r0,|L1.13784|
00325e  f7fffffe          BL       ShellPrintf
003262  201b              MOVS     r0,#0x1b              ;3931
003264  f7fffffe          BL       ShellPutByte
003268  48d1              LDR      r0,|L1.13744|
00326a  f7fffffe          BL       ShellPrintf
00326e  201b              MOVS     r0,#0x1b              ;3931
003270  f7fffffe          BL       ShellPutByte
003274  a0cf              ADR      r0,|L1.13748|
003276  f7fffffe          BL       ShellPrintf
00327a  7b21              LDRB     r1,[r4,#0xc]          ;3931
00327c  a0ef              ADR      r0,|L1.13884|
00327e  f7fffffe          BL       ShellPrintf
003282  a0d5              ADR      r0,|L1.13784|
003284  f7fffffe          BL       ShellPrintf
003288  201b              MOVS     r0,#0x1b              ;3933
00328a  f7fffffe          BL       ShellPutByte
00328e  48c8              LDR      r0,|L1.13744|
003290  f7fffffe          BL       ShellPrintf
003294  201b              MOVS     r0,#0x1b              ;3933
003296  f7fffffe          BL       ShellPutByte
00329a  a0c6              ADR      r0,|L1.13748|
00329c  f7fffffe          BL       ShellPrintf
0032a0  7aa1              LDRB     r1,[r4,#0xa]          ;3933
0032a2  a0ee              ADR      r0,|L1.13916|
0032a4  f7fffffe          BL       ShellPrintf
0032a8  a0cb              ADR      r0,|L1.13784|
0032aa  f7fffffe          BL       ShellPrintf
0032ae  201b              MOVS     r0,#0x1b              ;3935
0032b0  f7fffffe          BL       ShellPutByte
0032b4  48be              LDR      r0,|L1.13744|
0032b6  f7fffffe          BL       ShellPrintf
0032ba  201b              MOVS     r0,#0x1b              ;3935
0032bc  f7fffffe          BL       ShellPutByte
0032c0  a0bc              ADR      r0,|L1.13748|
0032c2  f7fffffe          BL       ShellPrintf
0032c6  7a21              LDRB     r1,[r4,#8]            ;3935
0032c8  a0ec              ADR      r0,|L1.13948|
0032ca  f7fffffe          BL       ShellPrintf
0032ce  a0c2              ADR      r0,|L1.13784|
0032d0  f7fffffe          BL       ShellPrintf
0032d4  201b              MOVS     r0,#0x1b              ;3937
0032d6  f7fffffe          BL       ShellPutByte
0032da  48b5              LDR      r0,|L1.13744|
0032dc  f7fffffe          BL       ShellPrintf
0032e0  201b              MOVS     r0,#0x1b              ;3937
0032e2  f7fffffe          BL       ShellPutByte
0032e6  a0b3              ADR      r0,|L1.13748|
0032e8  f7fffffe          BL       ShellPrintf
0032ec  79e1              LDRB     r1,[r4,#7]            ;3937
0032ee  a0eb              ADR      r0,|L1.13980|
0032f0  f7fffffe          BL       ShellPrintf
0032f4  a0b8              ADR      r0,|L1.13784|
0032f6  f7fffffe          BL       ShellPrintf
0032fa  201b              MOVS     r0,#0x1b              ;3939
0032fc  f7fffffe          BL       ShellPutByte
003300  48ab              LDR      r0,|L1.13744|
003302  f7fffffe          BL       ShellPrintf
003306  201b              MOVS     r0,#0x1b              ;3939
003308  f7fffffe          BL       ShellPutByte
00330c  a0a9              ADR      r0,|L1.13748|
00330e  f7fffffe          BL       ShellPrintf
003312  7961              LDRB     r1,[r4,#5]            ;3939
003314  a0e9              ADR      r0,|L1.14012|
003316  f7fffffe          BL       ShellPrintf
00331a  a0af              ADR      r0,|L1.13784|
00331c  f7fffffe          BL       ShellPrintf
003320  201b              MOVS     r0,#0x1b              ;3941
003322  f7fffffe          BL       ShellPutByte
003326  48a2              LDR      r0,|L1.13744|
003328  f7fffffe          BL       ShellPrintf
00332c  201b              MOVS     r0,#0x1b              ;3941
00332e  f7fffffe          BL       ShellPutByte
003332  a0a0              ADR      r0,|L1.13748|
003334  f7fffffe          BL       ShellPrintf
003338  78e1              LDRB     r1,[r4,#3]            ;3941
00333a  a0e8              ADR      r0,|L1.14044|
00333c  f7fffffe          BL       ShellPrintf
003340  a0a5              ADR      r0,|L1.13784|
003342  f7fffffe          BL       ShellPrintf
003346  201b              MOVS     r0,#0x1b              ;3943
003348  f7fffffe          BL       ShellPutByte
00334c  4898              LDR      r0,|L1.13744|
00334e  f7fffffe          BL       ShellPrintf
003352  201b              MOVS     r0,#0x1b              ;3943
003354  f7fffffe          BL       ShellPutByte
003358  a096              ADR      r0,|L1.13748|
00335a  f7fffffe          BL       ShellPrintf
00335e  7861              LDRB     r1,[r4,#1]            ;3943
003360  a0e6              ADR      r0,|L1.14076|
003362  f7fffffe          BL       ShellPrintf
003366  a09c              ADR      r0,|L1.13784|
003368  f7fffffe          BL       ShellPrintf
00336c  201b              MOVS     r0,#0x1b              ;3945
00336e  f7fffffe          BL       ShellPutByte
003372  488f              LDR      r0,|L1.13744|
003374  f7fffffe          BL       ShellPrintf
003378  201b              MOVS     r0,#0x1b              ;3945
00337a  f7fffffe          BL       ShellPutByte
00337e  a08d              ADR      r0,|L1.13748|
003380  f7fffffe          BL       ShellPrintf
003384  36e0              ADDS     r6,r6,#0xe0           ;3945
003386  7ff1              LDRB     r1,[r6,#0x1f]         ;3945
003388  a0e4              ADR      r0,|L1.14108|
00338a  f7fffffe          BL       ShellPrintf
00338e  a092              ADR      r0,|L1.13784|
003390  f7fffffe          BL       ShellPrintf
003394  201b              MOVS     r0,#0x1b              ;3947
003396  f7fffffe          BL       ShellPutByte
00339a  4885              LDR      r0,|L1.13744|
00339c  f7fffffe          BL       ShellPrintf
0033a0  201b              MOVS     r0,#0x1b              ;3947
0033a2  f7fffffe          BL       ShellPutByte
0033a6  a083              ADR      r0,|L1.13748|
0033a8  f7fffffe          BL       ShellPrintf
0033ac  7f71              LDRB     r1,[r6,#0x1d]         ;3947
0033ae  a0e3              ADR      r0,|L1.14140|
0033b0  f7fffffe          BL       ShellPrintf
0033b4  a088              ADR      r0,|L1.13784|
0033b6  f7fffffe          BL       ShellPrintf
0033ba  201b              MOVS     r0,#0x1b              ;3949
0033bc  f7fffffe          BL       ShellPutByte
0033c0  487b              LDR      r0,|L1.13744|
0033c2  f7fffffe          BL       ShellPrintf
0033c6  201b              MOVS     r0,#0x1b              ;3949
0033c8  f7fffffe          BL       ShellPutByte
0033cc  a079              ADR      r0,|L1.13748|
0033ce  f7fffffe          BL       ShellPrintf
0033d2  7ef1              LDRB     r1,[r6,#0x1b]         ;3949
0033d4  a0e1              ADR      r0,|L1.14172|
0033d6  f7fffffe          BL       ShellPrintf
0033da  a07f              ADR      r0,|L1.13784|
0033dc  f7fffffe          BL       ShellPrintf
0033e0  201b              MOVS     r0,#0x1b              ;3951
0033e2  f7fffffe          BL       ShellPutByte
0033e6  4872              LDR      r0,|L1.13744|
0033e8  f7fffffe          BL       ShellPrintf
0033ec  201b              MOVS     r0,#0x1b              ;3951
0033ee  f7fffffe          BL       ShellPutByte
0033f2  a070              ADR      r0,|L1.13748|
0033f4  f7fffffe          BL       ShellPrintf
0033f8  7e71              LDRB     r1,[r6,#0x19]         ;3951
0033fa  a0e0              ADR      r0,|L1.14204|
0033fc  f7fffffe          BL       ShellPrintf
003400  a075              ADR      r0,|L1.13784|
003402  f7fffffe          BL       ShellPrintf
003406  201b              MOVS     r0,#0x1b              ;3953
003408  f7fffffe          BL       ShellPutByte
00340c  4868              LDR      r0,|L1.13744|
00340e  f7fffffe          BL       ShellPrintf
003412  201b              MOVS     r0,#0x1b              ;3953
003414  f7fffffe          BL       ShellPutByte
003418  a066              ADR      r0,|L1.13748|
00341a  f7fffffe          BL       ShellPrintf
00341e  7df1              LDRB     r1,[r6,#0x17]         ;3953
003420  a0de              ADR      r0,|L1.14236|
003422  f7fffffe          BL       ShellPrintf
003426  a06c              ADR      r0,|L1.13784|
003428  f7fffffe          BL       ShellPrintf
00342c  bd70              POP      {r4-r6,pc}
;;;3956   
                          ENDP

                  SD_DisplayRegisterSCR PROC
;;;3960   //------------------------------------------------------------------------------
;;;3961   void SD_DisplayRegisterSCR(SdCard *pSd)
00342e  b510              PUSH     {r4,lr}
;;;3962   { 
003430  0004              MOVS     r4,r0
;;;3963       if (pSd->cardType >= CARD_SD && pSd->cardType <= CARD_SDHC) {}
003432  2009              MOVS     r0,#9
003434  0180              LSLS     r0,r0,#6
003436  1820              ADDS     r0,r4,r0
003438  7f80              LDRB     r0,[r0,#0x1e]
00343a  1e80              SUBS     r0,r0,#2
00343c  2801              CMP      r0,#1
00343e  d912              BLS      |L1.13414|
;;;3964       else {
;;;3965           TRACE_INFO("** SCR NOT Supported!\n\r");
003440  201b              MOVS     r0,#0x1b
003442  f7fffffe          BL       ShellPutByte
003446  485a              LDR      r0,|L1.13744|
003448  f7fffffe          BL       ShellPrintf
00344c  201b              MOVS     r0,#0x1b
00344e  f7fffffe          BL       ShellPutByte
003452  a058              ADR      r0,|L1.13748|
003454  f7fffffe          BL       ShellPrintf
003458  a0d8              ADR      r0,|L1.14268|
00345a  f7fffffe          BL       ShellPrintf
00345e  a05e              ADR      r0,|L1.13784|
003460  f7fffffe          BL       ShellPrintf
;;;3966           return;
;;;3967       }
;;;3968       TRACE_INFO("========== SCR ==========");
;;;3969     #if 0
;;;3970     {
;;;3971       unsigned int i;
;;;3972       unsigned char *p = (unsigned char*)pSd->extData;
;;;3973       //TRACE_INFO_WP("\n\r");
;;;3974       //TRACE_INFO("DATA @ 0x%X", (unsigned int)p);
;;;3975       for(i = 0; i < 16; i ++) {
;;;3976           if ((i % 8) == 0) TRACE_INFO_WP("\n\r [%3d]:", i);
;;;3977           TRACE_INFO_WP(" %02x", p[i]);
;;;3978       }
;;;3979       TRACE_INFO_WP("\n\r");
;;;3980       TRACE_INFO("------------------------\n\r");
;;;3981     }
;;;3982     #else
;;;3983       TRACE_INFO_WP("\n\r");
;;;3984     #endif
;;;3985   
;;;3986       TRACE_INFO(" .SCR_STRUCTURE         :0x%X\n\r",
;;;3987           SD_SCR_SCR_STRUCTURE(pSd));
;;;3988       TRACE_INFO(" .SD_SPEC               :0x%X\n\r",
;;;3989           SD_SCR_SD_SPEC(pSd));
;;;3990       TRACE_INFO(" .DATA_STAT_AFTER_ERASE :0x%X\n\r",
;;;3991           SD_SCR_DATA_STAT_AFTER_ERASE(pSd));
;;;3992       TRACE_INFO(" .SD_SECURITY           :0x%X\n\r",
;;;3993           SD_SCR_SD_SECURITY(pSd));
;;;3994       TRACE_INFO(" .SD_BUS_WIDTHS         :0x%X\n\r",
;;;3995           SD_SCR_SD_BUS_WIDTHS(pSd));
;;;3996   }
003464  bd10              POP      {r4,pc}
                  |L1.13414|
003466  201b              MOVS     r0,#0x1b              ;3968
003468  f7fffffe          BL       ShellPutByte
00346c  4850              LDR      r0,|L1.13744|
00346e  f7fffffe          BL       ShellPrintf
003472  201b              MOVS     r0,#0x1b              ;3968
003474  f7fffffe          BL       ShellPutByte
003478  a04e              ADR      r0,|L1.13748|
00347a  f7fffffe          BL       ShellPrintf
00347e  a0d5              ADR      r0,|L1.14292|
003480  f7fffffe          BL       ShellPrintf
003484  a054              ADR      r0,|L1.13784|
003486  f7fffffe          BL       ShellPrintf
00348a  201b              MOVS     r0,#0x1b              ;3983
00348c  f7fffffe          BL       ShellPutByte
003490  4847              LDR      r0,|L1.13744|
003492  f7fffffe          BL       ShellPrintf
003496  201b              MOVS     r0,#0x1b              ;3983
003498  f7fffffe          BL       ShellPutByte
00349c  a045              ADR      r0,|L1.13748|
00349e  f7fffffe          BL       ShellPrintf
0034a2  a04d              ADR      r0,|L1.13784|
0034a4  f7fffffe          BL       ShellPrintf
0034a8  201b              MOVS     r0,#0x1b              ;3986
0034aa  f7fffffe          BL       ShellPutByte
0034ae  4840              LDR      r0,|L1.13744|
0034b0  f7fffffe          BL       ShellPrintf
0034b4  201b              MOVS     r0,#0x1b              ;3986
0034b6  f7fffffe          BL       ShellPutByte
0034ba  a03e              ADR      r0,|L1.13748|
0034bc  f7fffffe          BL       ShellPrintf
0034c0  3440              ADDS     r4,r4,#0x40           ;3986
0034c2  7a20              LDRB     r0,[r4,#8]            ;3986
0034c4  0901              LSRS     r1,r0,#4              ;3986
0034c6  a0ca              ADR      r0,|L1.14320|
0034c8  f7fffffe          BL       ShellPrintf
0034cc  a042              ADR      r0,|L1.13784|
0034ce  f7fffffe          BL       ShellPrintf
0034d2  201b              MOVS     r0,#0x1b              ;3988
0034d4  f7fffffe          BL       ShellPutByte
0034d8  4835              LDR      r0,|L1.13744|
0034da  f7fffffe          BL       ShellPrintf
0034de  201b              MOVS     r0,#0x1b              ;3988
0034e0  f7fffffe          BL       ShellPutByte
0034e4  a033              ADR      r0,|L1.13748|
0034e6  f7fffffe          BL       ShellPrintf
0034ea  7a20              LDRB     r0,[r4,#8]            ;3988
0034ec  0701              LSLS     r1,r0,#28             ;3988
0034ee  0f09              LSRS     r1,r1,#28             ;3988
0034f0  a0c7              ADR      r0,|L1.14352|
0034f2  f7fffffe          BL       ShellPrintf
0034f6  a038              ADR      r0,|L1.13784|
0034f8  f7fffffe          BL       ShellPrintf
0034fc  201b              MOVS     r0,#0x1b              ;3990
0034fe  f7fffffe          BL       ShellPutByte
003502  482b              LDR      r0,|L1.13744|
003504  f7fffffe          BL       ShellPrintf
003508  201b              MOVS     r0,#0x1b              ;3990
00350a  f7fffffe          BL       ShellPutByte
00350e  a029              ADR      r0,|L1.13748|
003510  f7fffffe          BL       ShellPrintf
003514  7a60              LDRB     r0,[r4,#9]            ;3990
003516  09c1              LSRS     r1,r0,#7              ;3990
003518  a0c5              ADR      r0,|L1.14384|
00351a  f7fffffe          BL       ShellPrintf
00351e  a02e              ADR      r0,|L1.13784|
003520  f7fffffe          BL       ShellPrintf
003524  201b              MOVS     r0,#0x1b              ;3992
003526  f7fffffe          BL       ShellPutByte
00352a  4821              LDR      r0,|L1.13744|
00352c  f7fffffe          BL       ShellPrintf
003530  201b              MOVS     r0,#0x1b              ;3992
003532  f7fffffe          BL       ShellPutByte
003536  a01f              ADR      r0,|L1.13748|
003538  f7fffffe          BL       ShellPrintf
00353c  7a60              LDRB     r0,[r4,#9]            ;3992
00353e  0640              LSLS     r0,r0,#25             ;3992
003540  0f41              LSRS     r1,r0,#29             ;3992
003542  a0c3              ADR      r0,|L1.14416|
003544  f7fffffe          BL       ShellPrintf
003548  a023              ADR      r0,|L1.13784|
00354a  f7fffffe          BL       ShellPrintf
00354e  201b              MOVS     r0,#0x1b              ;3994
003550  f7fffffe          BL       ShellPutByte
003554  4816              LDR      r0,|L1.13744|
003556  f7fffffe          BL       ShellPrintf
00355a  201b              MOVS     r0,#0x1b              ;3994
00355c  f7fffffe          BL       ShellPutByte
003560  a014              ADR      r0,|L1.13748|
003562  f7fffffe          BL       ShellPrintf
003566  7a60              LDRB     r0,[r4,#9]            ;3994
003568  0701              LSLS     r1,r0,#28             ;3994
00356a  0f09              LSRS     r1,r1,#28             ;3994
00356c  a0c0              ADR      r0,|L1.14448|
00356e  f7fffffe          BL       ShellPrintf
003572  a019              ADR      r0,|L1.13784|
003574  f7fffffe          BL       ShellPrintf
003578  bd10              POP      {r4,pc}
;;;3997   
                          ENDP

                  SD_DisplaySdStatus PROC
;;;4001   //------------------------------------------------------------------------------
;;;4002   void SD_DisplaySdStatus(SdCard *pSd)
00357a  b510              PUSH     {r4,lr}
;;;4003   {
00357c  0004              MOVS     r4,r0
;;;4004       if (   pSd->cardType >= CARD_SD
00357e  2009              MOVS     r0,#9
003580  0180              LSLS     r0,r0,#6
003582  1821              ADDS     r1,r4,r0
003584  7f88              LDRB     r0,[r1,#0x1e]
003586  1e80              SUBS     r0,r0,#2
003588  2801              CMP      r0,#1
00358a  d802              BHI      |L1.13714|
;;;4005           && pSd->cardType <= CARD_SDHC
;;;4006           && (pSd->optCmdBitMap & SD_ACMD13_SUPPORT) ) {}
00358c  6948              LDR      r0,[r1,#0x14]
00358e  0780              LSLS     r0,r0,#30
003590  d40c              BMI      |L1.13740|
                  |L1.13714|
;;;4007       else {
;;;4008           TRACE_INFO("** SD Status NOT Supported!\n\r");
003592  201b              MOVS     r0,#0x1b
003594  f7fffffe          BL       ShellPutByte
003598  4805              LDR      r0,|L1.13744|
00359a  f7fffffe          BL       ShellPrintf
00359e  201b              MOVS     r0,#0x1b
0035a0  f7fffffe          BL       ShellPutByte
0035a4  a003              ADR      r0,|L1.13748|
0035a6  f7fffffe          BL       ShellPrintf
0035aa  e171              B        |L1.14480|
                  |L1.13740|
0035ac  e177              B        |L1.14494|
0035ae  0000              DCW      0x0000
                  |L1.13744|
                          DCD      ||.text||+0x1d44
                  |L1.13748|
0035b4  5b6d00            DCB      "[m",0
0035b7  00                DCB      0
                  |L1.13752|
0035b8  202e5057          DCB      " .PWR_CL_26_360        : 0x%X\n\r",0
0035bc  525f434c
0035c0  5f32365f
0035c4  33363020
0035c8  20202020
0035cc  2020203a
0035d0  20307825
0035d4  580a0d00
                  |L1.13784|
0035d8  0a0d00            DCB      "\n\r",0
0035db  00                DCB      0
                  |L1.13788|
0035dc  202e5057          DCB      " .PWR_CL_52_360        : 0x%X\n\r",0
0035e0  525f434c
0035e4  5f35325f
0035e8  33363020
0035ec  20202020
0035f0  2020203a
0035f4  20307825
0035f8  580a0d00
                  |L1.13820|
0035fc  202e5057          DCB      " .PWR_CL_26_195        : 0x%X\n\r",0
003600  525f434c
003604  5f32365f
003608  31393520
00360c  20202020
003610  2020203a
003614  20307825
003618  580a0d00
                  |L1.13852|
00361c  202e5057          DCB      " .PWR_CL_52_195        : 0x%X\n\r",0
003620  525f434c
003624  5f35325f
003628  31393520
00362c  20202020
003630  2020203a
003634  20307825
003638  580a0d00
                  |L1.13884|
00363c  202e4341          DCB      " .CARD_TYPE            : 0x%X\n\r",0
003640  52445f54
003644  59504520
003648  20202020
00364c  20202020
003650  2020203a
003654  20307825
003658  580a0d00
                  |L1.13916|
00365c  202e4353          DCB      " .CSD_STRUCTURE        : 0x%X\n\r",0
003660  445f5354
003664  52554354
003668  55524520
00366c  20202020
003670  2020203a
003674  20307825
003678  580a0d00
                  |L1.13948|
00367c  202e4558          DCB      " .EXT_CSD_REV          : 0x%X\n\r",0
003680  545f4353
003684  445f5245
003688  56202020
00368c  20202020
003690  2020203a
003694  20307825
003698  580a0d00
                  |L1.13980|
00369c  202e434d          DCB      " .CMD_SET              : 0x%X\n\r",0
0036a0  445f5345
0036a4  54202020
0036a8  20202020
0036ac  20202020
0036b0  2020203a
0036b4  20307825
0036b8  580a0d00
                  |L1.14012|
0036bc  202e434d          DCB      " .CMD_SET_REV          : 0x%X\n\r",0
0036c0  445f5345
0036c4  545f5245
0036c8  56202020
0036cc  20202020
0036d0  2020203a
0036d4  20307825
0036d8  580a0d00
                  |L1.14044|
0036dc  202e504f          DCB      " .POWER_CLASS          : 0x%X\n\r",0
0036e0  5745525f
0036e4  434c4153
0036e8  53202020
0036ec  20202020
0036f0  2020203a
0036f4  20307825
0036f8  580a0d00
                  |L1.14076|
0036fc  202e4853          DCB      " .HS_TIMING            : 0x%X\n\r",0
003700  5f54494d
003704  494e4720
003708  20202020
00370c  20202020
003710  2020203a
003714  20307825
003718  580a0d00
                  |L1.14108|
00371c  202e4255          DCB      " .BUS_WIDTH            : 0x%X\n\r",0
003720  535f5749
003724  44544820
003728  20202020
00372c  20202020
003730  2020203a
003734  20307825
003738  580a0d00
                  |L1.14140|
00373c  202e4552          DCB      " .ERASED_MEM_CONT      : 0x%X\n\r",0
003740  41534544
003744  5f4d454d
003748  5f434f4e
00374c  54202020
003750  2020203a
003754  20307825
003758  580a0d00
                  |L1.14172|
00375c  202e424f          DCB      " .BOOT_CONFIG          : 0x%X\n\r",0
003760  4f545f43
003764  4f4e4649
003768  47202020
00376c  20202020
003770  2020203a
003774  20307825
003778  580a0d00
                  |L1.14204|
00377c  202e424f          DCB      " .BOOT_BUS_WIDTH       : 0x%X\n\r",0
003780  4f545f42
003784  55535f57
003788  49445448
00378c  20202020
003790  2020203a
003794  20307825
003798  580a0d00
                  |L1.14236|
00379c  202e4552          DCB      " .ERASE_GROUP_DEF      : 0x%X\n\r",0
0037a0  4153455f
0037a4  47524f55
0037a8  505f4445
0037ac  46202020
0037b0  2020203a
0037b4  20307825
0037b8  580a0d00
                  |L1.14268|
0037bc  2a2a2053          DCB      "** SCR NOT Supported!\n\r",0
0037c0  4352204e
0037c4  4f542053
0037c8  7570706f
0037cc  72746564
0037d0  210a0d00
                  |L1.14292|
0037d4  3d3d3d3d          DCB      "========== SCR ==========",0
0037d8  3d3d3d3d
0037dc  3d3d2053
0037e0  4352203d
0037e4  3d3d3d3d
0037e8  3d3d3d3d
0037ec  3d00    
0037ee  00                DCB      0
0037ef  00                DCB      0
                  |L1.14320|
0037f0  202e5343          DCB      " .SCR_STRUCTURE         :0x%X\n\r",0
0037f4  525f5354
0037f8  52554354
0037fc  55524520
003800  20202020
003804  20202020
003808  3a307825
00380c  580a0d00
                  |L1.14352|
003810  202e5344          DCB      " .SD_SPEC               :0x%X\n\r",0
003814  5f535045
003818  43202020
00381c  20202020
003820  20202020
003824  20202020
003828  3a307825
00382c  580a0d00
                  |L1.14384|
003830  202e4441          DCB      " .DATA_STAT_AFTER_ERASE :0x%X\n\r",0
003834  54415f53
003838  5441545f
00383c  41465445
003840  525f4552
003844  41534520
003848  3a307825
00384c  580a0d00
                  |L1.14416|
003850  202e5344          DCB      " .SD_SECURITY           :0x%X\n\r",0
003854  5f534543
003858  55524954
00385c  59202020
003860  20202020
003864  20202020
003868  3a307825
00386c  580a0d00
                  |L1.14448|
003870  202e5344          DCB      " .SD_BUS_WIDTHS         :0x%X\n\r",0
003874  5f425553
003878  5f574944
00387c  54485320
003880  20202020
003884  20202020
003888  3a307825
00388c  580a0d00
                  |L1.14480|
003890  a07e              ADR      r0,|L1.14988|
003892  f7fffffe          BL       ShellPrintf
003896  a085              ADR      r0,|L1.15020|
003898  f7fffffe          BL       ShellPrintf
;;;4009           return;
;;;4010       }
;;;4011       TRACE_INFO("=========== STAT ============");
;;;4012     #if 0
;;;4013     {
;;;4014       unsigned int i;
;;;4015       unsigned char *p = (unsigned char*)pSd->extData;
;;;4016       //TRACE_INFO_WP("\n\r");
;;;4017       //TRACE_INFO("DATA @ 0x%X", (unsigned int)p);
;;;4018       for(i = 0; i < 72; i ++) {
;;;4019           if ((i % 8) == 0) TRACE_INFO_WP("\n\r [%3d]:", i);
;;;4020           TRACE_INFO_WP(" %02x", p[i]);
;;;4021       }
;;;4022       TRACE_INFO_WP("\n\r");
;;;4023       TRACE_INFO("------------------------\n\r");
;;;4024     }
;;;4025     #else
;;;4026       TRACE_INFO_WP("\n\r");
;;;4027     #endif
;;;4028   
;;;4029       TRACE_INFO(" .DAT_BUS_WIDTH          :0x%X\n\r",
;;;4030           SD_STAT_DAT_BUS_WIDTH(pSd));
;;;4031       TRACE_INFO(" .SECURED_MODE           :0x%X\n\r",
;;;4032           SD_STAT_SECURED_MODE(pSd));
;;;4033       TRACE_INFO(" .SD_CARD_TYPE           :0x%X\n\r",
;;;4034           SD_STAT_SD_CARD_TYPE(pSd));
;;;4035       TRACE_INFO(" .SIZE_OF_PROTECTED_AREA :0x%X\n\r",
;;;4036           SD_STAT_SIZE_OF_PROTECTED_AREA(pSd));
;;;4037       TRACE_INFO(" .SPEED_CLASS            :0x%X\n\r",
;;;4038           SD_STAT_SPEED_CLASS(pSd));
;;;4039       TRACE_INFO(" .PERFORMANCE_MOVE       :0x%X\n\r",
;;;4040           SD_STAT_PERFORMANCE_MOVE(pSd));
;;;4041       TRACE_INFO(" .AU_SIZE                :0x%X\n\r",
;;;4042           SD_STAT_AU_SIZE(pSd));
;;;4043       TRACE_INFO(" .ERASE_SIZE             :0x%X\n\r",
;;;4044           SD_STAT_ERASE_SIZE(pSd));
;;;4045       TRACE_INFO(" .ERASE_TIMEOUT          :0x%X\n\r",
;;;4046           SD_STAT_ERASE_TIMEOUT(pSd));
;;;4047       TRACE_INFO(" .ERASE_OFFSET           :0x%X\n\r",
;;;4048           SD_STAT_ERASE_OFFSET(pSd));
;;;4049   }
00389c  bd10              POP      {r4,pc}
                  |L1.14494|
00389e  201b              MOVS     r0,#0x1b              ;4011
0038a0  f7fffffe          BL       ShellPutByte
0038a4  4882              LDR      r0,|L1.15024|
0038a6  f7fffffe          BL       ShellPrintf
0038aa  201b              MOVS     r0,#0x1b              ;4011
0038ac  f7fffffe          BL       ShellPutByte
0038b0  a080              ADR      r0,|L1.15028|
0038b2  f7fffffe          BL       ShellPrintf
0038b6  a080              ADR      r0,|L1.15032|
0038b8  f7fffffe          BL       ShellPrintf
0038bc  a07b              ADR      r0,|L1.15020|
0038be  f7fffffe          BL       ShellPrintf
0038c2  201b              MOVS     r0,#0x1b              ;4026
0038c4  f7fffffe          BL       ShellPutByte
0038c8  4879              LDR      r0,|L1.15024|
0038ca  f7fffffe          BL       ShellPrintf
0038ce  201b              MOVS     r0,#0x1b              ;4026
0038d0  f7fffffe          BL       ShellPutByte
0038d4  a077              ADR      r0,|L1.15028|
0038d6  f7fffffe          BL       ShellPrintf
0038da  a074              ADR      r0,|L1.15020|
0038dc  f7fffffe          BL       ShellPrintf
0038e0  201b              MOVS     r0,#0x1b              ;4029
0038e2  f7fffffe          BL       ShellPutByte
0038e6  4872              LDR      r0,|L1.15024|
0038e8  f7fffffe          BL       ShellPrintf
0038ec  201b              MOVS     r0,#0x1b              ;4029
0038ee  f7fffffe          BL       ShellPutByte
0038f2  a070              ADR      r0,|L1.15028|
0038f4  f7fffffe          BL       ShellPrintf
0038f8  3440              ADDS     r4,r4,#0x40           ;4029
0038fa  7c20              LDRB     r0,[r4,#0x10]         ;4029
0038fc  0981              LSRS     r1,r0,#6              ;4029
0038fe  a076              ADR      r0,|L1.15064|
003900  f7fffffe          BL       ShellPrintf
003904  a069              ADR      r0,|L1.15020|
003906  f7fffffe          BL       ShellPrintf
00390a  201b              MOVS     r0,#0x1b              ;4031
00390c  f7fffffe          BL       ShellPutByte
003910  4867              LDR      r0,|L1.15024|
003912  f7fffffe          BL       ShellPrintf
003916  201b              MOVS     r0,#0x1b              ;4031
003918  f7fffffe          BL       ShellPutByte
00391c  a065              ADR      r0,|L1.15028|
00391e  f7fffffe          BL       ShellPrintf
003922  7c20              LDRB     r0,[r4,#0x10]         ;4031
003924  0680              LSLS     r0,r0,#26             ;4031
003926  0fc1              LSRS     r1,r0,#31             ;4031
003928  a074              ADR      r0,|L1.15100|
00392a  f7fffffe          BL       ShellPrintf
00392e  a05f              ADR      r0,|L1.15020|
003930  f7fffffe          BL       ShellPrintf
003934  201b              MOVS     r0,#0x1b              ;4033
003936  f7fffffe          BL       ShellPutByte
00393a  485d              LDR      r0,|L1.15024|
00393c  f7fffffe          BL       ShellPrintf
003940  201b              MOVS     r0,#0x1b              ;4033
003942  f7fffffe          BL       ShellPutByte
003946  a05b              ADR      r0,|L1.15028|
003948  f7fffffe          BL       ShellPrintf
00394c  7ca1              LDRB     r1,[r4,#0x12]         ;4033
00394e  7ce0              LDRB     r0,[r4,#0x13]         ;4033
003950  0209              LSLS     r1,r1,#8              ;4033
003952  1841              ADDS     r1,r0,r1              ;4033
003954  a072              ADR      r0,|L1.15136|
003956  f7fffffe          BL       ShellPrintf
00395a  a054              ADR      r0,|L1.15020|
00395c  f7fffffe          BL       ShellPrintf
003960  201b              MOVS     r0,#0x1b              ;4035
003962  f7fffffe          BL       ShellPutByte
003966  4852              LDR      r0,|L1.15024|
003968  f7fffffe          BL       ShellPrintf
00396c  201b              MOVS     r0,#0x1b              ;4035
00396e  f7fffffe          BL       ShellPutByte
003972  a050              ADR      r0,|L1.15028|
003974  f7fffffe          BL       ShellPrintf
003978  7da1              LDRB     r1,[r4,#0x16]         ;4035
00397a  7de0              LDRB     r0,[r4,#0x17]         ;4035
00397c  7d22              LDRB     r2,[r4,#0x14]         ;4035
00397e  0209              LSLS     r1,r1,#8              ;4035
003980  1840              ADDS     r0,r0,r1              ;4035
003982  7d61              LDRB     r1,[r4,#0x15]         ;4035
003984  0612              LSLS     r2,r2,#24             ;4035
003986  0409              LSLS     r1,r1,#16             ;4035
003988  1889              ADDS     r1,r1,r2              ;4035
00398a  1841              ADDS     r1,r0,r1              ;4035
00398c  a06d              ADR      r0,|L1.15172|
00398e  f7fffffe          BL       ShellPrintf
003992  a046              ADR      r0,|L1.15020|
003994  f7fffffe          BL       ShellPrintf
003998  201b              MOVS     r0,#0x1b              ;4037
00399a  f7fffffe          BL       ShellPutByte
00399e  4844              LDR      r0,|L1.15024|
0039a0  f7fffffe          BL       ShellPrintf
0039a4  201b              MOVS     r0,#0x1b              ;4037
0039a6  f7fffffe          BL       ShellPutByte
0039aa  a042              ADR      r0,|L1.15028|
0039ac  f7fffffe          BL       ShellPrintf
0039b0  7e21              LDRB     r1,[r4,#0x18]         ;4037
0039b2  a06d              ADR      r0,|L1.15208|
0039b4  f7fffffe          BL       ShellPrintf
0039b8  a03c              ADR      r0,|L1.15020|
0039ba  f7fffffe          BL       ShellPrintf
0039be  201b              MOVS     r0,#0x1b              ;4039
0039c0  f7fffffe          BL       ShellPutByte
0039c4  483a              LDR      r0,|L1.15024|
0039c6  f7fffffe          BL       ShellPrintf
0039ca  201b              MOVS     r0,#0x1b              ;4039
0039cc  f7fffffe          BL       ShellPutByte
0039d0  a038              ADR      r0,|L1.15028|
0039d2  f7fffffe          BL       ShellPrintf
0039d6  7e61              LDRB     r1,[r4,#0x19]         ;4039
0039d8  a06c              ADR      r0,|L1.15244|
0039da  f7fffffe          BL       ShellPrintf
0039de  a033              ADR      r0,|L1.15020|
0039e0  f7fffffe          BL       ShellPrintf
0039e4  201b              MOVS     r0,#0x1b              ;4041
0039e6  f7fffffe          BL       ShellPutByte
0039ea  4831              LDR      r0,|L1.15024|
0039ec  f7fffffe          BL       ShellPrintf
0039f0  201b              MOVS     r0,#0x1b              ;4041
0039f2  f7fffffe          BL       ShellPutByte
0039f6  a02f              ADR      r0,|L1.15028|
0039f8  f7fffffe          BL       ShellPrintf
0039fc  7ea0              LDRB     r0,[r4,#0x1a]         ;4041
0039fe  0901              LSRS     r1,r0,#4              ;4041
003a00  a06b              ADR      r0,|L1.15280|
003a02  f7fffffe          BL       ShellPrintf
003a06  a029              ADR      r0,|L1.15020|
003a08  f7fffffe          BL       ShellPrintf
003a0c  201b              MOVS     r0,#0x1b              ;4043
003a0e  f7fffffe          BL       ShellPutByte
003a12  4827              LDR      r0,|L1.15024|
003a14  f7fffffe          BL       ShellPrintf
003a18  201b              MOVS     r0,#0x1b              ;4043
003a1a  f7fffffe          BL       ShellPutByte
003a1e  a025              ADR      r0,|L1.15028|
003a20  f7fffffe          BL       ShellPrintf
003a24  7ee1              LDRB     r1,[r4,#0x1b]         ;4043
003a26  7f20              LDRB     r0,[r4,#0x1c]         ;4043
003a28  0209              LSLS     r1,r1,#8              ;4043
003a2a  1841              ADDS     r1,r0,r1              ;4043
003a2c  a069              ADR      r0,|L1.15316|
003a2e  f7fffffe          BL       ShellPrintf
003a32  a01e              ADR      r0,|L1.15020|
003a34  f7fffffe          BL       ShellPrintf
003a38  201b              MOVS     r0,#0x1b              ;4045
003a3a  f7fffffe          BL       ShellPutByte
003a3e  481c              LDR      r0,|L1.15024|
003a40  f7fffffe          BL       ShellPrintf
003a44  201b              MOVS     r0,#0x1b              ;4045
003a46  f7fffffe          BL       ShellPutByte
003a4a  a01a              ADR      r0,|L1.15028|
003a4c  f7fffffe          BL       ShellPrintf
003a50  7f60              LDRB     r0,[r4,#0x1d]         ;4045
003a52  0881              LSRS     r1,r0,#2              ;4045
003a54  a068              ADR      r0,|L1.15352|
003a56  f7fffffe          BL       ShellPrintf
003a5a  a014              ADR      r0,|L1.15020|
003a5c  f7fffffe          BL       ShellPrintf
003a60  201b              MOVS     r0,#0x1b              ;4047
003a62  f7fffffe          BL       ShellPutByte
003a66  4812              LDR      r0,|L1.15024|
003a68  f7fffffe          BL       ShellPrintf
003a6c  201b              MOVS     r0,#0x1b              ;4047
003a6e  f7fffffe          BL       ShellPutByte
003a72  a010              ADR      r0,|L1.15028|
003a74  f7fffffe          BL       ShellPrintf
003a78  7f60              LDRB     r0,[r4,#0x1d]         ;4047
003a7a  0781              LSLS     r1,r0,#30             ;4047
003a7c  0f89              LSRS     r1,r1,#30             ;4047
003a7e  a067              ADR      r0,|L1.15388|
003a80  f7fffffe          BL       ShellPrintf
003a84  a009              ADR      r0,|L1.15020|
003a86  f7fffffe          BL       ShellPrintf
003a8a  bd10              POP      {r4,pc}
                          ENDP

                  |L1.14988|
003a8c  2a2a2053          DCB      "** SD Status NOT Supported!\n\r",0
003a90  44205374
003a94  61747573
003a98  204e4f54
003a9c  20537570
003aa0  706f7274
003aa4  6564210a
003aa8  0d00    
003aaa  00                DCB      0
003aab  00                DCB      0
                  |L1.15020|
003aac  0a0d00            DCB      "\n\r",0
003aaf  00                DCB      0
                  |L1.15024|
                          DCD      ||.text||+0x1d44
                  |L1.15028|
003ab4  5b6d00            DCB      "[m",0
003ab7  00                DCB      0
                  |L1.15032|
003ab8  3d3d3d3d          DCB      "=========== STAT ============",0
003abc  3d3d3d3d
003ac0  3d3d3d20
003ac4  53544154
003ac8  203d3d3d
003acc  3d3d3d3d
003ad0  3d3d3d3d
003ad4  3d00    
003ad6  00                DCB      0
003ad7  00                DCB      0
                  |L1.15064|
003ad8  202e4441          DCB      " .DAT_BUS_WIDTH          :0x%X\n\r",0
003adc  545f4255
003ae0  535f5749
003ae4  44544820
003ae8  20202020
003aec  20202020
003af0  203a3078
003af4  25580a0d
003af8  00      
003af9  00                DCB      0
003afa  00                DCB      0
003afb  00                DCB      0
                  |L1.15100|
003afc  202e5345          DCB      " .SECURED_MODE           :0x%X\n\r",0
003b00  43555245
003b04  445f4d4f
003b08  44452020
003b0c  20202020
003b10  20202020
003b14  203a3078
003b18  25580a0d
003b1c  00      
003b1d  00                DCB      0
003b1e  00                DCB      0
003b1f  00                DCB      0
                  |L1.15136|
003b20  202e5344          DCB      " .SD_CARD_TYPE           :0x%X\n\r",0
003b24  5f434152
003b28  445f5459
003b2c  50452020
003b30  20202020
003b34  20202020
003b38  203a3078
003b3c  25580a0d
003b40  00      
003b41  00                DCB      0
003b42  00                DCB      0
003b43  00                DCB      0
                  |L1.15172|
003b44  202e5349          DCB      " .SIZE_OF_PROTECTED_AREA :0x%X\n\r",0
003b48  5a455f4f
003b4c  465f5052
003b50  4f544543
003b54  5445445f
003b58  41524541
003b5c  203a3078
003b60  25580a0d
003b64  00      
003b65  00                DCB      0
003b66  00                DCB      0
003b67  00                DCB      0
                  |L1.15208|
003b68  202e5350          DCB      " .SPEED_CLASS            :0x%X\n\r",0
003b6c  4545445f
003b70  434c4153
003b74  53202020
003b78  20202020
003b7c  20202020
003b80  203a3078
003b84  25580a0d
003b88  00      
003b89  00                DCB      0
003b8a  00                DCB      0
003b8b  00                DCB      0
                  |L1.15244|
003b8c  202e5045          DCB      " .PERFORMANCE_MOVE       :0x%X\n\r",0
003b90  52464f52
003b94  4d414e43
003b98  455f4d4f
003b9c  56452020
003ba0  20202020
003ba4  203a3078
003ba8  25580a0d
003bac  00      
003bad  00                DCB      0
003bae  00                DCB      0
003baf  00                DCB      0
                  |L1.15280|
003bb0  202e4155          DCB      " .AU_SIZE                :0x%X\n\r",0
003bb4  5f53495a
003bb8  45202020
003bbc  20202020
003bc0  20202020
003bc4  20202020
003bc8  203a3078
003bcc  25580a0d
003bd0  00      
003bd1  00                DCB      0
003bd2  00                DCB      0
003bd3  00                DCB      0
                  |L1.15316|
003bd4  202e4552          DCB      " .ERASE_SIZE             :0x%X\n\r",0
003bd8  4153455f
003bdc  53495a45
003be0  20202020
003be4  20202020
003be8  20202020
003bec  203a3078
003bf0  25580a0d
003bf4  00      
003bf5  00                DCB      0
003bf6  00                DCB      0
003bf7  00                DCB      0
                  |L1.15352|
003bf8  202e4552          DCB      " .ERASE_TIMEOUT          :0x%X\n\r",0
003bfc  4153455f
003c00  54494d45
003c04  4f555420
003c08  20202020
003c0c  20202020
003c10  203a3078
003c14  25580a0d
003c18  00      
003c19  00                DCB      0
003c1a  00                DCB      0
003c1b  00                DCB      0
                  |L1.15388|
003c1c  202e4552          DCB      " .ERASE_OFFSET           :0x%X\n\r",0
003c20  4153455f
003c24  4f464653
003c28  45542020
003c2c  20202020
003c30  20202020
003c34  203a3078
003c38  25580a0d
003c3c  00      
003c3d  00                DCB      0
003c3e  00                DCB      0
003c3f  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x0000000a
                          DCD      0x00000064
                          DCD      0x000003e8
                          DCD      0x00002710
                          DCD      0x00000000
                          DCD      0x0000000a
                          DCD      0x0000000c
                          DCD      0x0000000d
                          DCD      0x0000000f
                          DCD      0x00000014
                          DCD      0x0000001a
                          DCD      0x0000001e
                          DCD      0x00000023
                          DCD      0x00000028
                          DCD      0x0000002d
                          DCD      0x00000034
                          DCD      0x00000037
                          DCD      0x0000003c
                          DCD      0x00000046
                          DCD      0x00000050
                          DCD      0x00000000
                          DCD      0x0000000a
                          DCD      0x0000000c
                          DCD      0x0000000d
                          DCD      0x0000000f
                          DCD      0x00000014
                          DCD      0x00000019
                          DCD      0x0000001e
                          DCD      0x00000023
                          DCD      0x00000028
                          DCD      0x0000002d
                          DCD      0x00000032
                          DCD      0x00000037
                          DCD      0x0000003c
                          DCD      0x00000046
                          DCD      0x00000050

                          AREA ||.data||, DATA, ALIGN=0

                  gSdmmcAutoHsEnable
000000  01                DCB      0x01
