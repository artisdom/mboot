; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave --gnu -o.\output\main.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\main.d --cpu=ARM926EJ-S --apcs=interwork -O1 -I.\atmel -I.\ -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Atmel\SAM9M10 -Dat91sam9m10 -Dddram -DNOFPUT -DTRACE_LEVEL=4 --omf_browse=.\output\main.crf main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Config_FPGA_PS_SPI PROC
;;;109    void
;;;110    Config_FPGA_PS_SPI(void)
000000  b510              PUSH     {r4,lr}
;;;111    {
;;;112    	PMC_PeriEn(AT91C_ID_SPI1);
000002  200f              MOVS     r0,#0xf
000004  f7fffffe          BL       PMC_PeriEn
;;;113    	rSPI_CR(1) = (1 << 7);
000008  4cd4              LDR      r4,|L1.860|
00000a  2080              MOVS     r0,#0x80
00000c  6020              STR      r0,[r4,#0]
;;;114    	rSPI_CR(1) = (1 << 7);
00000e  6020              STR      r0,[r4,#0]
;;;115    	rSPI_MR(1) = (0x6 << 24) + (0xF << 16) + (1 << 7) + (0 << 5) + (1 << 4) + (0 << 2) + (0 << 1) + (1 << 0);
000010  48d3              LDR      r0,|L1.864|
000012  6060              STR      r0,[r4,#4]
;;;116    	rSPI_IDR(1) = 0xFFFFFFFF;
000014  48d3              LDR      r0,|L1.868|
000016  61a0              STR      r0,[r4,#0x18]
;;;117    	PMC_PeriDis(AT91C_ID_SPI1);
000018  200f              MOVS     r0,#0xf
00001a  f7fffffe          BL       PMC_PeriDis
;;;118    	rSPI_CSR0(1) = (0x1 << 24) + (0x1 << 16) + (0x4 << 8) + (0x0 << 4) + (0 << 3) + (1 << 1) + (0 << 0);
00001e  48d2              LDR      r0,|L1.872|
000020  6320              STR      r0,[r4,#0x30]
;;;119    }
000022  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  scan_files PROC
;;;126    //------------------------------------------------------------------------------
;;;127    static FRESULT scan_files(char* path)
000024  b570              PUSH     {r4-r6,lr}
;;;128    {
000026  b08e              SUB      sp,sp,#0x38
000028  0005              MOVS     r5,r0
;;;129        FRESULT res;
;;;130        FILINFO fno;
;;;131        DIR dir;
;;;132        int i;
;;;133        char *fn;
;;;134    #if _USE_LFN
;;;135        static char lfn[_MAX_LFN * (_DF1S ? 2 : 1) + 1];
;;;136        fno.lfname = lfn;
;;;137        fno.lfsize = sizeof(lfn);
;;;138    #endif
;;;139    
;;;140    
;;;141        res = f_opendir(&dir, path);
00002a  0029              MOVS     r1,r5
00002c  a801              ADD      r0,sp,#4
00002e  f7fffffe          BL       f_opendir
;;;142        if (res == FR_OK) {
000032  2800              CMP      r0,#0
000034  d130              BNE      |L1.152|
;;;143            i = strlen(path);
000036  0028              MOVS     r0,r5
000038  f7fffffe          BL       strlen
00003c  0004              MOVS     r4,r0
                  |L1.62|
;;;144            for (;;) {
;;;145                res = f_readdir(&dir, &fno);
00003e  a908              ADD      r1,sp,#0x20
000040  a801              ADD      r0,sp,#4
000042  f7fffffe          BL       f_readdir
;;;146                if (res != FR_OK || fno.fname[0] == 0) break;
000046  2800              CMP      r0,#0
000048  d126              BNE      |L1.152|
00004a  a908              ADD      r1,sp,#0x20
00004c  7a4b              LDRB     r3,[r1,#9]
00004e  2b00              CMP      r3,#0
000050  d022              BEQ      |L1.152|
;;;147    #if _USE_LFN
;;;148                fn = *fno.lfname ? fno.lfname : fno.fname;
;;;149    #else
;;;150                fn = fno.fname;
000052  ae0a              ADD      r6,sp,#0x28
000054  3601              ADDS     r6,#1
;;;151    #endif
;;;152                if (*fn == '.') continue;
000056  2b2e              CMP      r3,#0x2e
000058  d0f1              BEQ      |L1.62|
;;;153                if (fno.fattrib & AM_DIR) {
00005a  a808              ADD      r0,sp,#0x20
00005c  7a00              LDRB     r0,[r0,#8]
00005e  06c0              LSLS     r0,r0,#27
000060  d5ed              BPL      |L1.62|
;;;154                    TRACE_MSG(&path[i], "/%s", fn);
000062  201b              MOVS     r0,#0x1b
000064  f7fffffe          BL       ShellPutByte
000068  a0c0              ADR      r0,|L1.876|
00006a  f7fffffe          BL       ShellPrintf
00006e  201b              MOVS     r0,#0x1b
000070  f7fffffe          BL       ShellPutByte
000074  a0c0              ADR      r0,|L1.888|
000076  f7fffffe          BL       ShellPrintf
00007a  1928              ADDS     r0,r5,r4
00007c  0032              MOVS     r2,r6
00007e  a1bf              ADR      r1,|L1.892|
000080  f7fffffe          BL       ShellPrintf
000084  a0be              ADR      r0,|L1.896|
000086  f7fffffe          BL       ShellPrintf
;;;155                    res = scan_files(path);
00008a  0028              MOVS     r0,r5
00008c  f7fffffe          BL       scan_files
;;;156                    if (res != FR_OK) break;
000090  2800              CMP      r0,#0
000092  d101              BNE      |L1.152|
;;;157                    path[i] = 0;
000094  5528              STRB     r0,[r5,r4]
000096  e7d2              B        |L1.62|
                  |L1.152|
;;;158                } else {
;;;159                    DEBUG_MSG("%s/%s", path, fn);
;;;160                }
;;;161            }
;;;162        }
;;;163    
;;;164        return res;
;;;165    }
000098  b00e              ADD      sp,sp,#0x38
00009a  bd70              POP      {r4-r6,pc}
;;;166    
                          ENDP

                  LoadImage PROC
;;;171    static void
;;;172    LoadImage(void)
00009c  b5f0              PUSH     {r4-r7,lr}
;;;173    {
00009e  b0ff              SUB      sp,sp,#0x1fc
0000a0  b0ff              SUB      sp,sp,#0x1fc
0000a2  b09f              SUB      sp,sp,#0x7c
;;;174        unsigned int i, j;
;;;175        unsigned int ByteToRead;
;;;176        unsigned int ByteRead;
;;;177    	
;;;178    	U8 buf, cnt;
;;;179    
;;;180        FRESULT res;
;;;181        DIR dirs;
;;;182        FATFS fs;             // File system object
;;;183        FIL FileObject;
;;;184    
;;;185        if (!MEDSdcard_Initialize(&medias[ID_DRV], MCI_ID))
0000a4  48b7              LDR      r0,|L1.900|
0000a6  2100              MOVS     r1,#0
0000a8  f7fffffe          BL       MEDSdcard_Initialize
0000ac  2800              CMP      r0,#0
0000ae  d026              BEQ      |L1.254|
;;;186    	{
;;;187            TRACE_ERR("SD Init fail\n\r");
;;;188            return;
;;;189        }
;;;190        numMedias = 1;
0000b0  49b5              LDR      r1,|L1.904|
0000b2  2001              MOVS     r0,#1
0000b4  6008              STR      r0,[r1,#0]  ; numMedias
;;;191    
;;;192        // Mount disk
;;;193        DEBUG_MSG("Mount disk %d", ID_DRV);
;;;194        memset(&fs, 0, sizeof(FATFS));      // Clear file system object
0000b6  2123              MOVS     r1,#0x23
0000b8  ac89              ADD      r4,sp,#0x224
0000ba  0109              LSLS     r1,r1,#4
0000bc  0020              MOVS     r0,r4
0000be  f7fffffe          BL       __aeabi_memclr4
;;;195        res = f_mount(ID_DRV, &fs);
0000c2  0021              MOVS     r1,r4
0000c4  2000              MOVS     r0,#0
0000c6  f7fffffe          BL       f_mount
0000ca  0004              MOVS     r4,r0
;;;196        if( res != FR_OK )
0000cc  2c00              CMP      r4,#0
0000ce  d029              BEQ      |L1.292|
;;;197    	{
;;;198            TRACE_ERR("f_mount pb: 0x%X", res);
0000d0  201b              MOVS     r0,#0x1b
0000d2  f7fffffe          BL       ShellPutByte
0000d6  a0ad              ADR      r0,|L1.908|
0000d8  f7fffffe          BL       ShellPrintf
0000dc  201b              MOVS     r0,#0x1b
0000de  f7fffffe          BL       ShellPutByte
0000e2  a0a5              ADR      r0,|L1.888|
0000e4  f7fffffe          BL       ShellPrintf
0000e8  0021              MOVS     r1,r4
0000ea  a0ab              ADR      r0,|L1.920|
0000ec  f7fffffe          BL       ShellPrintf
0000f0  a0a3              ADR      r0,|L1.896|
0000f2  f7fffffe          BL       ShellPrintf
                  |L1.246|
;;;199            return;
;;;200        }
;;;201    
;;;202        // Test if the disk is formated
;;;203        res = f_opendir (&dirs,STR_ROOT_DIRECTORY);
;;;204        if(res == FR_OK )
;;;205    	{
;;;206    		scan_files(STR_ROOT_DIRECTORY);
;;;207        	res = f_open(&FileObject, zImageName, FA_OPEN_EXISTING|FA_READ);
;;;208        	if( res != FR_OK )
;;;209    		{
;;;210            	TRACE_ERR("f_open read pb: 0x%X", res);
;;;211            	return;
;;;212        	}
;;;213    
;;;214        // Read file
;;;215    		DEBUG_MSG("Read file");
;;;216        	ByteToRead = FileObject.fsize;
;;;217    		res = f_read(&FileObject, (void*)0x70008000, ByteToRead, &ByteRead);
;;;218        	if(res != FR_OK)
;;;219    		{
;;;220            	TRACE_ERR("f_read pb: 0x%X", res);
;;;221            	return;
;;;222    		}
;;;223    		
;;;224        	res = f_open(&FileObject, gridName, FA_OPEN_EXISTING|FA_READ);
;;;225        	if( res != FR_OK )
;;;226    		{
;;;227            	TRACE_ERR("f_open read pb: 0x%X", res);
;;;228            	return;
;;;229        	}		
;;;230    	    ByteToRead = FileObject.fsize;
;;;231    		res = f_read(&FileObject, (void*)0x71008000, ByteToRead, &ByteRead);
;;;232        	if(res != FR_OK)
;;;233    		{
;;;234            	TRACE_ERR("f_read pb: 0x%X", res);
;;;235            	return;
;;;236    		}	
;;;237    		
;;;238    		
;;;239        }
;;;240    	
;;;241    	PRINT_F("\n\r\n\r");
;;;242    
;;;243    	FPGA_CONF_N();
;;;244    	FPGA_CONF_P();
;;;245    
;;;246    	while(!FPGA_STAT);
;;;247    	
;;;248    	for(i=0;i<0x1000000;i++)
;;;249    	{
;;;250    		buf = SFR_RD8(0x71008000+i);
;;;251    		
;;;252    		for(cnt = 0; cnt < 8; cnt++)
;;;253    		{
;;;254    			if(((buf>>(cnt))&(0x1))==0x1)
;;;255    			{
;;;256    				FPGA_DATA_P();
;;;257    			}
;;;258    			else
;;;259    			{
;;;260    				FPGA_DATA_N();
;;;261    			}	
;;;262    			FPGA_DCLK_P();
;;;263    			FPGA_DCLK_N();
;;;264    		}
;;;265    		if(FPGA_DONE) break;
;;;266    	}
;;;267    
;;;268    	for(i=0;i<64;i++) for(j=0;j<8;j++) CP15_CleanInvalidateDcacheIndex((i<<26)|(j<<5));
;;;269    	CP15_DisableDcache();
;;;270    	CP15_DisableIcache();
;;;271    	CP15_InvalidateIcache();
;;;272    	CP15_DisableMMU();
;;;273    	CP15_InvalidateTLB(); 
;;;274    
;;;275    	run = (void (*)(void))0x70008000;
;;;276    
;;;277    	BootmSet_ParamAddr(0x70008000 - 0x7F00);
;;;278    	BootmSet_MachineID(1830);
;;;279    	run();
;;;280    }
0000f6  b07f              ADD      sp,sp,#0x1fc
0000f8  b07f              ADD      sp,sp,#0x1fc
0000fa  b01f              ADD      sp,sp,#0x7c
0000fc  bdf0              POP      {r4-r7,pc}
                  |L1.254|
0000fe  201b              MOVS     r0,#0x1b              ;187
000100  f7fffffe          BL       ShellPutByte
000104  a0a1              ADR      r0,|L1.908|
000106  f7fffffe          BL       ShellPrintf
00010a  201b              MOVS     r0,#0x1b              ;187
00010c  f7fffffe          BL       ShellPutByte
000110  a099              ADR      r0,|L1.888|
000112  f7fffffe          BL       ShellPrintf
000116  a0a5              ADR      r0,|L1.940|
000118  f7fffffe          BL       ShellPrintf
00011c  a098              ADR      r0,|L1.896|
00011e  f7fffffe          BL       ShellPrintf
000122  e7e8              B        |L1.246|
                  |L1.292|
000124  a8ff              ADD      r0,sp,#0x3fc          ;203
000126  3058              ADDS     r0,r0,#0x58           ;203
000128  a1a4              ADR      r1,|L1.956|
00012a  f7fffffe          BL       f_opendir
00012e  4ea4              LDR      r6,|L1.960|
000130  2800              CMP      r0,#0                 ;204
000132  d179              BNE      |L1.552|
000134  a0a1              ADR      r0,|L1.956|
000136  f7fffffe          BL       scan_files
00013a  4da2              LDR      r5,|L1.964|
00013c  466f              MOV      r7,sp                 ;207
00013e  6869              LDR      r1,[r5,#4]            ;207  ; zImageName
000140  2201              MOVS     r2,#1                 ;207
000142  0038              MOVS     r0,r7                 ;207
000144  f7fffffe          BL       f_open
000148  0004              MOVS     r4,r0                 ;207
00014a  2c00              CMP      r4,#0                 ;208
00014c  d013              BEQ      |L1.374|
00014e  201b              MOVS     r0,#0x1b              ;210
000150  f7fffffe          BL       ShellPutByte
000154  a08d              ADR      r0,|L1.908|
000156  f7fffffe          BL       ShellPrintf
00015a  201b              MOVS     r0,#0x1b              ;210
00015c  f7fffffe          BL       ShellPutByte
000160  a085              ADR      r0,|L1.888|
000162  f7fffffe          BL       ShellPrintf
000166  0021              MOVS     r1,r4                 ;210
000168  a097              ADR      r0,|L1.968|
00016a  f7fffffe          BL       ShellPrintf
00016e  a084              ADR      r0,|L1.896|
000170  f7fffffe          BL       ShellPrintf
000174  e7bf              B        |L1.246|
                  |L1.374|
000176  9a03              LDR      r2,[sp,#0xc]          ;216
000178  abff              ADD      r3,sp,#0x3fc          ;217
00017a  4999              LDR      r1,|L1.992|
00017c  3374              ADDS     r3,r3,#0x74           ;217
00017e  0038              MOVS     r0,r7                 ;217
000180  f7fffffe          BL       f_read
000184  0004              MOVS     r4,r0                 ;217
000186  2c00              CMP      r4,#0                 ;218
000188  d013              BEQ      |L1.434|
00018a  201b              MOVS     r0,#0x1b              ;220
00018c  f7fffffe          BL       ShellPutByte
000190  a07e              ADR      r0,|L1.908|
000192  f7fffffe          BL       ShellPrintf
000196  201b              MOVS     r0,#0x1b              ;220
000198  f7fffffe          BL       ShellPutByte
00019c  a076              ADR      r0,|L1.888|
00019e  f7fffffe          BL       ShellPrintf
0001a2  0021              MOVS     r1,r4                 ;220
0001a4  a08f              ADR      r0,|L1.996|
0001a6  f7fffffe          BL       ShellPrintf
0001aa  a075              ADR      r0,|L1.896|
0001ac  f7fffffe          BL       ShellPrintf
0001b0  e7a1              B        |L1.246|
                  |L1.434|
0001b2  6829              LDR      r1,[r5,#0]            ;224  ; gridName
0001b4  2201              MOVS     r2,#1                 ;224
0001b6  0038              MOVS     r0,r7                 ;224
0001b8  f7fffffe          BL       f_open
0001bc  0004              MOVS     r4,r0                 ;224
0001be  2c00              CMP      r4,#0                 ;225
0001c0  d013              BEQ      |L1.490|
0001c2  201b              MOVS     r0,#0x1b              ;227
0001c4  f7fffffe          BL       ShellPutByte
0001c8  a070              ADR      r0,|L1.908|
0001ca  f7fffffe          BL       ShellPrintf
0001ce  201b              MOVS     r0,#0x1b              ;227
0001d0  f7fffffe          BL       ShellPutByte
0001d4  a068              ADR      r0,|L1.888|
0001d6  f7fffffe          BL       ShellPrintf
0001da  0021              MOVS     r1,r4                 ;227
0001dc  a07a              ADR      r0,|L1.968|
0001de  f7fffffe          BL       ShellPrintf
0001e2  a067              ADR      r0,|L1.896|
0001e4  f7fffffe          BL       ShellPrintf
0001e8  e785              B        |L1.246|
                  |L1.490|
0001ea  9a03              LDR      r2,[sp,#0xc]          ;230
0001ec  abff              ADD      r3,sp,#0x3fc          ;231
0001ee  3374              ADDS     r3,r3,#0x74           ;231
0001f0  0031              MOVS     r1,r6                 ;231
0001f2  0038              MOVS     r0,r7                 ;231
0001f4  f7fffffe          BL       f_read
0001f8  0004              MOVS     r4,r0                 ;231
0001fa  2c00              CMP      r4,#0                 ;232
0001fc  d014              BEQ      |L1.552|
0001fe  201b              MOVS     r0,#0x1b              ;234
000200  f7fffffe          BL       ShellPutByte
000204  a061              ADR      r0,|L1.908|
000206  f7fffffe          BL       ShellPrintf
00020a  201b              MOVS     r0,#0x1b              ;234
00020c  f7fffffe          BL       ShellPutByte
000210  a059              ADR      r0,|L1.888|
000212  f7fffffe          BL       ShellPrintf
000216  0021              MOVS     r1,r4                 ;234
000218  a072              ADR      r0,|L1.996|
00021a  f7fffffe          BL       ShellPrintf
00021e  a058              ADR      r0,|L1.896|
000220  f7fffffe          BL       ShellPrintf
000224  e767              B        |L1.246|
000226  e7ff              B        |L1.552|
                  |L1.552|
000228  a072              ADR      r0,|L1.1012|
00022a  f7fffffe          BL       ShellPrintf
00022e  4873              LDR      r0,|L1.1020|
000230  4d73              LDR      r5,|L1.1024|
000232  6368              STR      r0,[r5,#0x34]         ;243
000234  6328              STR      r0,[r5,#0x30]         ;244
000236  4873              LDR      r0,|L1.1028|
                  |L1.568|
000238  6bc1              LDR      r1,[r0,#0x3c]         ;246
00023a  0f09              LSRS     r1,r1,#28             ;246
00023c  07c9              LSLS     r1,r1,#31             ;246
00023e  d0fb              BEQ      |L1.568|
000240  2400              MOVS     r4,#0                 ;248
000242  4e71              LDR      r6,|L1.1032|
000244  4f71              LDR      r7,|L1.1036|
                  |L1.582|
000246  485e              LDR      r0,|L1.960|
000248  1820              ADDS     r0,r4,r0              ;250
00024a  f7fffffe          BL       SFR_RD8
00024e  0002              MOVS     r2,r0                 ;250
000250  2100              MOVS     r1,#0                 ;252
                  |L1.594|
000252  0010              MOVS     r0,r2                 ;254
000254  40c8              LSRS     r0,r0,r1              ;254
000256  07c0              LSLS     r0,r0,#31             ;254
000258  d001              BEQ      |L1.606|
00025a  632e              STR      r6,[r5,#0x30]         ;256
00025c  e000              B        |L1.608|
                  |L1.606|
00025e  636e              STR      r6,[r5,#0x34]         ;260
                  |L1.608|
000260  632f              STR      r7,[r5,#0x30]         ;262
000262  636f              STR      r7,[r5,#0x34]         ;263
000264  1c49              ADDS     r1,r1,#1              ;252
000266  0609              LSLS     r1,r1,#24             ;252
000268  0e09              LSRS     r1,r1,#24             ;252
00026a  2908              CMP      r1,#8                 ;252
00026c  d3f1              BCC      |L1.594|
00026e  6be8              LDR      r0,[r5,#0x3c]         ;265
000270  0b80              LSRS     r0,r0,#14             ;265
000272  07c0              LSLS     r0,r0,#31             ;265
000274  d104              BNE      |L1.640|
000276  1c64              ADDS     r4,r4,#1              ;248
000278  2001              MOVS     r0,#1                 ;248
00027a  0600              LSLS     r0,r0,#24             ;248
00027c  4284              CMP      r4,r0                 ;248
00027e  d3e2              BCC      |L1.582|
                  |L1.640|
000280  2500              MOVS     r5,#0                 ;268
                  |L1.642|
000282  2400              MOVS     r4,#0                 ;268
000284  06ae              LSLS     r6,r5,#26             ;268
                  |L1.646|
000286  0030              MOVS     r0,r6                 ;268
000288  0161              LSLS     r1,r4,#5              ;268
00028a  4308              ORRS     r0,r0,r1              ;268
00028c  f7fffffe          BL       CP15_CleanInvalidateDcacheIndex
000290  1c64              ADDS     r4,r4,#1              ;268
000292  2c08              CMP      r4,#8                 ;268
000294  d3f7              BCC      |L1.646|
000296  1c6d              ADDS     r5,r5,#1              ;268
000298  2d40              CMP      r5,#0x40              ;268
00029a  d3f2              BCC      |L1.642|
00029c  f7fffffe          BL       CP15_DisableDcache
0002a0  f7fffffe          BL       CP15_DisableIcache
0002a4  f7fffffe          BL       CP15_InvalidateIcache
0002a8  f7fffffe          BL       CP15_DisableMMU
0002ac  f7fffffe          BL       CP15_InvalidateTLB
0002b0  484b              LDR      r0,|L1.992|
0002b2  4c44              LDR      r4,|L1.964|
0002b4  60a0              STR      r0,[r4,#8]            ;275  ; run
0002b6  4856              LDR      r0,|L1.1040|
0002b8  f7fffffe          BL       BootmSet_ParamAddr
0002bc  4855              LDR      r0,|L1.1044|
0002be  f7fffffe          BL       BootmSet_MachineID
0002c2  68a0              LDR      r0,[r4,#8]            ;279  ; run
0002c4  4780              BLX      r0                    ;279
0002c6  e716              B        |L1.246|
;;;281    
                          ENDP

                  mbootBanner PROC
;;;301    void
;;;302    mbootBanner(void)
0002c8  b510              PUSH     {r4,lr}
;;;303    {
;;;304    	ShellAllClear();
0002ca  f7fffffe          BL       ShellAllClear
;;;305    	
;;;306    	SHELL_INF("        __                      __"); 
0002ce  a052              ADR      r0,|L1.1048|
0002d0  f7fffffe          BL       ShellPrintf
0002d4  a02a              ADR      r0,|L1.896|
0002d6  f7fffffe          BL       ShellPrintf
;;;307    	SHELL_INF("       /\\ \\                    /\\ \\__"); 
0002da  a058              ADR      r0,|L1.1084|
0002dc  f7fffffe          BL       ShellPrintf
0002e0  a027              ADR      r0,|L1.896|
0002e2  f7fffffe          BL       ShellPrintf
;;;308    	SHELL_INF("___ ___\\ \\ \\____    ___     ___\\ \\ ,_\\"); 
0002e6  a05f              ADR      r0,|L1.1124|
0002e8  f7fffffe          BL       ShellPrintf
0002ec  a024              ADR      r0,|L1.896|
0002ee  f7fffffe          BL       ShellPrintf
;;;309    	SHELL_INF(" __` __`\\ \\ '__`\\  / __`\\  / __`\\ \\ \\/"); 
0002f2  a066              ADR      r0,|L1.1164|
0002f4  f7fffffe          BL       ShellPrintf
0002f8  a021              ADR      r0,|L1.896|
0002fa  f7fffffe          BL       ShellPrintf
;;;310    	SHELL_INF(" \\/\\ \\/\\ \\ \\ \\_\\ \\/\\ \\_\\ \\/\\ \\_\\ \\ \\ \\_"); 
0002fe  a06d              ADR      r0,|L1.1204|
000300  f7fffffe          BL       ShellPrintf
000304  a01e              ADR      r0,|L1.896|
000306  f7fffffe          BL       ShellPrintf
;;;311    	SHELL_INF("\\_\\ \\_\\ \\_\\ \\_,__/\\ \\____/\\ \\____/\\ \\__\\"); 
00030a  a074              ADR      r0,|L1.1244|
00030c  f7fffffe          BL       ShellPrintf
000310  a01b              ADR      r0,|L1.896|
000312  f7fffffe          BL       ShellPrintf
;;;312    	SHELL_INF("/_/\\/_/\\/_/\\/___/  \\/___/  \\/___/  \\/__/"); 
000316  a07c              ADR      r0,|L1.1288|
000318  f7fffffe          BL       ShellPrintf
00031c  a018              ADR      r0,|L1.896|
00031e  f7fffffe          BL       ShellPrintf
;;;313    	
;;;314    	// Above banner is generated by: http://www.network-science.de/ascii/
;;;315    	// HTML-Frontend (c) 1996-2012 by Jorg Seyfferth
;;;316    	
;;;317    	SHELL_EMPTY();
000322  a017              ADR      r0,|L1.896|
000324  f7fffffe          BL       ShellPrintf
;;;318    	SHELL_INF("Lophilo-mboot V0.1 (%s %s)", __DATE__, __TIME__);
000328  a282              ADR      r2,|L1.1332|
00032a  a185              ADR      r1,|L1.1344|
00032c  a087              ADR      r0,|L1.1356|
00032e  f7fffffe          BL       ShellPrintf
000332  a013              ADR      r0,|L1.896|
000334  f7fffffe          BL       ShellPrintf
;;;319    	SHELL_INF("By Shyu Lee and Ricky Ng-Adam");
000338  a08b              ADR      r0,|L1.1384|
00033a  f7fffffe          BL       ShellPrintf
00033e  a010              ADR      r0,|L1.896|
000340  f7fffffe          BL       ShellPrintf
;;;320    	SHELL_BNNER();
000344  a090              ADR      r0,|L1.1416|
000346  f7fffffe          BL       ShellPrintf
;;;321    	SHELL_EMPTY();
00034a  a00d              ADR      r0,|L1.896|
00034c  f7fffffe          BL       ShellPrintf
;;;322    }
000350  bd10              POP      {r4,pc}
                          ENDP

                  main PROC
;;;284    S32
;;;285    main()
000352  f7fffffe          BL       mbootBanner
;;;286    {
;;;287    	mbootBanner();
;;;288    	LoadImage();
000356  f7fffffe          BL       LoadImage
                  |L1.858|
;;;289    //	
;;;290    
;;;291    
;;;292    	
;;;293    	
;;;294    //	TRACE_MSG("THE RESULT IS: 0x%02x", j);
;;;295    
;;;296    
;;;297    
;;;298    	while(1);
00035a  e7fe              B        |L1.858|
;;;299    }
;;;300    
                          ENDP

                  |L1.860|
                          DCD      0xfffa8000
                  |L1.864|
                          DCD      0x060f0091
                  |L1.868|
                          DCD      0xffffffff
                  |L1.872|
                          DCD      0x01010402
                  |L1.876|
00036c  5b313b31          DCB      "[1;1;34mI: ",0
000370  3b33346d
000374  493a2000
                  |L1.888|
000378  5b6d00            DCB      "[m",0
00037b  00                DCB      0
                  |L1.892|
00037c  2f257300          DCB      "/%s",0
                  |L1.896|
000380  0a0d00            DCB      "\n\r",0
000383  00                DCB      0
                  |L1.900|
                          DCD      ||.bss||
                  |L1.904|
                          DCD      numMedias
                  |L1.908|
00038c  5b313b31          DCB      "[1;1;31mE: ",0
000390  3b33316d
000394  453a2000
                  |L1.920|
000398  665f6d6f          DCB      "f_mount pb: 0x%X",0
00039c  756e7420
0003a0  70623a20
0003a4  30782558
0003a8  00      
0003a9  00                DCB      0
0003aa  00                DCB      0
0003ab  00                DCB      0
                  |L1.940|
0003ac  53442049          DCB      "SD Init fail\n\r",0
0003b0  6e697420
0003b4  6661696c
0003b8  0a0d00  
0003bb  00                DCB      0
                  |L1.956|
0003bc  303a00            DCB      "0:",0
0003bf  00                DCB      0
                  |L1.960|
                          DCD      0x71008000
                  |L1.964|
                          DCD      ||.data||
                  |L1.968|
0003c8  665f6f70          DCB      "f_open read pb: 0x%X",0
0003cc  656e2072
0003d0  65616420
0003d4  70623a20
0003d8  30782558
0003dc  00      
0003dd  00                DCB      0
0003de  00                DCB      0
0003df  00                DCB      0
                  |L1.992|
                          DCD      0x70008000
                  |L1.996|
0003e4  665f7265          DCB      "f_read pb: 0x%X",0
0003e8  61642070
0003ec  623a2030
0003f0  78255800
                  |L1.1012|
0003f4  0a0d0a0d          DCB      "\n\r\n\r",0
0003f8  00      
0003f9  00                DCB      0
0003fa  00                DCB      0
0003fb  00                DCB      0
                  |L1.1020|
                          DCD      0x00020000
                  |L1.1024|
                          DCD      0xfffff400
                  |L1.1028|
                          DCD      0xfffff800
                  |L1.1032|
                          DCD      0x00008000
                  |L1.1036|
                          DCD      0x00010000
                  |L1.1040|
                          DCD      0x70000100
                  |L1.1044|
                          DCD      0x00000726
                  |L1.1048|
000418  20202020          DCB      "        __                      __",0
00041c  20202020
000420  5f5f2020
000424  20202020
000428  20202020
00042c  20202020
000430  20202020
000434  20202020
000438  5f5f00  
00043b  00                DCB      0
                  |L1.1084|
00043c  20202020          DCB      "       /\\ \\                    /\\ \\__",0
000440  2020202f
000444  5c205c20
000448  20202020
00044c  20202020
000450  20202020
000454  20202020
000458  2020202f
00045c  5c205c5f
000460  5f00    
000462  00                DCB      0
000463  00                DCB      0
                  |L1.1124|
000464  5f5f5f20          DCB      "___ ___\\ \\ \\____    ___     ___\\ \\ ,_\\",0
000468  5f5f5f5c
00046c  205c205c
000470  5f5f5f5f
000474  20202020
000478  5f5f5f20
00047c  20202020
000480  5f5f5f5c
000484  205c202c
000488  5f5c00  
00048b  00                DCB      0
                  |L1.1164|
00048c  205f5f60          DCB      " __` __`\\ \\ '__`\\  / __`\\  / __`\\ \\ \\/",0
000490  205f5f60
000494  5c205c20
000498  275f5f60
00049c  5c20202f
0004a0  205f5f60
0004a4  5c20202f
0004a8  205f5f60
0004ac  5c205c20
0004b0  5c2f00  
0004b3  00                DCB      0
                  |L1.1204|
0004b4  205c2f5c          DCB      " \\/\\ \\/\\ \\ \\ \\_\\ \\/\\ \\_\\ \\/\\ \\_\\ \\ \\ "
0004b8  205c2f5c
0004bc  205c205c
0004c0  205c5f5c
0004c4  205c2f5c
0004c8  205c5f5c
0004cc  205c2f5c
0004d0  205c5f5c
0004d4  205c205c
0004d8  20      
0004d9  5c5f00            DCB      "\\_",0
                  |L1.1244|
0004dc  5c5f5c20          DCB      "\\_\\ \\_\\ \\_\\ \\_,__/\\ \\____/\\ \\____/\\ \\__\\",0
0004e0  5c5f5c20
0004e4  5c5f5c20
0004e8  5c5f2c5f
0004ec  5f2f5c20
0004f0  5c5f5f5f
0004f4  5f2f5c20
0004f8  5c5f5f5f
0004fc  5f2f5c20
000500  5c5f5f5c
000504  00      
000505  00                DCB      0
000506  00                DCB      0
000507  00                DCB      0
                  |L1.1288|
000508  2f5f2f5c          DCB      "/_/\\/_/\\/_/\\/___/  \\/___/  \\/___/  \\/__/",0
00050c  2f5f2f5c
000510  2f5f2f5c
000514  2f5f5f5f
000518  2f20205c
00051c  2f5f5f5f
000520  2f20205c
000524  2f5f5f5f
000528  2f20205c
00052c  2f5f5f2f
000530  00      
000531  00                DCB      0
000532  00                DCB      0
000533  00                DCB      0
                  |L1.1332|
000534  31323a30          DCB      "12:07:54",0
000538  373a3534
00053c  00      
00053d  00                DCB      0
00053e  00                DCB      0
00053f  00                DCB      0
                  |L1.1344|
000540  4d617920          DCB      "May 22 2012",0
000544  32322032
000548  30313200
                  |L1.1356|
00054c  4c6f7068          DCB      "Lophilo-mboot V0.1 (%s %s)",0
000550  696c6f2d
000554  6d626f6f
000558  74205630
00055c  2e312028
000560  25732025
000564  732900  
000567  00                DCB      0
                  |L1.1384|
000568  42792053          DCB      "By Shyu Lee and Ricky Ng-Adam",0
00056c  68797520
000570  4c656520
000574  616e6420
000578  5269636b
00057c  79204e67
000580  2d416461
000584  6d00    
000586  00                DCB      0
000587  00                DCB      0
                  |L1.1416|
000588  3d3d3d3d          DCB      "==========================================\n\r",0
00058c  3d3d3d3d
000590  3d3d3d3d
000594  3d3d3d3d
000598  3d3d3d3d
00059c  3d3d3d3d
0005a0  3d3d3d3d
0005a4  3d3d3d3d
0005a8  3d3d3d3d
0005ac  3d3d3d3d
0005b0  3d3d0a0d
0005b4  00      
0005b5  00                DCB      0
0005b6  00                DCB      0
0005b7  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  medias
                          %        68

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  303a6772          DCB      "0:grid.rbf",0
000004  69642e72
000008  626600  
00000b  303a7a49          DCB      "0:zImage",0
00000f  6d616765
000013  00      

                          AREA ||.data||, DATA, ALIGN=2

                  gridName
                          DCD      ||.conststring||
                  zImageName
                          DCD      ||.conststring||+0xb
                  ||run||
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
