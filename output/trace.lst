L 1 "trace.c"
N/* ----------------------------------------------------------------------------
N *		 
N *        mboot for Lophilo embedded system
N *		
N * ----------------------------------------------------------------------------
N * GPLv2
N * ----------------------------------------------------------------------------
N */
N 
N#include "def.h"
L 1 "def.h" 1
N/*
N *------------------------------------------------------------------------------
N *
N *------------------------------------------------------------------------------
N */
N
N#ifndef __DEF_H__
N#define __DEF_H__
N
Ntypedef float F32;
Ntypedef unsigned int U32;
Ntypedef int S32;
Ntypedef unsigned short U16;
Ntypedef short int S16;
Ntypedef unsigned char U8;
Ntypedef char S8;
N
Ntypedef enum { FALSE = 0, TRUE } BOOL;
N
N#endif /* __DEF_H__ */
L 11 "trace.c" 2
N#include "trace.h"
L 1 "trace.h" 1
N/*
N *------------------------------------------------------------------------------
N *
N *------------------------------------------------------------------------------
N */
N
N#ifndef __TRACE_H__
N#define __TRACE_H__
N
N#include "shell.h"
L 1 "shell.h" 1
N/*
N *------------------------------------------------------------------------------
N *
N *------------------------------------------------------------------------------
N */
N
N#ifndef __SHELL_H__
N#define __SHELL_H__
N
N#include "def.h"
N
N#define SHELL_INF(...)		{ShellPrintf(__VA_ARGS__); ShellPrintf("\n\r");}
N#define SHELL_DATA(...)		{ShellPrintf(__VA_ARGS__);}
N#define SHELL_EMPTY()		{ShellPrintf("\n\r");}
N#define SHELL_BNNER()		{ShellPrintf("==========================================\n\r");}
N
Nvoid ShellAllClear(void);
N
NU32 ShellPrintf(const char* format,...);
Nvoid ShellSendString(S8 *pt);
Nvoid ShellGetString(S8 *string);
NS32 ShellGetIntNum(void);
N
Nvoid ShellPutByte(S8 c);
NS8 ShellGetByte(void);
NS8 ShellGetKey(void);
N
N#endif /* __SHELL_H__ */
L 11 "trace.h" 2
N
N#define DEBUG_ENABLE		0
N
N#if (DEBUG_ENABLE == 1)
X#if (0 == 1)
S#define TRACE_DEBUG(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;34mD: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__); ShellPrintf("\n\r");}
S#define TRACE_DEBUG_WP(...)		{ShellPrintf(__VA_ARGS__);}
S#define DEBUG_MSG(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;34mD: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__); ShellPrintf("\n\r");}
S#define DEBUG_MSG_WP(...)	{ShellPutByte(0x1B); ShellPrintf("[1;1;34mD: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__);}
S
S#define ASSERT(condition, ...)  { \
S    if (!(condition)) { \
S        ShellPrintf("ASSERT: "); \
S        ShellPrintf(__VA_ARGS__); \
S        while (1); \
S    } \
S}
X#define ASSERT(condition, ...)  {     if (!(condition)) {         ShellPrintf("ASSERT: ");         ShellPrintf(__VA_ARGS__);         while (1);     } }
S#define SANITY_ERROR            "Sanity check failed at %s:%d\n\r"
S
S/// Performs the same duty as the ASSERT() macro, except a default error
S/// message is output if the condition is false.
S/// \param condition  Condition to verify.
S#define SANITY_CHECK(condition) ASSERT(condition, SANITY_ERROR, __FILE__, __LINE__)
S		
S
N#else
N#define TRACE_DEBUG(...)		{ }
N#define TRACE_DEBUG_WP(...)		{ShellPrintf(__VA_ARGS__);}
N#define DEBUG_MSG(...)		{ }
N#define DEBUG_MSG_WP(...)	{ }
N#define ASSERT(...)
N#define SANITY_CHECK(...)
N#endif
N
N
N#define PRINT_F(...)		{ShellPrintf(__VA_ARGS__);}
N#define TRACE_MSG(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;34mI: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__); ShellPrintf("\n\r");}
N#define TRACE_FIN(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;32mF: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__); ShellPrintf("\n\r");}
N#define TRACE_WRN(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;33m!: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__); ShellPrintf("\n\r");}
N#define TRACE_ERR(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;31mE: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__); ShellPrintf("\n\r");}
N
N
N
N#define TRACE_ERROR(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;31mE: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__); ShellPrintf("\n\r");}
N#define TRACE_INFO(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;34mI: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__); ShellPrintf("\n\r");}
N#define TRACE_WARNING(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;33m!: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__); ShellPrintf("\n\r");}
N#define TRACE_ERROR_WP(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;31mE: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__);}
N#define TRACE_INFO_WP(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;34mI: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__);}
N#define TRACE_WARNING_WP(...)		{ShellPutByte(0x1B); ShellPrintf("[1;1;33m!: "); ShellPutByte(0x1B); ShellPrintf("[m"); ShellPrintf(__VA_ARGS__);}
N
N#endif /* __TRACE_H__ */
L 12 "trace.c" 2
N#include "shell.h"
N#include "dbgu.h"
L 1 "dbgu.h" 1
N/*
N *------------------------------------------------------------------------------
N *
N *------------------------------------------------------------------------------
N */
N
N#ifndef __DBGU_H__
N#define __DBGU_H__
N
N// -------- DBGU_CR : (USART Offset: 0x0)  Control Register -------- 
N#define DBGU_RSTRX		(0x1 <<  2) // (USART) Reset Receiver
N#define DBGU_RSTTX		(0x1 <<  3) // (USART) Reset Transmitter
N#define DBGU_RXEN		(0x1 <<  4) // (USART) Receiver Enable
N#define DBGU_RXDIS		(0x1 <<  5) // (USART) Receiver Disable
N#define DBGU_TXEN		(0x1 <<  6) // (USART) Transmitter Enable
N#define DBGU_TXDIS		(0x1 <<  7) // (USART) Transmitter Disable
N#define DBGU_RSTSTA		(0x1 <<  8) // (USART) Reset Status Bits
N
N// -------- DBGU_IER : (USART Offset: 0x8)  Interrupt Enable Register -------- 
N#define DBGU_RXRDY		(0x1 <<  0) // (USART) RXRDY Interrupt
N#define DBGU_TXRDY		(0x1 <<  1) // (USART) TXRDY Interrupt
N#define DBGU_ENDRX		(0x1 <<  3) // (USART) End of Receive Transfer Interrupt
N#define DBGU_ENDTX		(0x1 <<  4) // (USART) End of Transmit Interrupt
N#define DBGU_OVRE		(0x1 <<  5) // (USART) Overrun Interrupt
N#define DBGU_FRAME		(0x1 <<  6) // (USART) Framing Error Interrupt
N#define DBGU_PARE		(0x1 <<  7) // (USART) Parity Error Interrupt
N#define DBGU_TXEMPTY	(0x1 <<  9) // (USART) TXEMPTY Interrupt
N#define DBGU_TXBUFE		(0x1 << 11) // (USART) TXBUFE Interrupt
N#define DBGU_RXBUFF		(0x1 << 12) // (USART) RXBUFF Interrupt
N#define DBGU_COMMTX		(0x1 << 30) // (USART) Clear To Send Input Change Flag
N#define DBGU_COMMRX		(0x1 << 31) // (USART) Manchester Error Interrupt
N
N//void DBGU_TxEN(void);
N//void DBGU_TxDIS(void);
N//void DBGU_RxEN(void);
N//void DBGU_RxDIS(void);
N
Nvoid DBGU_PutByte(S8 c);
NS8 DBGU_GetByte(void);
NS8 DBGU_GetKey(void);
N
N#endif /* __DBGU_H__ */
L 14 "trace.c" 2
